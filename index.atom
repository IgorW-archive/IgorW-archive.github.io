<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>igorw</title>
    <subtitle>weblog</subtitle>
    <link href="https://igor.io/index.atom" rel="self" />
    <link href="https://igor.io/" />
    <id>igor.io</id>
    <updated>2015-04-06T16:35:01+02:00</updated>
    
        
    
    
    <entry>
        <title>Probabilistic Automata</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/22/probabilistic-automata.html"/>
        <id>https://igor.io/2014/12/22/probabilistic-automata.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Probabilistic Automata</h1>

<p>Have you seen those twitter bots that generate fake or parody tweets? The ones that look almost legit but are pretty much complete jibberish when you read them?</p>

<p>Quite often, such accounts use a so-called markov chain to generate the text. A markov chain is a state machine that has probabilistic transitions.</p>

<p>Examples include <a href="http://pdos.csail.mit.edu/scigen/">scigen</a>, <a href="http://tinysubversions.com/">tiny subversions</a>, and erikaheidi&#39;s <a href="http://socialautomata.me/">socialautomata</a>.</p>

<h2>Shannon</h2>

<p>Here is Claude Shannon, who invented some pretty cool stuff. He&#39;s kind of a big deal. In this picture he is most likely not giving a fuck.</p>

<p><center>
    <img src="/img/markov/shannon.jpg">
</center></p>

<p>Seriously though, he did some awesome shit.</p>

<p>In 1948 Shannon published a rather important paper in the <em>The Bell System Technical Journal</em>. It was titled <strong>A Mathematical Theory of Communication</strong><sup><a id="ft-1-src"></a><a href="#ft-1">1</a></sup>.</p>

<p>It is considered to be the paper that laid down the foundations for the field of information theory. In the first section, Shannon talks about <em>discrete noiseless systems</em> and as an example of an information source for such a system, written language.</p>

<p>He shows a way to model a language based on the letter frequencies, by using a markov chain, which can be used to approximate, say, English. This quote should give a rough idea of how it works:</p>

<blockquote>
<p>To construct [a second-order approximation] for example, one opens a book at random and selects a letter at random on the page. This letter is recorded. The book is then opened to another page and one reads until this letter is encountered. The succeeding letter is then recorded. Turning to another page this second letter is searched for and the succeeding letter recorded, etc.</p>
</blockquote>

<p>The example of generated text from the second-order word approximation is:</p>

<blockquote>
<p>THE HEAD AND IN FRONTAL ATTACK ON AN ENGLISH WRITER THAT THE CHARACTER OF THIS POINT IS THEREFORE ANOTHER METHOD FOR THE LETTERS THAT THE TIME OF WHO EVER TOLD THE PROBLEM FOR AN UNEXPECTED.</p>
</blockquote>

<p>This mostly laid the groundwork for a lot of twitter bots.</p>

<h2>Deterministic Finite Automaton</h2>

<p>The deterministic state machine defines a class of computations that is not turing complete. Any regular expression can be compiled down to such a state machine.</p>

<p><center>
    <img src="/img/markov/dfa.png">
</center></p>

<p>Implementing such a state machine is rather trivial, it is a <em>foreach</em> loop and a key lookup:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$rules = [</span>
<span class="x">    0 =&gt; [&#39;a&#39; =&gt; 1],</span>
<span class="x">    1 =&gt; [&#39;b&#39; =&gt; 0],</span>
<span class="x">];</span>

<span class="x">$state = 0;</span>
<span class="x">$tokens = str_split(&#39;abab&#39;);</span>

<span class="x">foreach ($tokens as $token) {</span>
<span class="x">    $state = $rules[$state][$token];</span>
<span class="x">}</span>
</code></pre></div>
<p>DFAs are mostly used for <em>matching</em> existing text against regular expressions.</p>

<h2>Generating</h2>

<p>However, with some very small extensions it is possible to make this machine generate output based on the same transition rules:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$rules = [</span>
<span class="x">    0 =&gt; [&#39;a&#39; =&gt; 1],</span>
<span class="x">    1 =&gt; [&#39;b&#39; =&gt; 0],</span>
<span class="x">];</span>

<span class="x">$state = 0;</span>
<span class="x">$output = &#39;&#39;;</span>

<span class="x">foreach (range(1, 6) as $i) {</span>
<span class="x">    $tokens = array_keys($rules[$state]);</span>
<span class="x">    $token = $tokens[array_rand($tokens)];</span>
<span class="x">    $output .= $token;</span>
<span class="x">    $state = $rules[$state][$token];</span>
<span class="x">}</span>
</code></pre></div>
<p>Back in the days there were no random number generators yet. Thus, Shannon had to use a book of random numbers. Luckily, we have algorithms for that now.</p>

<p>This modified state machine will randomly pick one of the possible tokens it could transition to.</p>

<p>And sure enough, this example generates the sequence <code>ababab</code>.</p>

<h2>Probabilities</h2>

<p>As it stands, the machine uses <code>array_rand</code>, which means it will pick the next character with an equal probability for all possibilities. If we want to model full languages though, we will need to allow certain sequences to be more probable than others.</p>

<p>This can be done by copy-pasting a function from StackOverflow:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function weighted_pick(array $weighted_values) {</span>
<span class="x">    $rand = mt_rand(1, (int) array_sum($weighted_values));</span>

<span class="x">    foreach ($weighted_values as $key =&gt; $weight) {</span>
<span class="x">        $rand -= $weight;</span>
<span class="x">        if ($rand &lt;= 0) {</span>
<span class="x">            return $key;</span>
<span class="x">        }</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Very well, now to make this work properly, we will change the format for the transition rules a bit. The new format will be:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$rules = [</span>
<span class="x">    &#39;a&#39; =&gt; [&#39;b&#39; =&gt; 1, &#39;c&#39; =&gt; 2],</span>
<span class="x">    &#39;b&#39; =&gt; [&#39;a&#39; =&gt; 1],</span>
<span class="x">    ...</span>
<span class="x">];</span>
</code></pre></div>
<p>The states have been replaced with the characters. Merging the two concepts simplifies implementation a lot. The letter <code>a</code> will be followed by the letter <code>b</code> with a probability corresponding to the weight 1 and <code>c</code> with weight 2.</p>

<p>In other words, <code>a</code> will be followed by <code>b</code> 33% of the time and by <code>c</code> 66% of the time.</p>

<h2>Building rules</h2>

<p>With that annoying stuff out of the way, we can do something really amazing. We can dynamically build a set of transition rules, based on some input text!</p>

<p>This means we can feed some text to generate the rules, then produce statistically similar text from them!</p>

<p>As a matter of fact, we will use some tricks here:</p>

<ul>
<li><p>For the transitions we will consider the last n characters (where n is adjustable).</p></li>
<li><p>We will also <em>produce</em> n characters (a unit known as n-gram) in each transition, this gives us more better words.</p></li>
</ul>

<p>This produces much better results, as we will see.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$n = 4;</span>
<span class="x">$rules = [];</span>

<span class="x">$source = &#39;With that annoying stuff out of the way, we can do something really amazing. We can dynamically build a set of transition rules, based on some input text! This means we can feed some text to generate the rules, then produce statistically similar text from them!&#39;;</span>

<span class="x">foreach (range($n, strlen($source)-4) as $i) {</span>
<span class="x">    $ngram_a = substr($source, $i - $n, $n);</span>
<span class="x">    $ngram_b = substr($source, $i, $n);</span>

<span class="x">    if (!isset($rules[$ngram_a][$ngram_b])) {</span>
<span class="x">        $rules[$ngram_a][$ngram_b] = 0;</span>
<span class="x">    }</span>

<span class="x">    $rules[$ngram_a][$ngram_b]++;</span>
<span class="x">}</span>
</code></pre></div>
<p>Running this example will build a set of rules that looks like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$rules = [</span>
<span class="x">    &#39;With&#39; =&gt; [&#39; tha&#39; =&gt; 1],</span>
<span class="x">    &#39;ith &#39; =&gt; [&#39;that&#39; =&gt; 1],</span>
<span class="x">    &#39;th t&#39; =&gt; [&#39;hat &#39; =&gt; 1],</span>
<span class="x">    &#39;h th&#39; =&gt; [&#39;at a&#39; =&gt; 1],</span>
<span class="x">    &#39; tha&#39; =&gt; [&#39;t an&#39; =&gt; 1],</span>
<span class="x">    &#39;that&#39; =&gt; [&#39; ann&#39; =&gt; 1],</span>
<span class="x">    &#39;hat &#39; =&gt; [&#39;anno&#39; =&gt; 1],</span>
<span class="x">    &#39;at a&#39; =&gt; [&#39;nnoy&#39; =&gt; 1],</span>
<span class="x">    ...</span>
<span class="x">];</span>
</code></pre></div>
<p>We can now generate random text based on these transitions:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$state = &#39;With&#39;;</span>
<span class="x">$output = &#39;&#39;;</span>

<span class="x">foreach (range(1, 20) as $i) {</span>
<span class="x">    $output .= $state;</span>
<span class="x">    if (!isset($rules[$state])) {</span>
<span class="x">        // no transition found for state</span>
<span class="x">        break;</span>
<span class="x">    }</span>
<span class="x">    $state = weighted_pick($rules[$state]);</span>
<span class="x">}</span>
</code></pre></div>
<p>Here are some of the produced examples:</p>

<ul>
<li><p>With that annoying stuff out of transition rules, then produce statistically ama</p></li>
<li><p>With that annoying stuff out of the way, we can do something really build a set</p></li>
<li><p>With that annoying stuff out of the way, we can feed something really amazing. W</p></li>
<li><p>With that annoying stuff out of the rules, then produce statistically build a se</p></li>
</ul>

<p>These 4-grams produce english text, even for a really small input size!</p>

<h2>Results</h2>

<p>We can now start playing with multiple sources, mixing them and generating weird text based off of them.</p>

<p>I&#39;ll go with the classic and use my own twitter feed<sup><a id="ft-2-src"></a><a href="#ft-2">2</a></sup>:</p>

<blockquote>
    sign a CLA just to get started, and I already quite powerful that programmer: @igorwesome will talk about abstractions for me. Even with php://memory. For testing, no template engine, so much. ❤
</blockquote>

<blockquote>
    stop this machine has gödel numbers and memory will be phpeople, because they dug it up, the current approach seems more likely has too much?"
</blockquote>

<blockquote>
    about Design, Composition is the same as static classes. More statement followed by sinatra dependency. Also, a brain-eating any emails from your #Silex with companies to pay money.
</blockquote>

<blockquote>
    see important part needs goto fail; goto fail; goto fail; goto fail; goto fail; goto fail; goto when you think of your choice to put in your Application/json'))
</blockquote>

<hr>

<ol>
<li><p><a id="ft-1"></a><a href="http://cm.bell-labs.com/cm/ms/what/shannonday/shannon1948.pdf">Claude Shannon, A Mathematical Theory of Communication</a> <a id="ft-1" href="#ft-1-src">↩</a></p></li>
<li><p><a id="ft-2"></a><a href="https://gist.github.com/igorw/ba5e4c9562d19b89ef56">Gist of tweet generating markov chain</a> <a id="ft-2" href="#ft-2-src">↩</a></p></li>
</ol>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Compilers</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/18/stack-machines-compilers.html"/>
        <id>https://igor.io/2014/12/18/stack-machines-compilers.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Compilers</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html"><strong>compilers</strong></a></p>

<blockquote style="background: yellow; padding: 10px 20px;">
    This is a guest post by the one and only <strong>Anthony Ferrara</strong> (<a href="https://twitter.com/ircmaxell">@ircmaxell</a>), who has a <a href="http://blog.ircmaxell.com/">blog of his own</a> and has written a <a href="https://github.com/google/recki-ct">compiler for PHP</a>!
</blockquote>

<p>Up until this point, we have been creating languages that require us to do all of the hard wiring ourselves. Our object code deals directly with memory addresses, which while easy to execute makes writing a challenge.</p>

<p>So let&#39;s generate our object code. Let&#39;s create a front-end language which will be easy to write in, but will <em>compile</em> to the back-end object code we&#39;ve been working with.</p>

<h2>Compilers</h2>

<p>An actual compiler consists of a few moving parts:</p>

<ul>
<li><p><strong>Parser</strong> - Converts code from one language into an intermediary representation. Often this intermediary is an Abstract Syntax Tree (AST).</p>

<p>It&#39;s important to note that the parsed code has the same overall meaning, it&#39;s just changing the representation of the code from a textual form to a more structured form.</p></li>
<li><p><strong>Compiler</strong> - Converts code from one representation to another.</p>

<p>The key thing here is that the semantics of the representations change. So the compiler actually converts one language into a different one, where the <em>behavior</em> of each language is different.</p>

<p>This is a slightly difficult concept to grasp, so let&#39;s take an example:</p>

<p>In PHP, <code>PHP_INT_MAX + 1</code> is a <code>float</code> type. In C, it&#39;s an <code>int</code> (it wraps around, overflows). </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var_dump(PHP_INT_MAX + 1); // float(9.2233720368548E+18)
</code></pre></div>
<p>But in C:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">PHP_INT_MAX + 1; // int(-9223372036854775808)
</code></pre></div>
<p>So a hypothetical PHP to C compiler would generate the code to handle this distinction to allow for the generated code to behave the same as the original source code.</p></li>
<li><p><strong>Code Generator</strong> - Outputs target code. This is basically converting from an internal representation to a final target representation.</p></li>
</ul>

<p>Note that these definitions are vague. In reality, a parser is just a special type of compiler (where the semantics don&#39;t change). And a code generator is a special type of compiler (the logical reverse of a parser, again where semantics don&#39;t change).</p>

<p>So the generic term &quot;Compiler&quot; is really a chain of at least 2 individual compilers (a parser and a code generator). If the semantics of the source and target language are the same, that&#39;s all you need. If they are different, then you need additional compilers in the middle.</p>

<p>A real compiler like gcc may have multiple steps, with multiple compilers. So a single compile of a program may involve many individual internal compilers and code generators.</p>

<h2>The Parser</h2>

<p>We&#39;re going to re-use PHP&#39;s internal parser, along with <a href="https://github.com/nikic/PHP-Parser">Nikic&#39;s PHP-Parser</a> project. This will let us parse a language that looks like PHP code (and is syntactically identical).</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function compile($code) {
    $parser = new PhpParser\Parser(new PhpParser\Lexer);
    $stmts = $parser-&gt;parse(&#39;&lt;?php &#39; . $code);
}
</code></pre></div>
<p>At this point, the <code>$stmts</code> variable is an array representation of an AST of our code.</p>

<h2>Compiler</h2>

<p>Let&#39;s compile the following code:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$a = 1;
</code></pre></div>
<p>It&#39;s a simple line, but there&#39;s a bit of setup we&#39;ll need to do.</p>

<p>First, we need some way of keeping track of available memory addresses. These will be used as addresses for the heap that was added to the interpreter last time.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$state = [
    &quot;nextAddress&quot; =&gt; 0,
];
</code></pre></div>
<p>And we also need some way of remembering which variable maps to which address. So we&#39;ll create an associative array to map variable names to addresses for the compiler:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$state = [
    &quot;nextAddress&quot; =&gt; 0,
    &quot;variables&quot; =&gt; [],
];
</code></pre></div>
<p>And we need something to store the finished object code, so we&#39;ll create an array of operations:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$state = [
    &quot;code&quot; =&gt; [],
    &quot;nextAddress&quot; =&gt; 0,
    &quot;variables&quot; =&gt; [],
];
</code></pre></div>
<p>Finally we need some way of compiling the nodes of the AST. So let&#39;s make a function to do that:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function compileNodes(array $nodes, array &amp;$state) {
    foreach ($nodes as $node) {
        compileNode($node, $state);
    }
}
</code></pre></div>
<p>Now, we have enough to actually finish our <code>compile()</code> function:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function compile($code) {
    $parser = new PhpParser\Parser(new PhpParser\Lexer);
    $stmts = $parser-&gt;parse(&#39;&lt;?php &#39; . $code);
    $state = [
        &quot;code&quot; =&gt; [],
        &quot;nextAddress&quot; =&gt; 0,
        &quot;variables&quot; =&gt; [],
    ];
    compileNodes($stmts, $state);
    return $state[&#39;code&#39;];
}
</code></pre></div>
<h2>The Actual Compilation</h2>

<p>Now we still need to implement <code>compileNode()</code>. The implementation is basically similar to our interpreter, in that it&#39;s just a giant switch. For each <code>Node</code> type, we&#39;ll need a separate compile rule:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function compileNode(PhpParser\Node $node, array &amp;$state) {
    switch ($node-&gt;getType()) {

    }
}
</code></pre></div>
<p>For our target code (<code>$a = 1</code>), the first node type we&#39;ll encounter is <code>Expr_Assign</code>. So we&#39;ll need to issue an assign operation, with the addresses of the value and the target result.</p>

<p>To find those addresses, we can just let the compiler do it for us by compiling those nodes before we emit our assign operation.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Expr_Assign&#39;:
    $var = compileNode($node-&gt;var, $state);
    $value = compileNode($node-&gt;value, $state);
    $state[&#39;code&#39;][] = [&quot;assign&quot;, $value, $var];
    return $value;
</code></pre></div>
<p>Note the final return. That&#39;s important, as all expressions have return values. That&#39;s what allows the <code>$var = compileNode(...)</code> to work.</p>

<p>Now, there&#39;s something interesting to note there. Because of the tree structure of the AST, we don&#39;t really care what&#39;s inside <code>$node-&gt;value</code>. We&#39;ll just let the compiler sort that out by compiling that node. This greatly simplifies our compiler, since we can just recurse to compile the children.</p>

<p>So if we try running the code now, we&#39;ll notice that it won&#39;t work. We don&#39;t have compiler rules for <code>$a</code> (<code>Expr_Variable</code>) or <code>1</code> (<code>Scalar_LNumber</code>). So we need to add those rules:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Expr_Variable&#39;:
    if (!isset($state[&#39;variables&#39;][$node-&gt;name])) {
        // It&#39;s a new variable, assign it the next free address
        $state[&#39;variables&#39;][$node-&gt;name] = $state[&#39;nextAddress&#39;]++;
    }
    return $state[&#39;variables&#39;][$node-&gt;name];
case &#39;Scalar_LNumber&#39;:
    // Since the compiler returns *addresses*, we need to issue a store command
    // and create a temporary variable.
    $result = $state[&#39;nextAddress&#39;]++;
    $state[&#39;code&#39;][] = [&quot;store&quot;, $node-&gt;value, $result];
    return $result;
</code></pre></div>
<p>Now we have enough to run our compiler!!!</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$code = &#39;$a = 1&#39;;</span>
<span class="x">$ops = compile($code);</span>
<span class="x">// $ops = [</span>
<span class="x">//     [&#39;store&#39;, 1, 1],</span>
<span class="x">//     [&#39;assign&#39;, 1, 0],</span>
<span class="x">// ];</span>
</code></pre></div>
<p>Looking at that, the variable <code>$a</code> will have an address of <code>0</code> (since the <code>$node-&gt;var</code> is compiled first), and the constant <code>1</code> will be stored in the temporary address of <code>1</code>. So we have working code!!!</p>

<p>But it really doesn&#39;t do anything interesting. So let&#39;s add in some actual logic: addition:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Expr_BinaryOp_Plus&#39;:
    // Compile the left side of the `+` operator
    $a = compileNode($node-&gt;left, $state);
    // Compile the right side of the operator
    $b = compileNode($node-&gt;right, $state);
    // Create a new result temporary variable
    $result = $state[&#39;nextAddress&#39;]++;
    // issue the addition command with the proper addresses.
    $state[&#39;code&#39;][] = [&#39;add&#39;, $a, $b, $result];
    return $result;
</code></pre></div>
<p>Now let&#39;s try running that code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$code = &#39;</span>
<span class="x">    $a = 1;</span>
<span class="x">    $b = 2;</span>
<span class="x">    $c = $a + $b;</span>
<span class="x">&#39;;</span>
<span class="x">$ops = compile($code);</span>
<span class="x">// $ops = [</span>
<span class="x">//     [&#39;store&#39;, 1, 0],</span>
<span class="x">//     [&#39;assign&#39;, 0, 1],</span>
<span class="x">//     [&#39;store&#39;, 2, 2],</span>
<span class="x">//     [&#39;assign, 2, 3&#39;],</span>
<span class="x">//     [&#39;add&#39;, 1, 3, 4],</span>
<span class="x">//     [&#39;assign&#39;, 4, 5],</span>
<span class="x">// ];</span>
</code></pre></div>
<p>After running this, our heap would look like:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[1, 1, 2, 2, 3, 3]
</code></pre></div>
<p>Note that we&#39;re duplicating values. That&#39;s because <code>$a = 1</code> results in 2 memory spaces being used, one for the <code>1</code>, and one for the variable <code>$a</code>.</p>

<p>If we wanted to get really fancy, we could write an optimizer which would remove that redundant assignment. We&#39;ll talk about that towards the end of the post, as it requires significantly more complicated logic to implement.</p>

<h2>I/O</h2>

<p>Let&#39;s add support for <code>echo</code>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Stmt_Echo&#39;:
    foreach ($node-&gt;exprs as $expression) {
        $output = compileNode($expression, $state);
        $state[&#39;code&#39;][] = [&#39;print_num&#39;, $output];
    }
    // echo is a statement, it has no return value.
    break;
</code></pre></div>
<p>Pretty simple, right!</p>

<p>Notice something though. The Echo command starts with <code>Stmt</code>. This is our first statement. Statements differ from expressions in that statements cannot be nested. They <em>must</em> be the outermost piece of code. This means that statements do not have return values. Which is why we have a <code>break</code> instead of a <code>return $address</code>.</p>

<p>Any time you see a node starting with <code>Stmt</code>, it&#39;s a statement and has no return value. Every time you see a node starting with <code>Expr</code>, it&#39;s an expression and therefore must have a return value.</p>

<h2>Jumps</h2>

<p>Now, here&#39;s where things get interesting. We&#39;re simultaneously adding great power, as well as great evil. Let&#39;s add support for <code>goto</code>:</p>

<p>There are two cases. Case A, where you jump to a label that hasn&#39;t been seen yet:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">goto a;
a:
</code></pre></div>
<p>And Case B, where you jump to a label that has been seen already.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">a:
goto a;
</code></pre></div>
<p>So our jump code will need to handle both cases.</p>

<p>First, we need to add a pair of state variables to our earlier compiler state:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$state = [
    &quot;code&quot; =&gt; [],
    &quot;goto&quot; =&gt; [],
    &quot;labels&quot; =&gt; [],
    &quot;nextAddress&quot; =&gt; 0,
    &quot;variables&quot; =&gt; [],
];
</code></pre></div>
<p>Now, we can compile our goto operation:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Stmt_Goto&#39;:
    $label = $node-&gt;name;
    if (isset($state[&#39;labels&#39;][$label])) {
        // we&#39;ve already seen this label (case B)
        // So simply look up the address of the label in the state
        $state[&#39;code&#39;][] = [&#39;jump&#39;, $state[&#39;labels&#39;][$label]];
    } else {
        // create the op code, but set the target address to a bad one
        $state[&#39;code&#39;][] = [&#39;jump&#39;, -1];
        // store the location of the goto for later correction.
        // When we find the label, we&#39;ll loop through these and &quot;correct&quot;
        $state[&#39;goto&#39;][$label][] = count($state[&#39;code&#39;]) - 1;
    }
</code></pre></div>
<p>And finally, the label:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Stmt_Label&#39;:
    $label = $node-&gt;name;
    // the location of the label;
    $idx = count($state[&#39;code&#39;]);
    $state[&#39;labels&#39;][$label] = $idx;
    if (!empty($state[&#39;goto&#39;][$label])) {
        // correct any already-issued goto statements
        foreach ($state[&#39;goto&#39;][$label] as $key) {
            $state[&#39;code&#39;][$key][1] = $idx;
        }
        unset($state[&#39;goto&#39;][$label]);
    }
    break;
</code></pre></div>
<p>Basically, we set the offset of the label, then go through and update any existing jumps for that label to point to the correct offset.</p>

<p>Now, let&#39;s try compiling some code:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$a = 1;
goto add;
$a = 2;
add:
$b = $a + 1;
</code></pre></div>
<p>That will result in:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ops = [
    [&#39;store&#39;, 1, 0],
    [&#39;assign&#39;, 0, 1],
    [&#39;jump&#39;, 5],
    [&#39;store&#39;, 2, 2],
    [&#39;assign&#39;, 2, 1],
    [&#39;store&#39;, 1, 3],
    [&#39;add&#39;, 1, 3, 4],
    [&#39;assign&#39;, 4, 5],
];
</code></pre></div>
<p>So far so good. We now can jump. That means we can loop as well!</p>

<h2>Conditional Jumps</h2>

<p>We want some way to do conditional code. So let&#39;s compile an <code>if</code> statement. We&#39;ll compile it to the <code>jumpz</code> operation in our interpreter (jump-if-zero):</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Stmt_If&#39;:
    $cond = compileNode($node-&gt;cond, $state);
    // save the jumpz, as we&#39;ll need to find it later
    $jumpidx = count($state[&#39;code&#39;]);
    // Set the location to jump to `-1` until we know it later
    $state[&#39;code&#39;][] = [&quot;jumpz&quot;, $cond, -1];
    compileNodes($node-&gt;stmts, $state);
    $state[&#39;code&#39;][$jumpidx][2] = count($state[&#39;code&#39;]);
    break;
</code></pre></div>
<p>Awesome!</p>

<p>That means that we are effectively compiling code into jumps:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$a = 1;
$b = 2;
$c = 3;
if ($a + $b + $c) {
    $a = 2;
}
echo $a;
</code></pre></div>
<p>Would become:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$a = 1;
$b = 2;
$c = 3;
$d = $a + $b;
$e = $d + $c;
if (!$e) {
    goto end;
}
$a = 2;
end:
echo $a;
</code></pre></div>
<p>That&#39;s fairly easy to follow, but what about if we wanted to support <code>else</code> statements?</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$a;
if ($b) {
    $c;
} else {
    $d;
}
$e;
</code></pre></div>
<p>Would need to transform into </p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$a
if (!$b) {
    goto else;
}
$c;
goto end;
else:
$d
end;
$e;
</code></pre></div>
<p>Notice the interleave. That there&#39;s a goto after the body of the if jumping to the end. That&#39;s important. So let&#39;s see how we&#39;d adjust our <code>if</code> compilation to generate that.:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">case &#39;Stmt_If&#39;:
    $cond = compileNode($node-&gt;cond, $state);
    // save the jumpz, as we&#39;ll need to find it later
    $jumpidx = count($state[&#39;code&#39;]);
    $state[&#39;code&#39;][] = [&quot;jumpz&quot;, $cond, -1];

    // Compile the if body
    compileNodes($node-&gt;stmts, $state);
    $endJumpidx = count($state[&#39;code&#39;]);
    // default to the next instruction, if there&#39;s an else we&#39;ll update it
    $state[&#39;code&#39;][] = [&quot;jump&quot;, $endJumpidx + 1];

    // set the jumpz node properly so we jump into the else block if we have it.
    $state[&#39;code&#39;][$jumpidx][2] = count($state[&#39;code&#39;]);
    if ($node-&gt;else) {
        // we have else, so compile it!
        compileNodes($node-&gt;else-&gt;stmts, $state);

        // Finally, update the jump at the end of the if block to point to the end
        $state[&#39;code&#39;][$endJumpidx][1] = count($state[&#39;code&#39;]);
    }
    break;
</code></pre></div>
<p>And that&#39;s all there is to it!</p>

<p>That part is fairly involved, but it gets the job done. Try drawing out what&#39;s happening to better understand it.</p>

<h2>Going Further</h2>

<p>This is a simple, unoptimized compiler. We&#39;re not dealing with types at all (we assume everything is a number). We&#39;re not changing behavior, we&#39;re just converting from one source code to another, each with the same semantics.</p>

<p>If we wanted to change the semantics (the way types are handled, etc), then we&#39;d need another intermediary representation to allow us to do the conversions safely. This is how <a href="https://github.com/google/recki-ct/blob/master/doc/2_basic_operation.md">Recki-CT works</a>.</p>

<p>But for simple compilers, that&#39;s not necessary.</p>

<h2>Conclusion</h2>

<p>We&#39;ve just built a simple compiler from a pseudo-PHP language to our stack machine in about 100 lines of code. It deals with things like variable assignment for us, making our life easier. This lets us write in a high level language, yet still execute a very simple backend language.</p>

<p>Plus, with a simpler front-end language, we can build far more complicated programs using our simple implementation.</p>

<p>And this is the power of these simple machines. With the right operators and glue code, very simple and easy to understand machines are capable of incredibly complicated tasks.</p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    A compiler allows you to write in a different high level language than you run on your interpreter.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html"><strong>compilers</strong></a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Heap</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/12/stack-machines-heap.html"/>
        <id>https://igor.io/2014/12/12/stack-machines-heap.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Heap</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html"><strong>heap</strong></a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>So far the machines presented have all been stack based. We will now consider an alternate memory model that will completely replace the stack. The <strong>heap</strong> is a sequential block of memory.</p>

<p>This will also have implications for execution, as memory must be addressed by the instructions that load from and write to it.</p>

<h2>Heap Machines</h2>

<p>While we could augment a stack machine with a heap, it will be clearer to drop the existing assumptions and understand that the execution model can be changed in a way that is completely different.</p>

<p>So let us begin from scratch and build a heap machine.</p>

<p><center>
    <img src="/img/stack-machine-heap/reaction-face.gif">
</center></p>

<h2>The heap</h2>

<p>A stack is limited in the sense that you cannot peek below the surface. It also requires pushing things in reverse order of consumption.</p>

<p>The heap, on the other hand, is more like a large array of values. You can index into arbitrary locations of the array, called <strong>addresses</strong>. The fact that elements can be accessed randomly is why memory is also known as <strong>RAM</strong>, which stands for <em>random access memory</em>.</p>

<p>The heap is where you store things. Numbers. And then later on you can go and fetch them or change them.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$heap = [];</span>
</code></pre></div>
<h2>Execution</h2>

<p>Execution is still a matter of looping over instructions and making decisions in a <code>switch</code> statement. However, the format of the instructions will change significantly.</p>

<p>Instead of implicitly addressing memory via the stack, it will now have to be done explicitly. And this means every instruction will need to be parameterised with the addresses of inputs and outputs.</p>

<p>For elementary operations, this will usually be up to three addresses. For a binary operation, that would be two input addresses, and one output address. For this reason, such an encoding is often called a <em>three-address code</em>.</p>

<p>Here is an example program that stores two values in memory and then adds them.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">store 1 0</span>
<span class="x">store 8 1</span>
<span class="x">add 0 1 2</span>
</code></pre></div>
<p>As you can see, the format has changed a little. There is one instruction per line, and arguments are separated by spaces.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ops = array_map(</span>
<span class="x">    function ($line) { return explode(&#39; &#39;, $line); },</span>
<span class="x">    explode(&quot;\n&quot;, $code)</span>
<span class="x">);</span>
</code></pre></div>
<p>When fetching the instruction, the operation needs to be separated from its arguments. That provides the general framework in which instructions can be added to the machine.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ip = 0;</span>
<span class="x">$heap = [];</span>

<span class="x">while ($ip &lt; count($ops)) {</span>
<span class="x">    $op_args = $ops[$ip++];</span>
<span class="x">    $op = array_shift($op_args);</span>
<span class="x">    $args = $op_args;</span>

<span class="x">    switch ($op) {</span>
<span class="x">        // ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<h2>Storage</h2>

<p>First we will implement the <strong>store</strong> instruction.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">store $value $address
</code></pre></div>
<p>It takes a value and stores it at a particular address in the heap. The address is just the index or offset.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    case &#39;store&#39;:</span>
<span class="x">        list($value, $addr) = $args;</span>
<span class="x">        $heap[$addr] = $value;</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<p>These two instructions:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">store 1 0</span>
<span class="x">store 8 1</span>
</code></pre></div>
<p>Will store the number <code>1</code> at address <code>0</code> and the number <code>8</code> at address <code>1</code>. The heap looks like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[1, 8]
</code></pre></div>
<h2>Arithmetic</h2>

<p>Addition is a binary operation, so it requires three addresses. Two for input, one for output.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">add $a $b $c
</code></pre></div>
<p>The implementation reads the two values, adds them, stores the result back:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;add&#39;:</span>
<span class="x">        list($a, $b, $c) = $args;</span>
<span class="x">        $heap[$c] = $heap[$a] + $heap[$b];</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<p>This instruction:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">add 0 1 2</span>
</code></pre></div>
<p>Will store the sum of addresses <code>0</code> and <code>1</code> in address <code>2</code>. The heap looks like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[1, 8, 9]
</code></pre></div>
<h2>I/O</h2>

<p>We will now recover some of the operations that are useful for general computation. To get I/O back, we can have two instructions: <code>print_num</code> and <code>print_char</code>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;print_num&#39;:</span>
<span class="x">        list($addr) = $args;</span>
<span class="x">        echo $heap[$addr];</span>
<span class="x">        break;</span>
<span class="x">    case &#39;print_char&#39;:</span>
<span class="x">        list($addr) = $args;</span>
<span class="x">        echo chr($heap[$addr]);</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<p>This will allow actually outputting the values stored on the heap.</p>

<h2>Jumps</h2>

<p>Finally, we will recover conditional jumps. This is where one curiousity may become apparent. So far, addresses have referred to locations of instructions. Now they are referring to locations of both instructions <em>and</em> values.</p>

<p>But instructions are stored in <code>$ops</code> whereas values are stored in <code>$heap</code>. So they are referencing two completely different segments of memory.</p>

<p>Unconditional jumps take one argument, the absolute address of the instruction to jump to:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;jump&#39;:</span>
<span class="x">        list($op_addr) = $args;</span>
<span class="x">        $ip = $op_addr;</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<p>Conditional jumps take two arguments, the condition address and the target address:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;jumpz&#39;:</span>
<span class="x">        list($cond_addr, $op_addr) = $args;</span>
<span class="x">        if ($heap[$cond_addr] === 0) {</span>
<span class="x">            $ip = $op_addr;</span>
<span class="x">        }</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<p>And just like that, conditional branching is back.</p>

<p><center>
    <img src="/img/stack-machine-heap/pinkie-pie.gif">
</center></p>

<h2>Conclusion</h2>

<p>So what are the advantages of storing information on the heap, rather than the stack?</p>

<p>Elements can be indexed arbitrarily. Although variables allowed this for stack machines too. At least within a stack frame.</p>

<p>The heap becomes a lot more powerful when you want data to be available across execution contexts. This could either be for the purpose of global state or closing over state after returning from a procedure call.</p>

<p>The heap as implemented right now allocates implicitly. The system will actually use <code>malloc</code> to dynamically allocate a block of memory, and then <code>free</code> to release that memory when it is no longer needed.</p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    A heap machine allows storing information at arbitrary locations in memory and referencing them by address later on.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html"><strong>heap</strong></a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Stack Frames</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/05/stack-machines-stack-frames.html"/>
        <id>https://igor.io/2014/12/05/stack-machines-stack-frames.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Stack Frames</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html"><strong>stack-frames</strong></a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>The last two posts introduced two separate concepts: <strong>calls</strong> and <strong>variables</strong>. The variables so far are global. We will now see that by applying lessons learned from procedure calls, variables can be made local!</p>

<h2>Local variables</h2>

<p>What does it mean to have locally scoped variables, and why is that desirable?</p>

<p>Locally scoped variables are unaffected by procedure calls. This makes understanding a procedure easier, because there is sufficient isolation between it and the rest of the system.</p>

<p>It comes down to reasoning about effects.</p>

<h2>Call stack</h2>

<p>The call stack has been defined as a place where return addresses are stored. Every time a procedure is called, the <strong>instruction pointer</strong> <code>$ip</code> is backed up into the call stack. On <code>ret</code>, that instruction pointer is restored.</p>

<p>You might already be familiar with the call stack from a few places. For example, if you have an unbounded recursive call, you will produce a <strong>stack overflow</strong> in most languages. This just means you have exceeded the maximum size of the call stack.</p>

<p>Another common place where the call stack is visible is when dealing with Exceptions, as it is very common for them to include a <strong>stack trace</strong>. A stack trace is just a visualization of the call stack. And since the call stack has return addresses, it is a log of how you got to your current location.</p>

<p><center>
    <img src="/img/stack-machine-stack-frames/trace.png">
</center></p>

<h2>Frames</h2>

<p>So far we have defined the execution context to just be <code>$ip</code>. But we can extend that definition.</p>

<p>In addition to <code>$ip</code>, it is possible to backup other parts of the execution context onto the call stack when performing a call, that can be restored later on. For example, the <strong>variables</strong>!</p>

<p>To group those values on the call stack, we put them into a box. That box is called a <strong>stack frame</strong>, and it looks like this:</p>

<p><center>
    <img src="/img/stack-machine-stack-frames/frame.png">
</center></p>

<h2>Implementation</h2>

<p>Implementation is simply a matter of adding <code>$vars</code> next to the instruction pointer on the call stack.</p>

<p>Backing up values when performing a call:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">if (preg_match(&#39;/^call\((.+)\)$/&#39;, $op, $match)) {</span>
<span class="x">    $label = $match[1];</span>
<span class="x">    $calls-&gt;push([$ip, $vars]);</span>
<span class="x">    $ip = $labels[$label];</span>
<span class="x">    continue;</span>
<span class="x">}</span>
</code></pre></div>
<p>To prevent the called procedure from having access to the vars of its caller, it might be a good idea to reset them to an empty hash map as part of the call instruction:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$vars = [];</span>
</code></pre></div>
<p>Restoring values when returning from a call:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;ret&#39;:</span>
<span class="x">        list($ip, $vars) = $calls-&gt;pop();</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<h2>Example</h2>

<p>And here is an example program that verifies the locality of variables:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">jmp(start)

label(foo)
    1 !var(i)
    ret

label(start)
    0 !var(i)
    call(foo)
    var(i) .num
</code></pre></div>
<p>It prints <code>0</code>, showing that the local store in <code>foo</code> had no effect on the main execution scope.</p>

<p><center>
    <img src="/img/stack-machine-stack-frames/money.gif" width="500">
</center></p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    The call stack holds a trace of stack frames, which contain instruction pointers representing execution contexts, and all the state necessary to restore those contexts.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html"><strong>stack-frames</strong></a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Variables</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/04/stack-machines-variables.html"/>
        <id>https://igor.io/2014/12/04/stack-machines-variables.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Variables</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html"><strong>variables</strong></a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>The virtual machine that has been implemented so far is limited in storage, because the only data structure is a stack. While the stack can grow infinitely large, it is only possible to access the top element. There is no way to index into it.</p>

<p>We will introduce a notion of variables that are stored separately from the data stack.</p>

<h2>What is a variable?</h2>

<p>A variable is a name for some location in memory. This sounds super similar to labels, and as a matter of fact, variables are often compiled to labels.</p>

<p>We will however look at variables as a higher level concept. A variable is a named container. It contains a value, and this value can change over time.</p>

<p>The value of a variable can be read and written. There are <strong>load</strong> and <strong>store</strong> commands.</p>

<h2>Load &amp; Store</h2>

<p>In this first iteration, variables will be global and shared. There will be no explicit allocation of space. Variables will be dynamically allocated, once a <strong>store</strong> instruction is executed.</p>

<p>To store a value, we will introduce a <code>!var(varname)</code> instruction. It takes the name of the variable to store to. It pops a value from the stack and stores it.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">42 !var(answer)
</code></pre></div>
<p>To read a value, we will introduce a <code>var(varname)</code> instruction. It pushes the value of the variable into the stack.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">var(answer)
</code></pre></div>
<h2>Alphabet</h2>

<p>To illustrate how variables can be used to make programs easier to understand, here is a program that prints all letters of the alphabet:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># i = 97
# ascii(97) is a
97 !var(i)

label(loop)
    # print i
    # i++
    # jump if i == 123
    # ascii(122) is z
    var(i) .
    var(i) 1 + !var(i)
    var(i) 123 -
    jnz(loop)

# print \n
10 .
</code></pre></div>
<h2>Implementation</h2>

<p>Variables are named values. They will be stored separately from the data stack. So we will just create a separate hash map that stores all vars.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$vars = [];</span>
</code></pre></div>
<p>The <strong>store</strong> instruction pops a value from the stack and stores it in the hash map.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">if (preg_match(&#39;/^!var\((.+)\)$/&#39;, $op, $match)) {</span>
<span class="x">    $var = $match[1];</span>
<span class="x">    $vars[$var] = $stack-&gt;pop();</span>
<span class="x">    continue;</span>
<span class="x">}</span>
</code></pre></div>
<p>The <strong>load</strong> instruction looks up the value from the hash map and push it onto the data stack.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">if (preg_match(&#39;/^var\((.+)\)$/&#39;, $op, $match)) {</span>
<span class="x">    $var = $match[1];</span>
<span class="x">    $stack-&gt;push($vars[$var]);</span>
<span class="x">    continue;</span>
<span class="x">}</span>
</code></pre></div>
<p>That is all we need for now.</p>

<h2>Print numbers literally</h2>

<p>For the next example program, we will need a way to print a number (as opposed to the ascii value of a number). The instruction to do that will be called <code>.num</code>.</p>

<p>It just pops a number from the stack and outputs it:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;.num&#39;:</span>
<span class="x">        echo $stack-&gt;pop();</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<h2>Example</h2>

<p>We will now look at a slightly more complicated program, namely a fibonacci sequence generator. This will be an iterative implementation.</p>

<p>It uses four variables that change over time.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text"># define vars
0 !var(i)
0 !var(p)
1 !var(n)
0 !var(tmp)

# output i prev
var(i) .num 32 .
var(p) .num 10 .

# output i n
var(i) .num 32 .
var(n) .num 10 .

label(next)

# tmp = n + p
# p = n
# n = tmp
var(p) var(n) + !var(tmp)
var(n) !var(p)
var(tmp) !var(n)

# output i n
var(i) .num 32 .
var(n) .num 10 .

# i++
var(i) 1 + !var(i)

jmp(next)
</code></pre></div>
<p>This program is more or less equivalent to a dog race, in the same sense that it will determine the 1475&#39;s fibonacci number to be <strong>INF</strong> [∞].</p>

<p><center>
    <p><img src="/img/stack-machine-variables/dogs.gif"></p>
    <p><em>PS: It never ends!!!</em></p>
</center></p>

<h2>Globals</h2>

<p>These variables are global. The side-effects of global variables are sometimes also referred to as &quot;spooky action at a distance&quot;.</p>

<p>However, if the machine in question does not support calls, then everything is global. Or rather, everything will be local. Thus no side-effects will occur.</p>

<p><center>
    <p><img src="/img/stack-machine-variables/scary.gif"></p>
    <p><em>Credits to <a href="https://twitter.com/AndreaFaulds">@AndreaFaulds</a> for the spooky.gif</em></p>
</center></p>

<p><strong>Side-note:</strong> <em>We are approaching turing completeness.</em></p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    Adding variables to an RPN calculator enables indexed storage and retrieval of values.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html"><strong>variables</strong></a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Calls</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/03/stack-machines-calls.html"/>
        <id>https://igor.io/2014/12/03/stack-machines-calls.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Calls</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html"><strong>calls</strong></a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<blockquote>
<p>Hey I just met you<br />
And this is crazy<br />
But here&#39;s my number<br />
So call me maybe<br /></p>

<p><em>&mdash; Carly Rae Jepsen</em></p>
</blockquote>

<p>We have been talking about stack machines (this is a series of posts, go back and read the other posts if you feel lost right now) without ever talking about <strong>calls</strong>. This is rather odd, as most of the time when discussing stacks in programming, we <em>only</em> talk about the call stack.</p>

<h2>Modularity</h2>

<p>A call, sometimes refered to as <em>procedure call</em>, <em>subroutine call</em> or <em>function application</em>, is a means of transfering control to an other sub-program. This implies that we have sub-programs to begin with.</p>

<p>By breaking programs into procedures the <em>execution context</em> or <em>scope</em> can be reduced, which makes reasoning about a particular piece of code easier. In other words, you get <em>modularity</em>.</p>

<p>Once a procedure has completed its task, it is able to <strong>return</strong> control back to the caller.</p>

<h2>Procedures</h2>

<p>What is a procedure, really? A procedure is just a piece of code that follows a certain &quot;interface&quot; or pattern, allowing it to be called by other code.</p>

<p><center>
    <img src="/img/stack-machine-calls/sweetheart.gif">
</center></p>

<h2>Calling conventions</h2>

<p>The anatomy of a procedure call will vary by language, operating system and CPU architecture. There will usually be standard conventions for the instructions involved in performing them, known as <strong>calling conventions</strong>.</p>

<p>This generally means having some sort of &quot;call stack&quot; that stores the execution context of the caller, so that control can be returned back later on. The most important part of program state representing the execution context is the <strong>instruction pointer</strong>.</p>

<p>In most actual architectures, the data stack and the call stack are combined. In this machine, we will afford ourselves the luxury of separating them. The calling convention will have two parts: <strong>argument passing</strong> and <strong>state storage</strong>.</p>

<h2>Argument passing</h2>

<p>Arguments are passed via the stack. The caller pushes the arguments for the procedure onto the stack, the procedure pops them off.</p>

<p>In this forth-like stack machine, the data stack holds arguments implicitly. In other words, procedures can consume as many values as they need from the stack, and they can also produce as many &quot;output&quot; values as they want. This means that unlike traditional calling conventions, a procedure can <strong>return</strong> many values.</p>

<h2>State storage</h2>

<p>The only state we will store for now will be the <strong>instruction pointer</strong> <code>$ip</code>. It will be stored in the <strong>call stack</strong> which will be a separate stack next to the <strong>data stack</strong>. There are two instructions involved with procedure calls.</p>

<p>The first is <code>call(procedure)</code>, which takes a procedure name to call. This call will simply push the instruction pointer onto the call stack, then jump to the memory address referenced by the label that is the procedure name. That&#39;s right, a procedure is just a piece of code identified by a label.</p>

<p>The second instruction is <code>ret</code>, which will allow returning from a procedure call. Ideally every procedure will have a <code>ret</code> at the end. What this instruction does is just pop the previous instruction pointer from the call stack and jump back to it.</p>

<p><center>
    <p><img src="/img/stack-machine-calls/donut.gif"></p>
    <p><em>That&#39;s it!</em></p>
</center></p>

<h2>Example</h2>

<p>What this means in practice is that you can take some code containing jumps, replace the <code>jmp</code> with a <code>call</code> and put a <code>ret</code> at the end of the labeled code, and get modular code that can be separated and shipped as a library!</p>

<p>Let&#39;s take the output loop example from the <a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> post:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0 10 100 108 114 111 119 32 44 111 108 108 101 104
label(loop)
    dup jz(end)
    .
    jmp(loop)
label(end)
</code></pre></div>
<p>The loop can be extracted out into a <code>printstr</code> procedure, but we must also jump over the library code to the actual application code, which will then set up the data and call <code>printstr</code>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">jmp(start)

label(printstr)
    label(loop)
        dup jz(end)
        .
        jmp(loop)
    label(end)
    ret

label(start)
    0 10 100 108 114 111 119 32 44 111 108 108 101 104
    call(printstr)
</code></pre></div>
<p>Of course, procedures can call other procedures. Or they can call themselves recursively.</p>

<p><center>
    <img src="/img/stack-machine-calls/space.gif">
</center></p>

<h2>Implementation</h2>

<p>First we need a call stack to store the return addresses.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$calls = new SplStack();</span>
</code></pre></div>
<p>Next, we need a <code>call</code> instruction that stores <code>$ip</code> on the call stack and jumps to the address of the procedure.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">if (preg_match(&#39;/^call\((.+)\)$/&#39;, $op, $match)) {</span>
<span class="x">    $label = $match[1];</span>
<span class="x">    $calls-&gt;push($ip);</span>
<span class="x">    $ip = $labels[$label];</span>
<span class="x">    continue;</span>
<span class="x">}</span>
</code></pre></div>
<p>And finally, we need a <code>ret</code> instruction that pops the return address from the call stack and jumps back to it.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;ret&#39;:</span>
<span class="x">        $ip = $calls-&gt;pop();</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<h2>Summary</h2>

<p><span style="background-color: yellow;">
    Adding calls to an RPN calculator allows code to be made modular, reusable and independent from the caller.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html"><strong>calls</strong></a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Comments</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/02/stack-machines-comments.html"/>
        <id>https://igor.io/2014/12/02/stack-machines-comments.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Comments</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html"><strong>comments</strong></a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>Most extensions to la deus stack machina so far have been to the execution engine. But there are also some improvements that can be made to the parser.</p>

<h2>&quot;Parser&quot;</h2>

<p>By parser, I of course mean this line of code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ops = explode(&#39; &#39;, &#39;1 2 +&#39;);</span>
</code></pre></div>
<p>The problem with this &quot;parser&quot; is that it requires exactly one space between tokens.</p>

<ul>
<li>It does not support newlines</li>
<li>It does not support arbitrary whitespace</li>
<li>It does not support comments</li>
</ul>

<p>These are <em>serious</em> violations, and they will not be tolerated! We <em>must</em> fix this immediately! <strong>To the code mobile</strong>!</p>

<p>And yes, technically this is a lexer... but who cares?</p>

<h2>Whitespace</h2>

<p>Everybody knows that indentation is the most important aspect of computer programming. So how about some regex magic to split those little instructions into operations.</p>

<p>The first iteration might look something like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ops = preg_split(&#39;/\s/&#39;, $code);</span>
</code></pre></div>
<p>This is quite nice, but it will produce awful empty string <code>&#39;&#39;</code> operations. We <strong>do not want</strong> them. Lucky for us, <code>preg_split</code> supports a flag called <code>PREG_SPLIT_NO_EMPTY</code> that will filter out empty chunks. How convenient! Thanks, <code>preg_split</code>!</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ops = preg_split(&#39;/\s/&#39;, $code, -1, PREG_SPLIT_NO_EMPTY);</span>
</code></pre></div>
<p>Much better! We can now properly indent the code.</p>

<h2>Comments</h2>

<p>The first thing you want to see when reading someone else&#39;s code is their running commentary of what is about to happen. That is why you are reading this post, after all.</p>

<p>In order to annotate your code with redundant type information, translations of abbreviated names, implicit state information and general reasons <em>why</em> the code is doing a certain thing, because encoding that into the program itself has proven difficult at times, we will want to add support for comments to the parser.</p>

<p>By which we mean, the parser should <strong>eliminate all comments</strong>, because the machine does not want to hear them.</p>

<p>Instead of arguing about whether comments should use <code>;</code>, <code>--</code>, <code>//</code>, <code>/* */</code> or <code>*&gt;</code>, we&#39;re just going to go with <code>#</code>.</p>

<p>Now, to get rid of those, we can throw some more regex at the problem. This should do the job:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ops = preg_split(&#39;/\s/&#39;, preg_replace(&#39;/^\s*#.*$/m&#39;, &#39;&#39;, $code), -1, PREG_SPLIT_NO_EMPTY);</span>
</code></pre></div>
<p><em>So good.</em></p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    When in doubt, throw more regular expressions at the problem.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html"><strong>comments</strong></a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Conditionals</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/12/01/stack-machines-conditionals.html"/>
        <id>https://igor.io/2014/12/01/stack-machines-conditionals.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Conditionals</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html"><strong>conditionals</strong></a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>In previous posts, we have seen that stack machines can be extended with I/O and unconditional jumps to create infinite loops. However, it is not possible to break out of those loops. What a vicious cycle indeed.</p>

<p>We will now take a look at conditional branching as a way of solving this issue, and creating many new ones.</p>

<h2>To jump or not to jump</h2>

<p>One of the most important tools of the modern software maker is the conditional jump. It is the building block out of which conditional expressions, if statements and loops are formed.</p>

<p>The conditional jump is the decision maker, the control structure responsible for change.</p>

<p>A conditional jump will only perform a jump if a certain condition is met. The first such conditional jump instruction is <strong>jump if zero</strong>, also known as <code>jz</code>. It will pop a value from the stack, and if that value is zero, jump. Otherwise, it will fall through.</p>

<p><center>
    <p><img src="/img/stack-machine-conditionals/jz.gif"></p>
    <p><em><code>jz</code>, Jay-Z... Get it? I&#39;ll show myself out.</em></p>
</center></p>

<p>Here we have a typical <strong>do while</strong> loop, implemented using <code>jz</code>:</p>

<p><center>
    <img src="/img/stack-machine-conditionals/jz-arrows.png">
</center></p>

<p>Other conditional branching operations include: <strong>jump if not zero</strong>, <strong>jump if equal</strong>, <strong>jump if not equal</strong>, and many more.</p>

<h2>Duplication</h2>

<p>There are different ways in which conditional jumps can be implemented. Since the approach in this post will consume the top of the stack, it will be useful to have a way to duplicate the topmost element of the stack. That allows values to be preserved across conditional jumps.</p>

<p>For this, we can introduce a <code>dup</code> instruction. Its usage would look something like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">1 dup +
</code></pre></div>
<p>This will push <code>1</code> onto the stack, duplicate the <code>1</code> (pushing a copy of it), then pop the two <code>1</code>s and push their sum. Which is <code>2</code>. In case you didn&#39;t know.</p>

<p>The implementation of <code>dup</code> is straightforward:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">switch ($op) {</span>
<span class="x">    // ...</span>
<span class="x">    case &#39;dup&#39;:</span>
<span class="x">        $stack-&gt;push($stack-&gt;top());</span>
<span class="x">        break;</span>
<span class="x">}</span>
</code></pre></div>
<p>It turns out that <code>dup</code> is a magic copy machine.</p>

<p><center>
    <img src="/img/stack-machine-conditionals/dup.png">
</center></p>

<h2>Implementation</h2>

<p>Based on the implementation of <code>jmp</code>:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (preg_match(&#39;/^jmp\((.+)\)$/&#39;, $op, $match)) {
    $label = $match[1];
    $ip = $labels[$label];
    continue;
}
</code></pre></div>
<p>It is quite easy to make this jump conditional based on a popped value:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (preg_match(&#39;/^jz\((.+)\)$/&#39;, $op, $match)) {
    $label = $match[1];
    if ($stack-&gt;pop() === 0) {
        $ip = $labels[$label];
    }
    continue;
}
</code></pre></div>
<p>It is literally the same as <code>jmp</code>, with an added <code>if</code> statement!</p>

<p>Here is another gif, for your viewing pleasure:</p>

<p><center>
    <img src="/img/stack-machine-conditionals/pinkie-pie-jump-again.gif">
</center></p>

<h2>Output loop</h2>

<p>Let us revisit the &quot;hello world&quot; example from the <a href="/2014/11/29/stack-machines-io.html">I/O</a> post.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">104 . 101 . 108 . 108 . 111 . 44 . 32 . 119 . 111 . 114 . 108 . 100 . 10 .
</code></pre></div>
<p>It pushes the ASCII codes for the string in order and prints them. Would it not be great to extract the outputting logic into a loop?</p>

<p>It can be done. First of all, all characters will be stored on the stack. Because it is a stack, elements are consumed in reverse order of being pushed. This means we need to <strong>reverse the order</strong> here. There also needs to be a <strong>zero at the bottom of the stack</strong> (pushed first) that will mark the end of the string.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">0 10 100 108 114 111 119 32 44 111 108 108 101 104
label(loop)
    dup jz(end)
    .
    jmp(loop)
label(end)
</code></pre></div>
<p>This loop will output the characters on the stack until it hits a <code>0</code>, at which point the <code>jz</code> will jump out of the loop to the <code>end</code> label.</p>

<p>It is equivalent to a <strong>while</strong> loop, and as a matter of fact, compilers will compile <strong>while</strong> statements to assembly of roughly the same shape as the above.</p>

<h2>Implications</h2>

<p>The implications of this change are <strong>huge</strong>. This machine is <strong>much</strong> more powerful than all of the previous ones. The reason is that now the execution of the program can change over time. You can now actually break out of loops, allowing them to terminate once some condition is met.</p>

<p>The conditional jump can be used to implement all of the control structures that you know and love: <strong>if</strong>, <strong>while</strong>, <strong>for</strong>, <em>etc</em>. </p>

<p>The conditional jump goes to infinity, but only sometimes. This makes programs unpredictable. But <em>awesomely powerful</em>.</p>

<p><center>
    <img src="/img/stack-machine-conditionals/inf.png">
</center></p>

<p><center style="padding: 20px 0;">
    <em>Turing completeness has almost been achieved.</em>
</center></p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    Adding conditional jumps to an RPN calculator allows it to perform conditional logic and break out of loops.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html"><strong>conditionals</strong></a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Jumps</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/11/30/stack-machines-jumps.html"/>
        <id>https://igor.io/2014/11/30/stack-machines-jumps.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Jumps</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html"><strong>jumps</strong></a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p><code>label(start)</code></p>

<div style="margin: 15px 30px;">
    <p>Hi.</p>

    <p>We have seen that stack machines can be extended with I/O, enabling them to talk back at us pesky humans.</p>

    <p>We shall now make a huge leap by introducing a new feature: <strong>Jumps</strong>!</p>

    <code>jmp(main)</code>
</div>

<p><code>label(gif)</code></p>

<div style="margin: 15px 30px;">
    <center>
        <img src="/img/stack-machine-jumps/pinky-pie-jump.gif">
    </center>
</div>

<p><code>label(main)</code></p>

<h2>My CPU uses GOTO?</h2>

<p>The fundamental control flow mechanism in most virtual machines and in actual CPUs is a jump. Jumps are a matter of jumping to a particular memory address and continuing execution from there.</p>

<p>High-level constructs like <strong>if</strong> and <strong>while</strong> statements are compiled down to jumps.</p>

<p>So far, the stack machine has no control flow. Its execution is linear. The instructions are read sequentially from the instruction stream and executed in order. Once the end of the instruction stream is reached, the program terminates.</p>

<p>In the code, this is signified by this line:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">foreach ($ops as $op) {</span>
</code></pre></div>
<p>The <strong>foreach</strong> loop limits the execution to be <em>linear</em>.</p>

<h2>Memory model</h2>

<p>Modern computers are implemented in terms of the Von-Neumann-Architecture. In simple terms, that architecture means that programs are stored in memory. This is quite significant, as it means the instructions for what a computer should do and the data used by the program are stored in the same place!</p>

<p>It means you only have to build one general purpose physical machine, and have any program run on it, simply by writing it into memory. This is the reason why software is soft.</p>

<p>You can think of memory as a huge array of numbers. Some of the numbers represent program instructions and are often known as <em>opcodes</em>. Some of the numbers represent data used by the program.</p>

<p>In order to not mix the program space and the data space (although self-modifying code can be fun to play with), the memory is chunked up into segments.</p>

<p>Quite often, the segments will be: <em>code, heap, stack</em>.</p>

<p><center>
    <img src="/img/stack-machine-jumps/memory-model.png">
</center></p>

<p>The current stack machine already models these segments!</p>

<p>We have a <strong>code segment</strong>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ops = explode(&#39; &#39;, &#39;1 2 +&#39;);</span>
</code></pre></div>
<p>There is <strong>no heap</strong>, at least not yet. If we had dynamically allocated numbers, the heap would hold them.</p>

<p>But there is a <strong>stack segment</strong>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$stack = new SplStack();</span>
</code></pre></div>
<h2>Instruction pointer</h2>

<p>When a program is executed, there is always a <em>current instruction</em> that is being executed. The CPU can remember this instruction by storing its address in a register called the <strong>instruction pointer</strong>.</p>

<p>You can think of a <strong>register</strong> as a variable inside of the CPU. A memory <strong>address</strong> is just an offset into the large array that is memory.</p>

<p>The instruction pointer points into the <strong>code segment</strong>. For this reason it is sometimes also called the <strong>code pointer</strong>.</p>

<p><center>
    <img src="/img/stack-machine-jumps/instruction-pointer.png">
</center></p>

<p>We can get the instruction pointer <code>$ip</code> by reading the index in the <strong>foreach</strong> loop:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">foreach ($ops as $ip =&gt; $op) {</span>
</code></pre></div>
<p>This <strong>foreach</strong> loop can also be written as a <strong>for</strong> loop:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">for ($ip = 0; $ip &lt; count($ops); $ip++) {</span>
<span class="x">    $op = $ops[$ip];</span>
</code></pre></div>
<p>Or even as a <strong>while</strong> loop:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ip = 0;</span>
<span class="x">while ($ip &lt; count($ops)) {</span>
<span class="x">    $op = $ops[$ip++];</span>
</code></pre></div>
<p>There is a fundamental difference between the <strong>foreach</strong> and the <strong>while</strong> that we will discover shortly.</p>

<blockquote>
<p><strong>SPOILER ALERT</strong> (don&#39;t tell your parents): This allows the instruction pointer to be changed.</p>
</blockquote>

<h2>Labels</h2>

<p>Jumps will involve referencing addresses in the code segment. In other words, referencing the particular instruction that you want to jump to.</p>

<p>It would be possible to reference that instruction by its address directly. This would mean hard-coding the offset into the program. That is rather inflexible though, because every time code is shifted around, the offset needs to be adjusted manually.</p>

<p>A better way of getting an address is by introducing <strong>labels</strong>. A label just names a location in memory. That&#39;s it.</p>

<p>So instead of referring to a memory location by address, there is a lookup table from name to address, allowing memory to be referred to by name.</p>

<p>The syntax I will use for labels will look like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">label(foo)
    some code
    some more code
label(bar)
    even more code
</code></pre></div>
<h2>Jumps</h2>

<p>To perform a jump, there needs to be a <code>jmp</code> instruction in the VM. That instruction takes a label name, looks up the corresponding address, then sets the instruction pointer <code>$ip</code> to that address.</p>

<p>This allows jumping backward:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">label(forever)
    jmp(forever)
</code></pre></div>
<p>This example loops forever.</p>

<p>Or forward:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">label(main)
    1 2 +
    jmp(skip)
label(garbage)
    some random garbage
label(skip)
    2 +
</code></pre></div>
<p>This example skips over the <strong>garbage</strong> label, jumping to the <strong>skip</strong> label.</p>

<h2>Pre-processing</h2>

<p>In order to lookup labels that are defined later in the instruction stream, all labels must be pre-processed. The label table must be built ahead of time.</p>

<p>This is just a matter of looping over the code segment and looking for labels.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$labels = [];
foreach ($ops as $ip =&gt; $op) {
    if (preg_match(&#39;/^label\((.+)\)$/&#39;, $op, $match)) {
        $label = $match[1];
        $labels[$label] = $ip;
    }
}
</code></pre></div>
<p>We are now ready to implement the actual jump instruction.</p>

<h2>Implementation</h2>

<p>The jump instruction just sets the instruction pointer <code>$ip</code> to the address of the label.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (preg_match(&#39;/^jmp\((.+)\)$/&#39;, $op, $match)) {
    $label = $match[1];
    $ip = $labels[$label];
    continue;
}
</code></pre></div>
<p>Since the label definition is implemented as a pseudo-instruction, it must be handled as a <em>noop</em>.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">if (preg_match(&#39;/^label\((.+)\)$/&#39;, $op, $match)) {
    // noop
    continue;
}
</code></pre></div>
<h2>Unconditionally</h2>

<blockquote>
<p>Unconditional, unconditionally <br />
I will love you unconditionally <br />
There is no fear now <br />
Let go and just be free <br />
I will love you unconditionally <br /></p>

<p><em>&mdash; Katy Perry</em></p>
</blockquote>

<p>This machine supports two classes of programs: Those that always terminate, and those that loop forever.</p>

<p><center>
    <img src="/img/stack-machine-jumps/pinky-pie-omg.gif">
</center></p>

<p>Whether or not a program contains an infinite loop can be decided statically. The halting problem is solved. We can go home now.</p>

<p>The reason is that jumps are unconditional. A jump will always be followed. It has exactly one entry point and one exit point.</p>

<p>Conditional branching will change everything once again, but for now let us enjoy the unconditional infinite loops.</p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    Adding unconditional jumps to an RPN calculator allows it to loop forever.
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html"><strong>jumps</strong></a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<hr>

<div style="height: 200px;"></div>

<p><center><em>This space has been intentionally left blank.</em></center>
<div style="height: 200px;"></div></p>

<h2>Appendix</h2>

<p>Here is the full code for a stack machine with pre-processed labels and non-conditional jumps:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$labels = [];
foreach ($ops as $ip =&gt; $op) {
    if (preg_match(&#39;/^label\((.+)\)$/&#39;, $op, $match)) {
        $label = $match[1];
        $labels[$label] = $ip;
    }
}

$ip = 0;
$stack = new SplStack();

while ($ip &lt; count($ops)) {
    $op = $ops[$ip++];

    if (is_numeric($op)) {
        $stack-&gt;push((int) $op);
        continue;
    }

    if (preg_match(&#39;/^jmp\((.+)\)$/&#39;, $op, $match)) {
        $label = $match[1];
        $ip = $labels[$label];
        continue;
    }

    if (preg_match(&#39;/^label\((.+)\)$/&#39;, $op, $match)) {
        // noop
        continue;
    }

    switch ($op) {
        case &#39;+&#39;:
            $b = $stack-&gt;pop();
            $a = $stack-&gt;pop();
            $stack-&gt;push($a + $b);
            break;
        // ...
    }
}
</code></pre></div>
<p>But we both know you&#39;re only here for the gifs.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: I/O</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/11/29/stack-machines-io.html"/>
        <id>https://igor.io/2014/11/29/stack-machines-io.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: I/O</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html"><strong>io</strong></a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>The RPN calculator (see <a href="/2013/12/02/stack-machines-rpn.html">previous post</a>) allows you to evaluate arithmetical expressions. Once the end of the instruction stream is reached, the top of the stack is returned.</p>

<p>We have learned that an RPN calculator is a little computer. The instructions you feed it are programs. However, the instruction set is quite limited. One of the things we tend to do in computer programs is producing output. But there is no instruction to do that yet!</p>

<p>Luckily, it&#39;s quite easy to introduce such an instruction to the existing machine.</p>

<h2>Characters</h2>

<p>But before we can do so, we need to decide what format the characters should be stored in. This is known as a character set, and a very common one is ASCII. It stores one character per byte. Basically, any character will be represented by a number between 0 and 128.</p>

<p>Since the machine already supports integers, those can be used to store characters. Just push the numbers that correspond to the ASCII characters of your choice onto the stack.</p>

<p>The string <code>hello, world</code> translated to ASCII is:</p>

<div class="ascii-table"><pre style="background-color: yellow; padding: 15px 50px;">
h   e   l   l   o   ,     w   o   r   l   d   \n
104 101 108 108 111 44 32 119 111 114 108 100 10
</pre></div>

<p>See the full list of available characters, please check <a href="http://www.unicode.org/charts/PDF/U0000.pdf">the standard</a>.</p>

<h2>Output</h2>

<p>So let us introduce a new instruction that will pop a number off the stack and output its ASCII representation. The instruction will be called <code>.</code>, and placing it in a program will allow it to be executed.</p>

<p>Here is a modified RPN calculator that supports outputting characters:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$stack = new SplStack();</span>

<span class="x">foreach ($ops as $op) {</span>
<span class="x">    if (is_numeric($op)) {</span>
<span class="x">        $stack-&gt;push((int) $op);</span>
<span class="x">        continue;</span>
<span class="x">    }</span>

<span class="x">    switch ($op) {</span>
<span class="x">        case &#39;+&#39;:</span>
<span class="x">            $b = $stack-&gt;pop();</span>
<span class="x">            $a = $stack-&gt;pop();</span>
<span class="x">            $stack-&gt;push($a + $b);</span>
<span class="x">            break;</span>
<span class="x">        // ...</span>
<span class="x">        case &#39;.&#39;:</span>
<span class="x">            echo chr($stack-&gt;pop());</span>
<span class="x">            break;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>As you can see, it is just a matter of adding one new <code>case</code> to the <code>switch</code> statement. This allows the machine to be extended very easily.</p>

<h2>Hello World</h2>

<p>Now that the instruction is implemented, we can write an actual program that uses it. This is just a matter of pushing the string character by character, and outputting it in between.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$code = &#39;104 . 101 . 108 . 108 . 111 . 44 . 32 . 119 . 111 . 114 . 108 . 100 . 10 .&#39;;</span>
<span class="x">$ops = explode(&#39; &#39;, $code);</span>
</code></pre></div>
<p>Quite a lot of instructions are needed. One output instruction per character. But it works!</p>

<p>It ouputs: <em>&quot;hello, world&quot;</em>!</p>

<h2>Input</h2>

<p>Just like printing values to stdout, it would also be possible to read from stdin. This would be quite an easy addition. It would allow for fully interactive programs.</p>

<p>This is left as an exercise to the reader.</p>

<h2>Summary</h2>

<p><span style="background-color: yellow;">
    Adding I/O instructions to an RPN calculator allows it to interact with the Real World (tm).
</span></p>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html"><strong>io</strong></a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Compiling Brainfuck</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/10/27/compiling-brainfuck.html"/>
        <id>https://igor.io/2014/10/27/compiling-brainfuck.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Compiling Brainfuck</h1>

<p>After messing around with some assembly language for two days, I wrote a <a href="https://github.com/igorw/naegleria">brainfuck compiler</a>. Not that it hasn&#39;t been done before, but it was a fun exercise. I mean come on. <strong>It&#39;s a compiler!</strong></p>

<p>I&#39;d like to share how it was created.</p>

<blockquote>
<p>Why would you put a joke language that people use to troll other developers, and Brainfuck together into the same project?</p>

<p><em>&mdash; danpalmer, <a href="https://news.ycombinator.com/item?id=8491986">slacker news</a></em></p>
</blockquote>

<h2>Brainf*ck</h2>

<p>The <a href="http://esolangs.org/wiki/Brainfuck">brainfuck</a> language is one of the most popular esoteric programming languages. Not only because of its needlessly profane name, but also because of it&#39;s simplicity.</p>

<p>To quote the esolang wiki:</p>

<blockquote>
<p>Brainfuck operates on an array of memory cells, also referred to as the tape, each initially set to zero. There is a pointer, initially pointing to the first memory cell. The commands are:</p>

<ul>
<li><code>&gt;</code> &nbsp; Move the pointer to the right</li>
<li><code>&lt;</code> &nbsp; Move the pointer to the left</li>
<li><code>+</code> &nbsp; Increment the memory cell under the pointer</li>
<li><code>-</code> &nbsp; Decrement the memory cell under the pointer</li>
<li><code>.</code> &nbsp; Output the character signified by the cell at the pointer</li>
<li><code>,</code> &nbsp; Input a character and store it in the cell at the pointer</li>
<li><code>[</code> &nbsp; Jump past the matching ] if the cell under the pointer is 0</li>
<li><code>]</code> &nbsp; Jump back to the matching [ if the cell under the pointer is nonzero</li>
</ul>
</blockquote>

<p>Okay.</p>

<h2>Scary C code</h2>

<p>Now, it turns out that you can map these operations pretty much directly to C code. If <code>tape</code> is an array and <code>i</code> is a pointer into that array, then <code>&gt;</code> and <code>&lt;</code> increment or decrement the pointer, effectively shifting it one cell to the right or the left. Also, <code>+</code> and <code>-</code> are increments and decrements on the value pointed at.</p>

<p>Here is a pretty simple bf program:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">+++&gt;++&gt;+
</code></pre></div>
<p>Running it does not produce any output, it will however leave the memory cells of the tape in this state:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[3 2 1 ...]
</code></pre></div>
<p>Here is one way of writing the equivalent program in C:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">char tape[4000];
char *i;

int main() {
    i = tape;
    (*i)++;
    (*i)++;
    (*i)++;
    i++;
    (*i)++;
    (*i)++;
    i++;
    (*i)++;
}
</code></pre></div>
<p>If you put it in a file named dreizweieins.c, you can compile it by running:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">make dreizweieins
</code></pre></div>
<p>Which is a shorthand for invoking the compiler:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gcc -o dreizweieins dreizweieins.c
</code></pre></div>
<p>In either case, it will produce a binary that you can run:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">./dreizweieins
</code></pre></div>
<h2>Assembly</h2>

<p>When you compile a C program, there is an entire compiler toolchain doing things. The compiler toolchain will depend on your actual hardware and your operating system.</p>

<p>There are different compilers, such as <strong>gcc</strong> or <strong>clang</strong>. gcc aka the GNU Compiler Collection, is probably the most widely used.</p>

<p>One step in the compilation process is translating the high-level language (e.g. C, yeah they call that &quot;high-level&quot;, whatever) into <strong>assembly language</strong>. Note that this is not yet executable machine code. It is the human readable equivalent of machine code though, that is then assembled. Also, linkers do some magic and stuff.</p>

<p>You can get gcc to dump the assembly by providing the <code>-S</code> option. So let&#39;s try this with a program that simulates the bf <code>+</code> instruction.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">char tape[4000];
char *i = tape;

int main() {
    (*i)++;
}
</code></pre></div>
<p>Let&#39;s do this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gcc -S inc.c
</code></pre></div>
<p>This will produce a file called <code>inc.s</code> (the <code>.s</code> stands for <em>source</em> or something).</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">    .comm   tape,4000,32
    .globl  i
    .data
    .align 8
    .type   i, @object
    .size   i, 8
i:
    .quad   tape
    .text
    .globl  main
    .type   main, @function
main:
.LFB0:
    .cfi_startproc
    pushq   %rbp
    .cfi_def_cfa_offset 16
    .cfi_offset 6, -16
    movq    %rsp, %rbp
    .cfi_def_cfa_register 6
    movq    i(%rip), %rax
    movzbl  (%rax), %edx
    addl    $1, %edx
    movb    %dl, (%rax)
    popq    %rbp
    .cfi_def_cfa 7, 8
    ret
    .cfi_endproc
</code></pre></div>
<p>Well, this looks straight forward enough. It&#39;s pretty easy to see that these three instructions are responsible for the pointer lookup and value increment:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">movq    i(%rip), %rax
movzbl  (%rax), %edx
addl    $1, %edx
movb    %dl, (%rax)
</code></pre></div>
<p>We can do the same thing for the <code>&gt;</code> instruction:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">char tape[4000];
char *i = tape;

int main() {
    i++;
}
</code></pre></div>
<p>Becomes:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">movq    i(%rip), %rax
addq    $1, %rax
movq    %rax, i(%rip)
</code></pre></div>
<p>What do these instructions do? <em>Who cares!</em> They do the thing in the CPU and make the brainfuck thing in the computer, after all.</p>

<h2>I/O</h2>

<p>The input/output instructions need some special handling. For one, unix/posix shells by default buffer input by line. Brainfuck requires reading input by character.</p>

<p>You can change this behaviour by running <code>stty -icanon</code>. For the record, I copy-pasted that from StackOverflow.</p>

<p>You can put that in a C program using the <code>system</code> function in C, and look at the assembly output from gcc.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.stty:
    .string &quot;stty -icanon&quot;
    .text

...

movl    $.stty, %edi
call    system
</code></pre></div>
<p>Then do actual I/O with the <code>getchar</code> and <code>putchar</code> functions. You can look up the C level API docs by running <code>man 3 putchar</code>.</p>

<p>Here are the <code>putchar</code> assembly instructions:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">movq    i(%rip), %rax
movzbl  (%rax), %eax
movsbl  %al, %eax
movl    %eax, %edi
call    putchar
</code></pre></div>
<p>So far, you can take each one of these bf instructions and just replace it with the corresponding lines of assembly. Literally copy pasting from the gcc output. That&#39;s what I did.</p>

<h2>Loops</h2>

<p>The more complicated part is loops. The bf loops can nest. Assembly language doesn&#39;t have loops -- it just has jumps. Also known as <strong>goto</strong>.</p>

<p>Relax, you declare labels and you get to jump to those labels.</p>

<p>Here&#39;s an infinite loop, for fun:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">.globl main
main:
    jmp main
</code></pre></div>
<p>bf loops are basically the same as <code>while</code> loops in C. But in order to get the nesting behaviour right, you sort of need to keep track of which level you are at. Since at the end of the loop you need to jump back to the beginning.</p>

<p>This can be accomplished by having a simple loop counter that names the loops, and a stack that stores the current level of nesting.</p>

<p>Look at the code.</p>

<h2>Putting it all together</h2>

<p>So when you put all the pieces in place, you get a working compiler!</p>

<ul>
<li>Put the boilerplate into some template that wraps around the generated instructions.</li>
<li>Loop over the bf code and replace each instruction with the corresponding output from <code>gcc -S</code>.</li>
<li>That&#39;s literally it, that&#39;s how a compiler is made.</li>
</ul>

<p>&lt;3 copy pasting</p>

<p><center>
    <a href="https://github.com/igorw/naegleria" class="btn btn-large btn-inverse" style="font-size: 1.3em;">
        Naegleria
    </a>
</center></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>End the war on tabs</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/10/04/end-the-war-on-tabs.html"/>
        <id>https://igor.io/2014/10/04/end-the-war-on-tabs.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>End the war on tabs</h1>

<p>This is a transcript of a talk I gave at PHPNW14 in October 2014.</p>

<h2>The war on tabs</h2>

<p>Programming is an artistic medium. It is a form of self-expression.</p>

<p>Yet we have groups, such as the PHP-FIG, that are trying to set up rules that restrict this expressive power. They have started a war on tabs, and they will not stop until each and every tab has been extinguished.</p>

<p>For the unaware, the PHP-FIG have released a document detailing how every tab is to be replaced by four spaces. They are literally replacing these beautiful tabs with emptiness!</p>

<p>What idea does the tab represent? Why do they hate it so much? The tab represents freedom. The freedom to not fit into the binary of newlines and spaces. The freedom to explore. To be the way you are, or the way you want to be.</p>

<p>Since there is no definition of what a tab should look like, it <em>can</em> be whatever you want it to be!</p>

<p>A tab can be rainbows! It can be kittens! Or it can be an entire universe! Within a single tab.</p>

<p><center>
    <img src="/img/ws/kitten.png">
</center></p>

<h2>Whitespace</h2>

<p>Why are tabs important? They are necessary in order to write programs in whitespace.</p>

<div style="height: 300px;"></div>

<p>Whitespace, of course, is a programming language. It was created in 2003 by Edwin Brady, in an attempt to solve the halting problem. That attempt was successful, and you can see the decision procedure here:</p>

<blockquote>
<p>&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br /></p>
</blockquote>

<p>Just kidding. Edwin forgot to turn off trimming of trailing spaces in his editor, so the decision procedure was lost.</p>

<p>How many lines does it take to write a whitespace interpreter in whitespace? 2927 lines, as you can see here.</p>

<blockquote>
<p>&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br /></p>
</blockquote>

<p>Oh wait, that’s a bit too small. Let me zoom in.</p>

<blockquote>
<p>&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br /></p>
</blockquote>

<p>That’s better.</p>

<p>To clarify, this is a program written in whitespace, that is able to take any other whitespace program, and run it. It&#39;s as if you re-wrote PHP in PHP.</p>

<p>And here is an example of a hello world program. It is running inside that whitespace interpreter, that is itself written in whitespace. Twice. And then running inside of a whitespace interpreter that is written in PHP.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ (cat examples/wsinterws.ws; cat examples/hworld.ws; echo -ne &quot;\n\n\nquit\n\n\n&quot;) | hhvm bin/interpreter examples/wsinterws.ws
whitespace interpreter written in whitespace
made by oliver burghard smarty21@gmx.net
in his free time for your and his joy
good time and join me to get whitespace ready for business
for any other information dial 1-900-whitespace
or get soon info at www.whitespace-wants-to-be-taken-serious.org
please enter the program and terminate via 3xenter,&#39;quit&#39;,3xenter
-- ws interpreter ws -------------------------------------------
whitespace interpreter written in whitespace
made by oliver burghard smarty21@gmx.net
in his free time for your and his joy
good time and join me to get whitespace ready for business
for any other information dial 1-900-whitespace
or get soon info at www.whitespace-wants-to-be-taken-serious.org
please enter the program and terminate via 3xenter,&#39;quit&#39;,3xenter
-- ws interpreter ws -------------------------------------------
Hello, world of spaces!
</code></pre></div>
<p>Pretty simple stuff.</p>

<h2>Stack machine</h2>

<p>So how does the whitespace language work? It&#39;s really straightforward.</p>

<p>Like most modern programming languages, whitespace is based on the idea of a stack machine. It has an instruction set consisting of 24 instructions for stack, arithmetic, heap, control flow and I/O operations.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">stack: push, dup, ref, swap, discard, slide
arithmetic: add, sub, mul, div, mod
heap: store, retrieve
flow: label, call, jump, jumpz, jumplz, ret, exit
i/o: write_char, write_num, read_char, read_num
</code></pre></div>
<p>These instructions are encoded as sequences of tabs, spaces and newlines.</p>

<p>While you can also use other characters, they will be ignored. Only the actual whitespace is significant. This allows whitespace code to be embedded within other programming languages, turning it into a DSL for general purpose computing!</p>

<p>Another benefit is that printing a whitespace program takes no ink at all! It&#39;s very environmentally friendly.</p>

<p>In order to read a whitespace program, you simply read between the lines. Literally.</p>

<h2>Stack</h2>

<p>A stack machine is a loop with a switch statement inside. The switch statement switches between instructions. The instructions modify the stack.</p>

<p>A stack is a data structure with two operations: push and pop. Push adds stuff to the top. Pop removes stuff from the top.</p>

<p>The stack operations in whitespace allow you to do additional operations like duplicate, index into, and swap.</p>

<h2>Arithmetic</h2>

<p>Once you add arithmetic operations, you can do calculations. This type of stack machine is also known as an RPN calculator.</p>

<h2>Heap</h2>

<p>In addition to the stack, whitespace also offers a heap. The heap is a block of memory that can be indexed into. You can store values at arbitrary locations, and fetch data out as you need it.</p>

<p>It&#39;s a key-value store.</p>

<p><center>
    <img src="/img/ws/register.gif">
</center></p>

<h2>Control flow</h2>

<p>But there are two really important parts missing. The first is control flow. Without control flow, this machine is not yet turing complete. That means that it will just run through the instructions linearly until it reaches the end, without any chance of going back. Being able to go back is part of what makes programs interesting in the first place!</p>

<p>The way this is accomplished is by introducing jumps, also known as (ghasp!) goto. Yes, your favourite programming language probably uses goto, and so does your CPU. Even Dijkstra knows this.</p>

<p><center>
    <img src="/img/ws/dijkstra.png">
</center></p>

<p>Whitespace allows declaring labels and then jumping to said labels, conditionally or non-conditionally. Where the condition can be a zero check or a less-than-zero check.</p>

<p><center>
    <img src="/img/ws/goto.gif">
</center></p>

<h2>I/O</h2>

<p>The last missing piece is I/O. Without input/output instructions, the VM will just generate a lot of hot air. Which is awesome for cold winter days, but not very useful, as the computations are not observable.</p>

<p>I/O allows interaction with the Real World (tm).</p>

<h2>Turing completeness</h2>

<p>What do we get when we combine all of these instructions? A turing complete system.</p>

<p>Alan Turing was working on the halting problem, which he proved to be undecidable. That is the reason why programming is hard. That is the reason we cannot detect infinite loops.</p>

<p>Turing complete systems have a notion of universality, meaning that any turing complete system can emulate any other turing complete system.</p>

<p><center>
    <img src="/img/ws/lap.jpg">
</center></p>

<p>And since any turing complete system can emulate any other turing complete system, including itself... It is possible to write a whitespace interpreter in whitespace.</p>

<p>And here is is: The self-interpreter I showed you earlier:</p>

<blockquote>
<p>&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br />
&nbsp;<br /></p>
</blockquote>

<p>But how does it run?</p>

<ul>
<li>So we have a computer with a CPU. It&#39;s likely to be an x86 architecture these days.</li>
<li>There is the PHP interpreter that is written in C, and it is compiled down to x86 machine code.</li>
<li>The PHP interpreter runs PHP programs, for example a whitespace interpreter written in PHP.</li>
<li>This whitespace interpreter is able to run any whitespace program. For example, a whitespace interpreter written in whitespace.</li>
<li>This whitespace interpreter is able to run any whitespace program. For example, a whitespace interpreter written in whitespace.</li>
<li>This whitespace interpreter is able to run any whitespace program. For example, a hello world written in whitespace.</li>
</ul>

<p>So when you run this stack of stack machines, you will have to wait a while. But in the end, you will be rewarded:</p>

<blockquote>
<p>Hello, world of spaces!</p>
</blockquote>

<p><center>
    <img src="/img/ws/igor.jpg">
</center></p>

<h2>Resources</h2>

<ul>
<li><a href="http://esolangs.org/wiki/Whitespace">Whitespace on Esolangs</a></li>
<li><a href="http://compsoc.dur.ac.uk/whitespace/">Whitespace homepage</a></li>
<li><a href="https://github.com/igorw/whitespace-php">igorw/whitespace-php</a></li>
<li><a href="https://github.com/igorw/wsm">igorw/wsm</a></li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Re: Recursion instead of goto</title>
        <link rel="alternate" type="text/html" href="https://github.com/igorw/retry/issues/3#issuecomment-56448334"/>
        <id>https://github.com/igorw/retry/issues/3#issuecomment-56448334</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Re: Recursion instead of goto</h1>

<p>Why hello! Thank you for asking this most excellent question!</p>

<p>I have indeed considered alternatives to the goto. I have evaluated them to a great extent, and I am happy to present the results to you here.</p>

<p>When the PHP parser reads a source file, that source code is compiled down to a series of <em>opcodes</em>, that will then be executed by the Zend (tm) (r) Engine. The compiler does some basic optimizations, but is really quite stupid. And so, depending on what code you write, it will generate different opcodes. This has a direct performance impact.</p>

<p>There are several way in which a loop can be written. Let&#39;s start with the one you have proposed, the recursive call.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function retry($retries, callable $fn)
{
    try {
        return $fn();
    } catch (\Exception $e) {
        if (!$retries) {
            throw new FailingTooHardException(&#39;&#39;, 0, $e);
        }
        retry($retries - 1, $fn)
    }
}
</code></pre></div>
<p>When you give this code to the PHP compiler, it will generate these opcodes:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function name:  igorw\retry
number of ops:  24
compiled vars:  !0 = $retries, !1 = $fn, !2 = $e
line     # *  op                           fetch          ext  return  operands
---------------------------------------------------------------------------------
   7     0  &gt;   RECV                                             !0      
         1      RECV                                             !1      
  11     2      INIT_FCALL_BY_NAME                                       !1
         3      DO_FCALL_BY_NAME                              0  $0      
         4    &gt; RETURN                                                   $0
  12     5*     JMP                                                      -&gt;23
         6  &gt;   CATCH                                        17          &#39;Exception&#39;, !2
  13     7      BOOL_NOT                                         ~1      !0
         8    &gt; JMPZ                                                     ~1, -&gt;17
  14     9  &gt;   FETCH_CLASS                                   4  :2      &#39;igorw%5CFailingTooHardException&#39;
        10      NEW                                              $3      :2
        11      SEND_VAL                                                 &#39;&#39;
        12      SEND_VAL                                                 0
        13      SEND_VAR                                                 !2
        14      DO_FCALL_BY_NAME                              3          
        15    &gt; THROW                                         0          $3
  15    16*     JMP                                                      -&gt;17
  16    17  &gt;   INIT_NS_FCALL_BY_NAME                                    
        18      SUB                                              ~5      !0, 1
        19      SEND_VAL                                                 ~5
        20      SEND_VAR                                                 !1
        21      DO_FCALL_BY_NAME                              2  $6      
        22    &gt; RETURN                                                   $6
  18    23*   &gt; RETURN                                                   null
</code></pre></div>
<p>As you can see, it is generating 24 instructions. The most expensive portion of this is the function calls, since the arguments need to be sent individually, and there is an additional instruction (DO<em>FCALL</em>BY_NAME) for the actual function call.</p>

<p>There is no reason why this would be necessary. As described by Steele in his paper <a href="http://dspace.mit.edu/bitstream/handle/1721.1/5753/AIM-443.pdf">Lambda: The Ultimate GOTO</a>, tail calls can be compiled to very efficient instructions. The PHP compiler however, does not take advantage of this technique, so calls are quite costly.</p>

<p>Let&#39;s try and improve this. By using a while loop.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function retry($retries, callable $fn)
{
    while (true) {
        try {
            return $fn();
        } catch (\Exception $e) {
            if (!$retries) {
                throw new FailingTooHardException(&#39;&#39;, 0, $e);
            }
            $retries--;
        }
    }
}
</code></pre></div>
<p>Here is what the compiler gives us:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function name:  igorw\retry
number of ops:  23
compiled vars:  !0 = $retries, !1 = $fn, !2 = $e
line     # *  op                           fetch          ext  return  operands
---------------------------------------------------------------------------------
   7     0  &gt;   RECV                                             !0      
         1      RECV                                             !1      
   9     2  &gt;   FETCH_CONSTANT                                   ~0      &#39;igorw%5Ctrue&#39;
         3    &gt; JMPZ                                                     ~0, -&gt;22
  11     4  &gt;   INIT_FCALL_BY_NAME                                       !1
         5      DO_FCALL_BY_NAME                              0  $1      
         6    &gt; RETURN                                                   $1
  12     7*     JMP                                                      -&gt;21
         8  &gt;   CATCH                                        15          &#39;Exception&#39;, !2
  13     9      BOOL_NOT                                         ~2      !0
        10    &gt; JMPZ                                                     ~2, -&gt;19
  14    11  &gt;   FETCH_CLASS                                   4  :3      &#39;igorw%5CFailingTooHardException&#39;
        12      NEW                                              $4      :3
        13      SEND_VAL                                                 &#39;&#39;
        14      SEND_VAL                                                 0
        15      SEND_VAR                                                 !2
        16      DO_FCALL_BY_NAME                              3          
        17    &gt; THROW                                         0          $4
  15    18*     JMP                                                      -&gt;19
  16    19  &gt;   POST_DEC                                         ~6      !0
        20      FREE                                                     ~6
  18    21    &gt; JMP                                                      -&gt;2
  19    22  &gt; &gt; RETURN                                                   null
</code></pre></div>
<p>This already looks a bit better. But there is a rather inefficient FETCH_CONSTANT instruction right at the top. This requires doing a namespace lookup against <code>igorw\true</code>. We can optimize that, by replacing <code>while (true)</code> with <code>while (\true)</code>.</p>

<p>This gets rid of the FETCH_CONSTANT call, and puts the boolean <code>true</code> inline:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">line     # *  op                           fetch          ext  return  operands
---------------------------------------------------------------------------------
   7     0  &gt;   RECV                                             !0      
         1      RECV                                             !1      
   9     2  &gt; &gt; JMPZ                                                     true, -&gt;21
</code></pre></div>
<p>But JUMPZ with argument true is a redundant expression. true is never zero. So ideally we would simply eliminate this check.</p>

<p>PS: <code>for (;;)</code> also has redundant jumps, so let&#39;s not use that.</p>

<p>So can we eliminate the redundant jump? Let&#39;s try a <code>do-while</code> loop!</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">function name:  igorw\retry
number of ops:  21
compiled vars:  !0 = $retries, !1 = $fn, !2 = $e
line     # *  op                           fetch          ext  return  operands
---------------------------------------------------------------------------------
   7     0  &gt;   RECV                                             !0      
         1      RECV                                             !1      
  11     2  &gt;   INIT_FCALL_BY_NAME                                       !1
...
        15    &gt; THROW                                         0          $3
  15    16*     JMP                                                      -&gt;17
  16    17  &gt;   POST_DEC                                         ~5      !0
        18      FREE                                                     ~5
  18    19    &gt; JMPNZ                                                    true, -&gt;2
  19    20  &gt; &gt; RETURN                                                   null
</code></pre></div>
<p>Awesome! The extra initial JMPZ has been removed! But, it comes at the cost of a JMPNZ at the end. So it will be more efficient for the success case, but for the retry, we will still do redundant checks for a jump that should be unconditional.</p>

<p>And there is a way to eliminate that final conditional, by using the excellent goto feature built into PHP. It produces the identical opcodes as do...while, but makes that final jump non-conditional!</p>

<p>And there you have it. This is the most efficient solution to do non-conditional loops in PHP. All other options are simply too slow.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>The Right Way</title>
        <link rel="alternate" type="text/html" href="http://dev-human.com/entries/2014/09/06/the-right-way/"/>
        <id>http://dev-human.com/entries/2014/09/06/the-right-way/</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>The Right Way</h1>

<h4>Community</h4>

<p>It&#39;s a word that a lot of people like to throw around as something they believe in. It&#39;s a fuzzy word that makes humans feel warm and fuzzy inside. It is a way for a group of individuals to co-exist in a space of shared values.</p>

<p>Communities are useful, they unite us. They define a common goal or purpose. They often define social norms. They create entry points for newcomers to become familiar with any given subject of interest.</p>

<p>Communities are dangerous. They divide us. They create biases, power structures, pride.</p>

<h4>Being Right</h4>

<p>In almost every programming related community, there will be an idea of what it means to be right. Quite often it will be defined by the local status quo. It will be amplified by the leaders of the community.</p>

<p>This sense of righteousness becomes present in the members of the community. It becomes a part of their identity. And by virtue of being right, there is a form of arrogance that may not always be apparent, especially from within. It exists nevertheless.</p>

<p>Being Right becomes a matter of Not Being Wrong. Because we all know who is wrong: The Others are.</p>

<h4>We are never right</h4>

<p>The Only Sure Thing in Computer Science is [1]:</p>

<blockquote>
<p>Everything is a tradeoff.</p>
</blockquote>

<p>Being right is a myth. It implies absolutes. It implies having a grasp on computation, which frankly, has not been achieved yet by humanity.</p>

<p>One of the reasons we may be attracted to absolutist answers is that they are convenient. It&#39;s so much easier to ignore the messiness of reality and follow a Few Simple Rules.</p>

<p>Just Practice TDD. Just Use OOP. Just Follow This Coding Standard. Just Use This Framework. Just Use This Library. Just Use This Tool.</p>

<p>These simple absolute truths are very seductive. But so is Fox News [2]. Err, I mean Hacker News.</p>

<h4>Let&#39;s be wrong</h4>

<p>Being right is playing it safe. Being right is not challenging yourself. Being right is not trying new things.</p>

<p>Try new things. And while you&#39;re at it, try some old things too. Dig in the past. Look around you. Look at other languages, what approaches are they taking?</p>

<p>Challenge authority. Just because someone is loud and has 20K twitter followers does not mean they cannot be challenged.</p>

<p>Most of all, experiment. Make mistakes. Talk about them.</p>

<p>If more of us start treating programming as an art form, our communities will become more colourful, diverse and awesome as a result.</p>

<h4>Works Cited</h4>

<p><a href="http://michaelrbernste.in/2013/11/13/the-only-sure-thing-in-computer-science.html">[1]</a> Michael Bernstein. <em>The Only Sure Thing in Computer Science</em>, November 2013<br />
<a href="http://codon.com/the-dhh-problem">[2]</a> Tom Stuart. <em>The DHH Problem</em>, May 2014</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Reasoned PHP</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/08/06/reasoned-php.html"/>
        <id>https://igor.io/2014/08/06/reasoned-php.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Reasoned <span style="font-size: 0.6em;">PHP</span></h1>

<p>Using <strong>logic</strong> to run your <strong>programs</strong> backwards!</p>

<p>This is a transcript of a talk I gave at the Berlin PHP usergroup in August 2014.</p>

<h2>Logic</h2>

<p>This presentation is going to be about using logic to run your programs
backwards. Let&#39;s begin with talking about logic.</p>

<p>One of the first logicians was Aristotle, a few years before Christ. He came
up with syllogisms &mdash; logical statements &mdash; that would look
something like this:</p>

<blockquote>
<p>I am a human.</p>

<p>Every human is mortal.</p>

<p>Therefore, I am mortal.</p>
</blockquote>

<p>And by combining these statements, one could reach logical conclusions. Which
would allow truths to be derived.</p>

<p><center>
    <img src="/img/reasoned-php/aristotle.png" alt="aristotle">
</center></p>

<p>Then christianity happened, and there wasn&#39;t really any progress in science
and philosophy for... well, a while.</p>

<p>But then, in the 1600s, Leibnitz not only independently invented calculus
(next to Newton), but also discovered many of the concepts that would play an
important role in the formalisation of logic.</p>

<p>His calculus ratiocinator is an attempt at creating a universal language to
describe human thought. He is famous for suggesting that truths should be
calculated.</p>

<p><center>
    <img src="/img/reasoned-php/leibnitz.png" alt="leibnitz">
</center></p>

<p>In the 1800s, a lot of progress was made on the logic front. Boole created
boolean algebra. De Morgan published De Morgan&#39;s laws. Both of these systems
would allow translations to be made between logical statements, and they laid
the groundwork for electronics.</p>

<p>Frege wrote the Begriffsschrift, introducing for the first time a formal logic
that included a notion of functions and variables. This new method would form
the basis for most of early 20th century mathematical work.</p>

<p><center>
    <img src="/img/reasoned-php/boole-frege-demorgan.png" alt="boole, frege, de morgan">
</center></p>

<p>In 1935, Gentzen created not one, but two new formulations of
logic<sup><a id="ft-1-src"></a><a href="#ft-1">1</a></sup>:
Natural deduction and the sequent calculus. It can be described in terms of a
few simple rules.</p>

<p><center>
    <img src="/img/reasoned-php/gentzen.png" alt="gentzen">
</center></p>

<p>At the same time, Church was trying to prove something about logic and
accidentally invented the simply typed lambda calculus: The first functional
programming language and it even has a type system!</p>

<p>This turned out to be a formalization of computation and thus remains one of
the most commonly used ways of describing computers on the most fundamental
level.</p>

<p><center>
    <img src="/img/reasoned-php/church.png" alt="church">
</center></p>

<p>What is amazing however is that when the descriptions of natural deduction and
the simply typed lambda calculus are compared, they appear to be identical!
And that&#39;s because they are identical! Logical proofs directly correspond to
the types in programs!</p>

<p>This is what is known as the curry-howard isomorphism, and it shows us that
there is a very strong link between logic and computation.</p>

<p><center>
    <img src="/img/reasoned-php/curry-howard.png" alt="curry-howard">
</center></p>

<h2>Programs</h2>

<p>So let&#39;s talk about programs. The way I tend to think about programs is as
black boxes. You put things in on one end, stuff comes out on the other end.
For the same things you put in, you will always get the same things out. It is
deterministic in that sense.</p>

<p>In pure functional programming this is true for every function. But even if
you don&#39;t care about functional programming, this is still true at the macro
scale. Your program as a whole is deterministic.</p>

<p>So let&#39;s take a function <code>append</code> for example. You give it two lists as
inputs, it produces a list as an output. The output list is the concatenation
of the two input lists.</p>

<p><center>
    <img src="/img/reasoned-php/append.png" alt="append">
</center></p>

<p>But would it be possible to reverse this process? Could we flip the inputs and
the outputs, and ask &quot;give me the inputs that when concatenated produce this
output list&quot;?</p>

<p>The laws of physics do not prevent the rules to be reversed, apart from the
law of entropy. So let&#39;s fight entropy.</p>

<p>The actual problem here is that there is more than one possible answer to the
question. There are multiple ways in which two lists could create the provided
output list.</p>

<p><center>
    <img src="/img/reasoned-php/appendo.png" alt="appendo">
</center></p>

<p>And as a matter of fact, we can enumerate all of the possibilities. And from
looking at them, we can tell that there is some sort of relationship between
the two inputs. As one of them grows, the other one shrinks.</p>

<p><center>
    <img src="/img/reasoned-php/appendo-list.png" alt="appendo-list">
</center></p>

<p>And usually in any slightly more complicated program, we don&#39;t just have a
list of possibilities. It is a tree. A tree that branches out, that can be
traversed and searched.</p>

<p>The type of programming that I am describing is <strong>constraint logic
programming</strong>. More specifically, constraint logic programming over the domain
of trees.</p>

<p>The execution of the program corresponds to a search over the tree. You are
searching for an answer that will satisfy the given constraints. And this
search corresponds to a search for a constructive logical proof.</p>

<p><center>
    <img src="/img/reasoned-php/appendo-tree.png" alt="appendo-tree">
</center></p>

<p>In order to construct this tree, the program needs to be written in a
particular kind of way. The way it is done is by redefining equality, or
rather, assignment.</p>

<p>In most programming languages, assignment is a uni-directional construct. A
value is assigned to a variable. It only goes one way.</p>

<p>However, if you extend this notion to a bi-directional relationship in which
the order of statements does not matter, you gain reversibility.</p>

<p>At this point you no longer have inputs and outputs. You just have pieces of
information that are related to each other. This is why this form of
programming is also known as <strong>relational
programming</strong><sup><a id="ft-2-src"></a><a href="#ft-2">2</a></sup>.</p>

<p><center>
    <img src="/img/reasoned-php/equality.png" alt="equality">
</center></p>

<p>Another important piece of the puzzle is the tree search and the matching of
trees against each other. This happens through an algorithm called
<strong>unification</strong>.</p>

<p>You can think of unification as a way of taking two trees &mdash; or lists of
lists &mdash; and matching them against each other. The trees can contain
&quot;holes&quot; which are unbound variables. When matching the trees against each
other, they can fill each other&#39;s holes. If there is no contradiction, then
the trees unify.</p>

<p>Another way to think about it is a bi-directional pattern match.</p>

<p><center>
    <img src="/img/reasoned-php/unification.png" alt="unification">
</center></p>

<h2>Reasoned <span style="font-size: 0.6em;">PHP</span></h2>

<p>This brings us to a system that I have been working on. It is called
<strong><a href="https://github.com/igorw/reasoned-php">Reasoned
<span style="font-size: 0.7em;">PHP</span></a></strong>.</p>

<p>Reasoned <span style="font-size: 0.7em;">PHP</span> is a logic programming
system written in PHP. It is a port of <a href="http://minikanren.org">miniKanren</a>
into PHP. An embedded language for relational programming.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function appendᵒ($l, $s, $out) {</span>
<span class="x">    return condᵉ([</span>
<span class="x">        [≡($l, []), ≡($s, $out)],</span>
<span class="x">        [fresh_all(($a, $d, $res) ==&gt; [</span>
<span class="x">            consᵒ($a, $d, $l),</span>
<span class="x">            consᵒ($a, $res, $out),</span>
<span class="x">            appendᵒ($d, $s, $res),</span>
<span class="x">        ])],</span>
<span class="x">    ]);</span>
<span class="x">}</span>
</code></pre></div>
<p>This is what the code looks like. Your first thought might be &quot;omg that&#39;s so
ugly&quot;, to which I will answer: What did you expect? It&#39;s PHP.</p>

<p>Your second thought might be &quot;omg unicode function names&quot;. Yep. Amazing, isn&#39;t
it?</p>

<p>If you wanted to actually call this <code>appendᵒ</code> relation, here is how you would
do it:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">run٭($q ==&gt;</span>
<span class="x">    appendᵒ([1, 2, 3], [4, 5, 6], $q));</span>
</code></pre></div>
<p>So let&#39;s suppose we have a relation called <code>memberᵒ</code> that tells you if a
variable <code>$x</code> is a member of the list <code>$list</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">memberᵒ($x, $list)</span>
</code></pre></div>
<p>We can now ask this relation questions, such as &quot;is <code>2</code> a member of the list
<code>[1, 2, 3]</code>?&quot;, to which it will respond with <code>_.0</code> which is a strange way of
saying yes.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">memberᵒ(2, [1, 2, 3])</span>
<span class="x">// =&gt; _.0</span>
</code></pre></div>
<p>That is not very interesting yet. Instead we could ask: is the unbound
variable <code>$x</code> a member of the list <code>[1, 2, 3]</code>? In this case, it will answer
&quot;yes, and by the way, these are the possible values it could take!&quot;</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">memberᵒ($x, [1, 2, 3])</span>
<span class="x">// =&gt; 1, 2, 3</span>
</code></pre></div>
<p>Now, you can also combine these statements. Is <code>$x</code> a member of <code>[1, 2, 3]</code>
and of <code>[3, 4, 5]</code>?</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">memberᵒ($x, [1, 2, 3])</span>
<span class="x">memberᵒ($x, [3, 4, 5])</span>
<span class="x">// =&gt; 3</span>
</code></pre></div>
<p>And sure enough, it actually figured out that there is only one value that is
a member of both lists: <code>3</code>. So without explicitly defining an intersection
operation, the intersection emerges from the tree search.</p>

<h2>Cool stuff</h2>

<p>I want to emphasise that this is a general programming technique and you can
model almost any computation in this way. And by doing so, you will be able to
run any program that is written in a relational manner backwards!</p>

<p>Nevertheless, there are certain problems where this approach fits particularly
well. I would like to show you some of them.</p>

<p>The first one is mathematical formulae. A formula is just a tree of terms and
most of calculus does not actually involve calculation at all. It is just
symbolic manipulation of symbols. And that&#39;s precisely what prolog and other
logic programming systems excel at.</p>

<p>Here is an example of symbolic
differentiation<sup><a id="ft-3-src"></a><a href="#ft-3">3</a></sup>.</p>

<p><center>
    <img src="/img/reasoned-php/derivative.png" alt="derivative">
</center></p>

<p>In electronics you have logic gates that react to electrical signals in
certain ways. A logic gate can be depicted with a symbol as often used in
circuit schematics. But it can also be described in terms of a truth table.</p>

<p>The truth table describes the logical relation between the input bits and the
output bit. It is a function. As such, it can be implemented as a
bi-directional relation.</p>

<p><center>
    <img src="/img/reasoned-php/bit-gates.png" alt="bit-gates">
</center></p>

<p>It is possible to combine these two gates to form a so-called half-adder. The half-adder also has a truth table. And thus also can be a relation.</p>

<p><center>
    <img src="/img/reasoned-php/bit-half-adder.png" alt="bit-half-adder">
</center></p>

<p>By combining two half-adders, you can create a full-adder. It allows you to
add two binary digits. Chaining n full adders allows you to add two n-bit
binary numbers. n corresponds to the amount of binary digits. And that&#39;s
really what the ALU inside of your computer does.</p>

<p>This circuit is reversible.</p>

<p><center>
    <img src="/img/reasoned-php/bit-full-adder.png" alt="bit-full-adder">
</center></p>

<p>Normally if you think of arithmetic, it is a function. Two numbers go into the
addition operator, the sum comes out on the other end.</p>

<p><center>
    <img src="/img/reasoned-php/plus-forward.png" alt="plus-forward">
</center></p>

<p>If you implement arithmetic as a relation, you can ask questions such as &quot;give
me all the numbers that add up to 5&quot;. The system will enumerate
them<sup><a id="ft-4-src"></a><a href="#ft-4">4</a></sup>!</p>

<p><center>
    <img src="/img/reasoned-php/plus-backward.png" alt="plus-backward">
</center></p>

<p>Moving up from hardware to software, we have compilers. A compiler is a
program that reads the source code of another program and compiles it down to
machine code.</p>

<p>If you implement a compiler in a relational way, you get not only a compiler,
but also a decompiler. That means that if you&#39;re lucky, you will be able to
take an arbitrary chunk of machine code and translate it back into some sort
of source code!</p>

<p><center>
    <img src="/img/reasoned-php/compiler.png" alt="compiler">
</center></p>

<p>This becomes even more fun when you write a relational interpreter. An
interpreter is a program that reads the source code of another program and
executes it. Then sometimes produces an output.</p>

<p>With a relational interpreter you can not just feed it some input and see the
output. You can ask it questions such as &quot;give me all of the programs that
evaluate to 42&quot;. The system will enumerate them!</p>

<p>This is extremely powerful. It is almost like doing TDD, but without writing
the code. The tests constrain what the program must do. The proof search will
try to find a program that satisfies those constraints. It has actually been
possible to synthesise small programs using this technique.</p>

<p><center>
    <img src="/img/reasoned-php/interpreter.png" alt="interpreter">
</center></p>

<p>One very cool aspect of unbound variables is that you can use them multiple
times. This allows you to formulate a question such as &quot;give me a program that
when executed outputs its own source code&quot;. This is what is known as a quine,
and a relational interpreter will happily generate quines for
you<sup><a id="ft-5-src"></a><a href="#ft-5">5</a></sup>!</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">eval_expᵒ($q, [], $q)</span>

<span class="x">// =&gt; ((lambda (_.0) (list _.0 (list &#39;quote _.0)))</span>
<span class="x">//     &#39;(lambda (_.0) (list _.0 (list &#39;quote _.0)))</span>
</code></pre></div>
<p>But you can do something even better than that. You can ask the interpreter to
produce a program <code>$x</code> that evaluates to the source code of a program <code>$y</code>.
And the program <code>$y</code> should then evaluate to the source code of <code>$x</code> again.
This is what is known as a twine, and a relational interpreter will happily
generate twines for you!</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">eval_expᵒ($x, [], $y)</span>
<span class="x">eval_expᵒ($y, [], $x)</span>

<span class="x">// =&gt; ((lambda (_.0)</span>
<span class="x">//      (list &#39;quote (list _.0 (list &#39;quote _.0))))</span>
<span class="x">//     &#39;(lambda (_.0) (list &#39;quote (list _.0 (list &#39;quote _.0)))))</span>
<span class="x">//</span>
<span class="x">//     ((lambda (_.0) (list &#39;quote (list _.0 (list &#39;quote _.0))))</span>
<span class="x">//     &#39;(lambda (_.0) (list &#39;quote (list _.0 (list &#39;quote _.0)))))</span>
</code></pre></div>
<h2><em>µ</em>Kanren</h2>

<p>How much code does it take to implement the basic mechanisms of a logic
programming system? One of the smallest ones, that Reasoned
<span style="font-size: 0.7em;">PHP</span> is in fact based upon, is
called <em>µ</em>Kanren.</p>

<p>It consists of <a href="https://github.com/jasonhemann/microKanren/blob/master/microKanren.scm">~50 lines of code</a>.</p>

<p><strong>It&#39;s amazing how little code is needed to build a logic programming system.</strong></p>

<p><center>
    <a href="https://github.com/igorw/reasoned-php" class="btn btn-large btn-inverse" style="font-size: 1.3em;">
        Go check out Reasoned <span style="font-size: 0.7em;">PHP</span>
    </a>
</center></p>

<hr>

<ol>
<li><p><a id="ft-1"></a>From Propositions as Types by Philip Wadler <a id="ft-1" href="#ft-1-src">↩</a></p></li>
<li><p><a id="ft-2"></a>A term popularised by William Byrd and miniKanren <a id="ft-2" href="#ft-2-src">↩</a></p></li>
<li><p><a id="ft-3"></a>From Clause and Effect by William Clocksin <a id="ft-3" href="#ft-3-src">↩</a></p></li>
<li><p><a id="ft-4"></a>This number system is described in The Reasoned Schemer and is lovingly referred to as &quot;Oleg Numbers&quot; <a id="ft-4" href="#ft-4-src">↩</a></p></li>
<li><p><a id="ft-5"></a>From Quine Generation via Relational Interpreters by Byrd et al.<a id="ft-5" href="#ft-5-src">↩</a></p></li>
</ol>

<h2>References</h2>

<ul>
<li><p><a href="http://homepages.inf.ed.ac.uk/wadler/topics/history.html#propositions-as-types">Propositions as Types</a>
<br /><em>Philip Wadler</em></p></li>
<li><p><a href="http://webyrd.net/scheme-2013/papers/HemannMuKanren2013.pdf"><em>µ</em>Kanren</a>
<br /><em>Jason Hemann, Daniel Friedman</em></p></li>
<li><p><a href="http://users-cs.au.dk/danvy/sfp12/papers/byrd-holk-friedman-paper-sfp12.pdf">Quine Generation via Relational Interpreters</a>
<br /><em>William Byrd, Eric Holk, Daniel Friedman</em></p></li>
<li><p><a href="http://mitpress.mit.edu/books/reasoned-schemer">The Reasoned Schemer</a>
<br /><em>Daniel Friedman, William Byrd, Oleg Kiselyov</em></p></li>
<li><p><a href="http://www.amazon.com/Clause-Effect-Programming-Working-Programmer/dp/3540629718">Clause and Effect</a>
<br /><em>William Clocksin</em></p></li>
<li><p><a href="http://www.theannotatedturing.com/">The Annotated Turing</a>
<br /><em>Charles Petzold</em></p></li>
<li><p><a href="http://www.charlespetzold.com/code/">Code</a>
<br /><em>Charles Petzold</em></p></li>
<li><p><a href="http://www.logicomix.com/">Logicomix</a>
<br /><em>Apostolos Doxiadis, Christos Papadimitriou</em></p></li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Functional Library: Null</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/01/10/functional-library-null.html"/>
        <id>https://igor.io/2014/01/10/functional-library-null.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Functional Library: Null</h1>

<p>Tony Hoare famously described the invention of null references as a <a href="http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare">Billion
Dollar Mistake</a>.</p>

<p>Nulls are something we need to deal with in almost any language. Any value
that can be null must be null checked. An example of a very common error that
will arise when nulls are present is:</p>

<blockquote>
<p>PHP Fatal error:  Call to a member function bar() on a non-object in foo.php
on line n</p>
</blockquote>

<p><center>
    <img src="/img/funlib-null/null.png" alt="null">
</center></p>

<p>One of the ways to deal with this problem is the Null Object pattern, that
usually works quite well for behaviour, e.g. <code>NullLogger</code>. But it does not
work well at all for values, e.g. <code>NullAddress</code>.</p>

<h2>Option</h2>

<p>Luckily, there is a better Option.</p>

<p>How often have you written this piece of code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$user = $repo-&gt;find($id);</span>

<span class="x">if (!$user) {</span>
<span class="x">    return null;</span>
<span class="x">}</span>

<span class="x">$address = $user-&gt;getAddress();</span>

<span class="x">if (!$address) {</span>
<span class="x">    return null;</span>
<span class="x">}</span>

<span class="x">return $address-&gt;asText();</span>
</code></pre></div>
<p>Have you ever thought to yourself <em>there must be a better way</em>?</p>

<p>There is a better way.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">return $repo-&gt;find($id)</span>
<span class="x">             -&gt;map(method(&#39;getAddress&#39;))</span>
<span class="x">             -&gt;reject(null)</span>
<span class="x">             -&gt;map(method(&#39;asText&#39;));</span>
</code></pre></div>
<p>All of the null checks are gone. It is now just one single expression that
describes the calls.</p>

<p><strong>Option</strong> (aka Option Type) is a type that encodes an optional value. In
other words, you can either return something, or nothing. This is quite
similar to returning <code>null</code>. However, because everything is wrapped in an
<code>Option</code> object, you no longer need to have null checks everywhere.</p>

<p><center>
    <img src="/img/funlib-null/map-option.png" alt="map option">
</center></p>

<h2>Some wraps a value</h2>

<p>The previous example needs a bit of explanation. First of all,
<code>Repository::find()</code> is no longer returning <code>User|null</code>, it is now returning
<code>Option&lt;User&gt;</code>.</p>

<p>Some and None are subtypes of Option. These are the two possible types that
an Option can be.</p>

<p><strong>Some</strong> is an object that represents (and wraps) a value. You return a Some
when you are not returning null.</p>

<p><strong>None</strong> on the other hand represents the lack of a value. It is more or less
the equivalent of a <code>null</code>.</p>

<p>Here is an example of how <code>find</code> could be implemented to return an <code>Option</code>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use PhpOption\None;</span>
<span class="x">use PhpOption\Some;</span>

<span class="x">function find($id)</span>
<span class="x">{</span>
<span class="x">    $user = $this-&gt;em-&gt;find(User::class, $id);</span>

<span class="x">    if (!$user) {</span>
<span class="x">        return None::create();</span>
<span class="x">    }</span>

<span class="x">    return new Some($user);</span>
<span class="x">}</span>
</code></pre></div>
<p>Now it turns out that such a construction rather common. So there is a
shortcut to achieve the same thing.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use PhpOption\Option;</span>

<span class="x">function find($id)</span>
<span class="x">{</span>
<span class="x">    $user = $this-&gt;em-&gt;find(User::class, $id);</span>

<span class="x">    return Option::fromValue($user);</span>
<span class="x">}</span>
</code></pre></div>
<p>That&#39;s how you produce an Option object.</p>

<p><center>
    <img src="/img/funlib-null/produce.png" alt="produce">
</center></p>

<h2>Map</h2>

<p>A common way to <em>consume</em> an option is to use <code>map</code>. If you read the previous
post on iteration you may be confused at this point. Doesn&#39;t map refer to
mapping a function over a <em>sequence</em>?</p>

<p>Well, it turns out that many of the things that apply for sequences can be
generalized to support other types of containers too. Yes, a sequence is just
a container for a bunch of values.</p>

<p>An Option is just a container for an <em>optional</em> value. Just as you can map
over a sequence to create a new sequence, you can map over an Option to create
a new Option.</p>

<p>A different way of thinking about it is this. Instead of calling a function on
a value:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">fn($foo);</span>
</code></pre></div>
<p>You ask the Option container to apply a function for you:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$foo-&gt;map(&#39;fn&#39;);</span>
</code></pre></div>
<p>In case of <strong>Some</strong>, <code>map</code> takes the value out of the container, runs it
through the function that was passed in, then returns a new <strong>Some</strong>
containing the transformed value.</p>

<p><center>
    <img src="/img/funlib-null/map-some.png" alt="map some">
</center></p>

<hr>

<p>In the case of calling <code>map</code> on <strong>None</strong>, map will not call the provided
function at all. It will just return another <strong>None</strong> instead.</p>

<p><center>
    <img src="/img/funlib-null/map-none.png" alt="map none">
</center></p>

<p>This means you can call <code>map</code> on <strong>None</strong> as many times as you want, it will
just ignore the calls.</p>

<h2>Method</h2>

<p>Just as a little side-note, the <code>method</code> function in the original code sample
is this little helper (also present in <code>nikic/iter</code>):</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function method($name)</span>
<span class="x">{</span>
<span class="x">    return function ($obj) use ($name) {</span>
<span class="x">        return $obj-&gt;$name();</span>
<span class="x">    };</span>
<span class="x">}</span>
</code></pre></div>
<p>It creates a callable that will call the given method on any object it
receives.</p>

<h2>Reject</h2>

<p>The <code>reject</code> call is a negative filter. If the Option&#39;s value matches the
rejected value, it returns <strong>None</strong>.</p>

<p>Therefore, <code>reject(null)</code> will turn <code>null</code> values into <strong>None</strong>. At least it&#39;s
one way of doing that conversion.</p>

<blockquote>
<p>Note: Another way of dealing with this is to make <code>getAddress</code> return a
<strong>Some</strong> or <strong>None</strong> directly and using <code>flatMap</code> instead of <code>map</code>.</p>
</blockquote>

<h2>Get</h2>

<p><code>map</code> is used to transform an Option.</p>

<p>However, that will return a new Option object. So in order to get the actual
value out, you need to use <code>get</code> or one of its variants. This means that you
can use Option in most of the code internally, and then just call <code>get</code> at the
very end.</p>

<p>Going back to the original example, suppose that code were the body of a
<code>getAddressTextForId</code> function. The caller of that function will get an
Option, and will have to unwrap it.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$addressText = getAddressTextForId($id)-&gt;get();</span>
</code></pre></div>
<p><center>
    <img src="/img/funlib-null/get.png" alt="get">
</center></p>

<p>However, if this is a None, you will get a <code>RuntimeException</code> with message:
<em>None has no value</em>. In most cases, this is not a very nice way to fail.</p>

<p>For that reason, there are some alternatives, such as <code>getOrElse</code>, which takes
a default value to use in case of None.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$addressText = getAddressTextForId($id)</span>
<span class="x">                -&gt;getOrElse(&#39;No address provided.&#39;);</span>
</code></pre></div>
<p><center>
    <img src="/img/funlib-null/get-or-else.png" alt="get or else">
</center></p>

<p><code>getOrCall</code>, which takes a function that produces a value in case of None.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$addressText = getAddressTextForId($id)</span>
<span class="x">                -&gt;getOrCall(&#39;makeDefaultAddress&#39;);</span>
</code></pre></div>
<p>And also <code>getOrThrow</code>, which is the same as the default behaviour of <code>get</code>,
but allows you to throw a custom exception instead.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$addressText = getAddressTextForId($id)</span>
<span class="x">                -&gt;getOrThrow(new AddressNotFoundException());</span>
</code></pre></div>
<p>This covers the most common cases of unwrapping. There are a few more ways to
consume Option, look at the <code>Option</code> class if you&#39;re interested.</p>

<h2>Library</h2>

<p>The above example is based on <a href="https://twitter.com/schmittjoh">Johannes
Schmitt</a>&#39;s impressive
<a href="https://github.com/schmittjoh/php-option">PhpOption</a> library. Take a look at
the <a href="http://jmsyst.com/blog/simplifying-algorithms-with-options">blog post</a> he
published yesterday. The implementation of the library is strongly inspired by
the option type available in <a href="http://scala-lang.org">Scala</a>.</p>

<p>A very common problem in programming is that of null references. We often
forget to check if a value is null. In dynamically typed languages, we have
even less chance to know if a function could return null. And if we do put in
the null checks, they add horrible clutter to the code base.</p>

<p>The Option type solves this problem. It wraps values in a container. It forces
callers to <code>map</code> their transformations. It allows nulls (represented as None)
to propagate without any problems.</p>

<hr>

<p><center>
    Consider it.
</center></p>

<hr>

<p>The <strong>Option</strong> type is the same thing as the <strong>Maybe</strong> monad in Haskell. If
you&#39;re interested: <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a>,
<a href="http://blog.ircmaxell.com/2013/07/taking-monads-to-oop-php.html">Taking Monads to OOP PHP</a>.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Functional Library: Traversal</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/01/08/functional-library-traversal.html"/>
        <id>https://igor.io/2014/01/08/functional-library-traversal.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Functional Library: Traversal</h1>

<p>Traversing associative data structures in PHP is fun. Said no one ever.</p>

<p>The problem is a common one if you&#39;re processing any kind of data, for example
a response from a JSON API. You need to access some nested structure, but you
don&#39;t know if what you&#39;re accessing actually exists. So Maybe there is a
better way to handle this that does not involve PHP throwing notices in your
face.</p>

<p><center>
    <img src="/img/funlib-traversal/traversal.png" alt="traversal">
</center></p>

<h2>The dreaded notice</h2>

<p>This is what I&#39;m talking about:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$data = [&#39;people&#39; =&gt; [[&#39;name&#39; =&gt; &#39;Mario&#39;]]];</span>

<span class="x">var_dump($data[&#39;people&#39;][0][&#39;age&#39;]);</span>
</code></pre></div>
<p>Since the <code>age</code> property does not exist, it will give you this:</p>

<blockquote>
<p>PHP Notice:  Undefined index: age in foo.php on line n</p>
</blockquote>

<p>But surely you can get a default value for it. Right?</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$age = $data[&#39;people&#39;][0][&#39;age&#39;] ?: null;</span>
</code></pre></div>
<p>Wrong. You get the same notice. You could add an <code>@</code> in front of the acces,
but we will not go there because <code>@</code> is evil and must never be used. If you
don&#39;t believe me, go look up what <code>xdebug.scream</code> is.</p>

<p>So in order to do this correctly, you need to produce the following
copy-pasta:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$age = (isset($data[&#39;people&#39;][0][&#39;age&#39;])) ? $data[&#39;people&#39;][0][&#39;age&#39;] : null;</span>
</code></pre></div>
<p>Ultra-cringeworthy.</p>

<h2>get-in</h2>

<p>How often have you written this piece of code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$baz = (isset($data[&#39;foo&#39;][&#39;bar&#39;][&#39;baz&#39;])) ? $data[&#39;foo&#39;][&#39;bar&#39;][&#39;baz&#39;] : null;</span>
</code></pre></div>
<p>Have you ever thought to yourself <em>there must be a better way</em>?</p>

<p>There is a better way.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use function igorw\get_in;</span>

<span class="x">$baz = get_in($data, [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]);</span>
</code></pre></div>
<p>All of the duplication is gone. It is now just one single array that describes
the traversal.</p>

<p><strong>get-in</strong> is a function that takes an associative structure and a list of
keys that represent the nested traversal. Optionally, you can provide a
default value for non-existent keys, if none is provided it will return <code>null</code>
in that case.</p>

<p><center>
    <img src="/img/funlib-traversal/get_in.png" alt="get-in">
</center></p>

<h2>Library</h2>

<p>The above example is based on the <a href="https://github.com/igorw/get-in">igorw/get-in</a>
library.</p>

<p>In case you are wondering about the name, it is based on the <code>get-in</code> function
present in <a href="http://clojure.org">clojure</a>.</p>

<p>This library is quite tiny, by design. It solves one small problem. Next time
you are about to put in a monster <code>isset</code>, remember <code>get-in</code>.</p>

<hr>

<p>The first Donkey Kong was released in July 1981, Mario is 32 years old.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Functional Library: Iteration</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2014/01/06/functional-library-iter.html"/>
        <id>https://igor.io/2014/01/06/functional-library-iter.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Functional Library: Iteration</h1>

<p>Welcome to the functional library. This series will explore the state of
functional programming in PHP and highlight some libraries for common tasks.</p>

<p>This post will look at iteration and lazy operations based on a sequential
abstraction.</p>

<p><center>
    <img src="/img/funlib-iter/abc.png" alt="a b c">
</center></p>

<h2>Sequence</h2>

<p>Yes, you heard right. Sequential abstraction. That&#39;s a fancy shmancy word for
something we already have in PHP called <code>Iterator</code>. An iterator is really just
an object that represents a <strong>stream</strong> of values.</p>

<p>As a consumer of an iterator this really just means one thing. You can
<strong>foreach</strong> over it, like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">foreach ($users as $user) {</span>
<span class="x">    echo $user[&#39;name&#39;].&quot;\n&quot;;</span>
<span class="x">}</span>
</code></pre></div>
<p>But there&#39;s a few other properties of iterators that are quite interesting.
One in particular is <strong>laziness</strong>.</p>

<p>Laziness means that the iterator is able to fetch data on demand, which allows
you to process that data as it arrives (reducing latency) and only keep a bit
of it in memory at a time (reducing overall memory consumption).</p>

<blockquote>
<p>Note: Of course there are trade-offs and lazy-everything isn&#39;t always the
best solution. For example, disk seeks tend to take some time. So batching
reads in large enough chunks is still important for overall performance.</p>
</blockquote>

<p>Now. One problem is that once you use <code>foreach</code>, it will start consuming the
iterator on the spot. And thus you instantly lose the laziness. It is possible
to retain it though, and I will show you how.</p>

<h2>Map</h2>

<p>By using functional primitives that operate on sequences, you can describe
high-level transformations on sequences.</p>

<p>How often have you written this piece of code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$names = [];</span>
<span class="x">foreach ($users as $user) {</span>
<span class="x">    $names[] = $user[&#39;name&#39;];</span>
<span class="x">}</span>
</code></pre></div>
<p>Have you ever thought to yourself <em>there must be a better way</em>?</p>

<p>There is a better way.<sup><a id="ft-1-src"></a><a
href="#ft-1">1</a></sup></p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use function iter\map, iter\fn\index;</span>

<span class="x">$names = map(index(&#39;name&#39;), $users);</span>
</code></pre></div>
<p>All of the boilerplate is gone. It is now just one single line that describes
the transformation.</p>

<p>It gets better. The laziness is no longer broken. <code>map</code> does not take an array
of values, it takes an <em>iterable</em> of values. And it returns, you guessed it,
an <em>iterable</em> of mapped values.</p>

<p>How does it do that? We&#39;ll get there. But first, let&#39;s define what <code>map</code>
actually is.</p>

<p><strong>map</strong> is a function that takes a function and a sequence. It returns a new
sequence where the function has been called on every element of the input
sequence.</p>

<p><center>
    <img src="/img/funlib-iter/map.png" alt="map">
</center></p>

<p>Because you are forced to pass in a function, the resulting code will be more
modular. It&#39;s less convenient to nest things, like it was with <code>foreach</code>, and
I&#39;d argue that that is actually a good thing.</p>

<p>Another advantage is that <code>map</code> deals with values and returns you a new value
that is much safer than modifying existing arrays in a loop.</p>

<h2>Filter</h2>

<p>It turns out that <code>map</code> is just one of many high-level iteration functions. I will show you a few more.</p>

<p>How often have you written this piece of code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$admins = [];</span>
<span class="x">foreach ($users as $user) {</span>
<span class="x">    if (is_admin($user)) {</span>
<span class="x">        $admins[] = $user;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Have you ever thought to yourself <em>there must be a better way</em>?</p>

<p>There is a better way.<sup><a id="ft-2-src"></a><a
href="#ft-2">2</a></sup></p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use function iter\filter;</span>

<span class="x">$admins = filter(&#39;project\user\is_admin&#39;, $users);</span>
</code></pre></div>
<p>All of the boilerplate is gone. It is now just one single line that describes
the filtering.</p>

<p><strong>filter</strong> is a function that takes a predicate and a sequence. It returns a
new sequence that only contains the elements for which the predicate returned
true.</p>

<p><center>
    <img src="/img/funlib-iter/filter.png" alt="filter">
</center></p>

<p>Now remember every time you wrote a loop that did both filtering and mapping
in the body. Since there are now two separate functions for those, you can
separate those responsibilities. First filter, then map.</p>

<p>It gets better: Because both <code>filter</code> and <code>map</code> are lazy, the result of
chaining them will also be lazy. This allows you to compose lazy workflows
that only get processed on demand.</p>

<h2>Any</h2>

<p>How often have you written this piece of code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$admins_present = false;</span>
<span class="x">foreach ($users as $user) {</span>
<span class="x">    if (is_admin($user)) {</span>
<span class="x">        $admins_present = true;</span>
<span class="x">        break;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Have you ever thought to yourself <em>there must be a better way</em>?</p>

<p>There is a better way.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use function iter\any;</span>

<span class="x">$admins_present = any(&#39;acme\is_admin&#39;, $users);</span>
</code></pre></div>
<p>All of the boilerplate is gone. It is now just one single line that describes
the search.</p>

<p><strong>any</strong> is a function that takes a predicate and a sequence. It returns true
as soon as the predicate returns true. It returns false if the end of the
sequence is reached without finding a match.</p>

<p><center>
    <img src="/img/funlib-iter/any.png" alt="any">
</center></p>

<p>What did I tell you about laziness. Since <code>any</code> aborts as soon as it finds a
match, the rest of the sequence is not processed. This means that any calls
affecting the remaining elements do not need to be executed.</p>

<h2>nikic/iter</h2>

<p>All of the examples above are based on <a href="https://twitter.com/nikita_ppv">Nikita
Popov</a>&#39;s most excellent
<a href="https://github.com/nikic/iter">iter</a> library.</p>

<p>It makes heavy use of a new feature introduced in PHP 5.5 by Nikita himself:
Generators. Generators are the magic sauce that make everything lazy. You can
think of them as a sane way of writing iterators by suspending execution.</p>

<p>The <strong>iter</strong> library is awesome. It has <em>lots</em> of these iteration-related
functions that are very common in functional languages. I&#39;ll list a few:</p>

<ul>
<li>map</li>
<li>filter</li>
<li>reduce</li>
<li>zip</li>
<li>slice</li>
<li>take</li>
<li>drop</li>
<li>repeat</li>
<li>keys</li>
<li>values</li>
<li>any</li>
<li>all</li>
<li>flatten</li>
</ul>

<hr>

<p><center>
    Use them.
</center></p>

<hr>

<ol>
<li><p><a id="ft-1"></a>The <strong>use function</strong> awesomeness requires PHP 5.6. You can
refer to namespaced functions though. <a id="ft-1" href="#ft-1-src">↩</a></p></li>
<li><p><a id="ft-2"></a>This repetition is partially inspired by <a href="https://twitter.com/Crell">Larry
Garfield</a>&#39;s &quot;Functional PHP&quot; talk. <a id="ft-2"
href="#ft-2-src">↩</a></p></li>
</ol>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Shunting-yard</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/12/03/stack-machines-shunting-yard.html"/>
        <id>https://igor.io/2013/12/03/stack-machines-shunting-yard.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <style>
.formula2 {
    text-align: center;
    margin-top: 20px;
    margin-bottom: 30px;
    font-size: 3em;
}
</style>

<h1>Stack Machines: Shunting-yard</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html"><strong>shunting-yard</strong></a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>The RPN calculator (see previous post) was quite easy to implement, but in
order to use it, everything must be written backwards. Re-gaining infix
notation would be sweet.</p>

<p>Luckily, it looks like Dijkstra might have us covered with his <strong>shunting-yard
algorithm</strong>.</p>

<h2>Precedence</h2>

<p>Infix notation requires rules that define the precedence of operators. Going
back to the example of the previous post, the expression:</p>

<div class="formula2">1 + 2 * 3</div>

<p>Is to be interpreted as:</p>

<div class="formula2">1 + (2 * 3)</div>

<p>Because the <code>*</code> operator has precedence over the <code>+</code> operator. It binds more
strongly, the operator with the highest precedence groups its operands,
enclosing them in invisible parentheses.</p>

<h2>Associativity</h2>

<p>Another consideration is associativity<sup><a id="ft-1-src"></a><a
href="#ft-1">1</a></sup>. Generally speaking, associativity defines the
grouping of sub-expressions within the same level of precedence.</p>

<p>An example would be:</p>

<div class="formula2">1 + 2 + 3</div>

<p>Because <code>+</code> is associative, it can associate to the left and the right without
changing the meaning or result.</p>

<p>Associating to the left:</p>

<div class="formula2">((1 + 2) + 3)</div>

<p>Associating to the right:</p>

<div class="formula2">(1 + (2 + 3))</div>

<p>Both produce the same result: <code>6</code>.</p>

<hr>

<p>However, if we try the same with <code>-</code>, which is non-associative, it will not
produce consistent results.</p>

<p>If we take the expression:</p>

<div class="formula2">3 - 2 - 1</div>

<p>Associating to the left:</p>

<div class="formula2">((3 - 2) - 1)</div>

<p>Associating to the right:</p>

<div class="formula2">(3 - (2 - 1))</div>

<p>Left associativity produces <code>0</code>, right associativity produces <code>2</code>.</p>

<hr>

<p><strong>Conclusion:</strong> The correct associativity in this case is <em>left</em>, and the
result we would expect is <code>0</code>.</p>

<h2>Parentheses</h2>

<p>In addition to the implicit grouping between terms and expressions there can
also be explicit grouping through parentheses, that supersedes the two
previous forms of grouping.</p>

<p>These must also be taken into account when interpreting an expression.</p>

<h2>Compilers</h2>

<p>Enough math already. Let&#39;s talk about compilers.</p>

<p>A compiler takes a high-level language and translates it into some sort of
low-level machine code. Mathematical expressions are a subset of many
high-level programming languages.</p>

<p>In 1960, the dutch computer scientist Edsger Dijkstra was working on a
compiler for ALGOL60. Back then he referred to it as a &quot;translator&quot;. When
faced with the challenge of precedence, he came up with an algorithm for
resolving the precedence of these expressions.</p>

<p>This algorithm is known as the <strong>shunting-yard algorithm</strong>.</p>

<p>What it does is translate an expression from infix notation to something that
is easier to understand for a machine: <strong>Reverse-polish notation</strong>, or postfix
notation.</p>

<p>What this means is that we can take an expression as an input, then use
shunting-yard to <em>compile</em> that expression into RPN, and finally use the
<em>existing</em> RPN calculator to run it!</p>

<h2>Shunting yard</h2>

<blockquote>
<p>The translation process shows much resemblance to shunting at a three way
railroad junction in the following form.</p>

<p><center>
    <img src="/img/stack-machine-shunting-yard/shunting-yard.png" alt="shunting yard illustration from original paper">
</center></p>
</blockquote>

<p>I will not describe the shunting-yard algorithm in detail here. I will however
try to give a high-level description of what it does.</p>

<p>The process starts with a set of input tokens, an empty stack for temporarily
stashing tokens and an output queue for placing the output.</p>

<p>Based on pre-configured precedence and associativity rules, the tokens are
shunted from infix to postfix in a very memory efficient way.</p>

<p>Read <a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">the Wikipedia page</a>
or <a href="http://www.cs.utexas.edu/%7EEWD/MCReps/MR35.PDF">the original paper</a> for a
more thorough explanation.</p>

<h2>Implementation</h2>

<p>Without further ado, here is an implementation of shunting-yard:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function shunting_yard(array $tokens, array $operators)</span>
<span class="x">{</span>
<span class="x">    $stack = new \SplStack();</span>
<span class="x">    $output = new \SplQueue();</span>

<span class="x">    foreach ($tokens as $token) {</span>
<span class="x">        if (is_numeric($token)) {</span>
<span class="x">            $output-&gt;enqueue($token);</span>
<span class="x">        } elseif (isset($operators[$token])) {</span>
<span class="x">            $o1 = $token;</span>
<span class="x">            while (</span>
<span class="x">                has_operator($stack, $operators)</span>
<span class="x">                &amp;&amp; ($o2 = $stack-&gt;top())</span>
<span class="x">                &amp;&amp; has_lower_precedence($o1, $o2, $operators)</span>
<span class="x">            ) {</span>
<span class="x">                $output-&gt;enqueue($stack-&gt;pop());</span>
<span class="x">            }</span>
<span class="x">            $stack-&gt;push($o1);</span>
<span class="x">        } elseif (&#39;(&#39; === $token) {</span>
<span class="x">            $stack-&gt;push($token);</span>
<span class="x">        } elseif (&#39;)&#39; === $token) {</span>
<span class="x">            while (count($stack) &gt; 0 &amp;&amp; &#39;(&#39; !== $stack-&gt;top()) {</span>
<span class="x">                $output-&gt;enqueue($stack-&gt;pop());</span>
<span class="x">            }</span>

<span class="x">            if (count($stack) === 0) {</span>
<span class="x">                throw new \InvalidArgumentException(sprintf(&#39;Mismatched parenthesis in input: %s&#39;, json_encode($tokens)));</span>
<span class="x">            }</span>

<span class="x">            // pop off &#39;(&#39;</span>
<span class="x">            $stack-&gt;pop();</span>
<span class="x">        } else {</span>
<span class="x">            throw new \InvalidArgumentException(sprintf(&#39;Invalid token: %s&#39;, $token));</span>
<span class="x">        }</span>
<span class="x">    }</span>

<span class="x">    while (has_operator($stack, $operators)) {</span>
<span class="x">        $output-&gt;enqueue($stack-&gt;pop());</span>
<span class="x">    }</span>

<span class="x">    if (count($stack) &gt; 0) {</span>
<span class="x">        throw new \InvalidArgumentException(sprintf(&#39;Mismatched parenthesis or misplaced number in input: %s&#39;, json_encode($tokens)));</span>
<span class="x">    }</span>

<span class="x">    return iterator_to_array($output);</span>
<span class="x">}</span>

<span class="x">function has_operator(\SplStack $stack, array $operators)</span>
<span class="x">{</span>
<span class="x">    return count($stack) &gt; 0 &amp;&amp; ($top = $stack-&gt;top()) &amp;&amp; isset($operators[$top]);</span>
<span class="x">}</span>

<span class="x">function has_lower_precedence($o1, $o2, array $operators)</span>
<span class="x">{</span>
<span class="x">    $op1 = $operators[$o1];</span>
<span class="x">    $op2 = $operators[$o2];</span>
<span class="x">    return (&#39;left&#39; === $op1[&#39;associativity&#39;]</span>
<span class="x">        &amp;&amp; $op1[&#39;precedence&#39;] === $op2[&#39;precedence&#39;])</span>
<span class="x">        || $op1[&#39;precedence&#39;] &lt; $op2[&#39;precedence&#39;];</span>
<span class="x">}</span>
</code></pre></div>
<p>In this case, <code>$operators</code> is a mapping of operator symbols to some metadata
describing their precedence and associativity. A higher precedence number
means higher priority.</p>

<p>An example of such a mapping:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$operators = [</span>
<span class="x">    &#39;+&#39; =&gt; [&#39;precedence&#39; =&gt; 0, &#39;associativity&#39; =&gt; &#39;left&#39;],</span>
<span class="x">    &#39;-&#39; =&gt; [&#39;precedence&#39; =&gt; 0, &#39;associativity&#39; =&gt; &#39;left&#39;],</span>
<span class="x">    &#39;*&#39; =&gt; [&#39;precedence&#39; =&gt; 1, &#39;associativity&#39; =&gt; &#39;left&#39;],</span>
<span class="x">    &#39;/&#39; =&gt; [&#39;precedence&#39; =&gt; 1, &#39;associativity&#39; =&gt; &#39;left&#39;],</span>
<span class="x">    &#39;%&#39; =&gt; [&#39;precedence&#39; =&gt; 1, &#39;associativity&#39; =&gt; &#39;left&#39;],</span>
<span class="x">];</span>
</code></pre></div>
<p>While all of those associate to the left, there are operations that commonly
associate to the right, such as exponentiation. <code>2 ^ 3 ^ 4</code> should be
interpreted as <code>(2 ^ (3 ^ 4))</code><sup><a id="ft-2-src"></a><a
href="#ft-2">2</a></sup>.</p>

<p>Another common right-associative operator in programming languages is the
conditional ternary operator <code>?:</code><sup><a id="ft-3-src"></a><a
href="#ft-3">3</a></sup>.</p>

<h2>Compiling to RPN</h2>

<p>Time for an actual test run of this shunting yard infix to postfix compiler!</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$tokens = explode(&#39; &#39;, &#39;1 + 2 * 3&#39;);</span>
<span class="x">$rpn = shunting_yard($tokens, $operators);</span>
<span class="x">var_dump($rpn);</span>
</code></pre></div>
<p>It produces the sequence: <code>1 2 3 * +</code>. This looks correct, it should evaluate
to <code>7</code>.</p>

<p>But let&#39;s feed it to the existing calculator and see what happens.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$tokens = explode(&#39; &#39;, &#39;1 + 2 * 3&#39;);</span>
<span class="x">$rpn = shunting_yard($tokens, $operators);</span>
<span class="x">var_dump(execute($rpn));</span>
</code></pre></div>
<p>It agrees!</p>

<p>Now we have a fully-functional infix calculator that is the composition of an
infix-to-postfix compiler and a postfix calculator!</p>

<p>You will find that it supports not only the operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> and
<code>%</code>, but also parentheses that are completely removed from the resulting RPN.</p>

<p>In addition to that, adding support for new operators is as easy as adding an
entry to <code>$operators</code> and an implementation to the <code>switch</code> statement in
<code>execute</code>.</p>

<h2>Summary</h2>

<ul>
<li>Shunting-yard translates infix to postfix.</li>
<li>Implementation is quite straight-forward.</li>
<li>Hey, look! It&#39;s a little compiler!</li>
</ul>

<p><center>
    <img src="/img/stack-machine-shunting-yard/composite.png" alt="composite">
</center></p>

<hr>

<ol>
<li><p><a id="ft-1"></a>Not to be confused with <em>commutativity</em> which defines
whether the order of operands matters. <a id="ft-1" href="#ft-1-src">↩</a></p></li>
<li><p><a id="ft-2"></a>I used the <code>^</code> symbol for exponentiation, in many
languages something like <code>**</code> is used instead. <a id="ft-2"
href="#ft-2-src">↩</a></p></li>
<li><p><a id="ft-3"></a>Too bad PHP messed that one up. <a id="ft-3"
href="#ft-3-src">↩</a></p></li>
</ol>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html"><strong>shunting-yard</strong></a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: RPN calculator</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/12/02/stack-machines-rpn.html"/>
        <id>https://igor.io/2013/12/02/stack-machines-rpn.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <style>
.formula {
    text-align: center;
    margin-top: 25px;
    margin-bottom: 45px;
    font-size: 6em;
}
.formula2 {
    text-align: center;
    margin-top: 20px;
    margin-bottom: 30px;
    font-size: 3em;
}
</style>

<h1>Stack Machines: RPN calculator</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html"><strong>rpn-calculator</strong></a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>A very simple form of stack machine is a so-called RPN calculator. It is quite
easy to understand and implement, and uses the same model that is used by most
virtual machines. As such it&#39;s very useful to study such a device in order to
learn more about how VMs and actual computers work.</p>

<h2>Infix Notation</h2>

<p>When describing mathematical formulae, it is common to use infix notation.
Infix means that the operator is <em>in between</em> the two operands.</p>

<p>For example:</p>

<div class="formula">1 + 1</div>

<p>This notation has also been adopted by most popular programming
languages<sup><a id="ft-1-src"></a><a href="#ft-1">1</a></sup>.</p>

<p>One of the downsides of infix notation is that certain expressions such as
<code>1 + 2 * 3</code> are ambiguous and require special precedence rules and bracketing
to be interpreted correctly.</p>

<p>Two alternate notations exist that do not have this limitation. <em>Polish
notation</em>, which is known as <em>prefix notation</em> and &mdash; you guessed it
&mdash; <em>Reverse polish notation</em>.</p>

<h2>Reverse Polish Notation</h2>

<p><strong>RPN</strong> stands for reverse polish notation. Another name for it is <em>postfix
notation</em>. In simple terms, the operator comes after the operands.</p>

<p>For example:</p>

<div class="formula">1 1 +</div>

<p>This may look backwards at first<sup><a id="ft-2-src"></a><a
href="#ft-2">2</a></sup>, but it is so much easier to implement a calculator
for it.</p>

<p>The previous example of <code>1 + 2 * 3</code> can be unambiguously represented as:</p>

<div class="formula2">2 3 * 1 +</div>

<p>The arity of <code>+</code> is fixed at 2: it takes exactly two arguments.</p>

<h2>Stack</h2>

<p>It may not be obvious, but the algorithm for processing this stream of numbers
and operations is based on a stack. There are two calculations happening. The
first is <code>2 3 *</code> which produces a result.</p>

<p>But that result is not just thrown away, it is stored on a stack, allowing the
next operation to use that data, which is exactly what the <code>... 1 +</code> does.</p>

<ul>
<li>A number just means <em>push this number onto the stack</em>.</li>
<li><code>+</code> means <em>pop 2 elements from the stack, add them, push the result back</em>.</li>
<li><code>*</code> does the same as <code>+</code> but for multiplication.</li>
</ul>

<p>The symbols are <strong>instructions</strong>, the list above describes the <strong>instruction
set</strong>.</p>

<p>The following drawing illustrates how the instructions affect the stack, which
values get pushed onto and which ones get popped off of the stack.</p>

<p><center>
    <img src="/img/stack-machine-rpn/rpn.png" alt="rpn instructions">
</center></p>

<hr>

<p>This also means that you can stack up a few values before actually processing
them.</p>

<p>For example:</p>

<div class="formula2">1 1 1 1 + + +</div>

<p>Will first push the number <code>1</code> four times. The first <code>+</code> will pop two of them,
add them and push the resulting <code>2</code>. The second <code>+</code> will pop that <code>2</code> and
another of the <code>1</code>s, add them, push <code>3</code>. The final <code>+</code> pops the <code>3</code>, pops the
<code>1</code>, also adds them and pushes the final result, a <code>4</code>.</p>

<h2>Implementation</h2>

<p>Now that we have the specs down, let&#39;s implement this RPN calculator. It takes
a bunch of instructions, executes them, and returns what is on top of the
stack: the result.</p>

<p>Here it is, in all its glory<sup><a id="ft-3-src"></a><a
href="#ft-3">3</a></sup>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function execute(array $ops)</span>
<span class="x">{</span>
<span class="x">    $stack = new \SplStack();</span>

<span class="x">    foreach ($ops as $op) {</span>
<span class="x">        if (is_numeric($op)) {</span>
<span class="x">            $stack-&gt;push((int) $op);</span>
<span class="x">            continue;</span>
<span class="x">        }</span>

<span class="x">        switch ($op) {</span>
<span class="x">            case &#39;+&#39;:</span>
<span class="x">                $stack-&gt;push($stack-&gt;pop() + $stack-&gt;pop());</span>
<span class="x">                break;</span>
<span class="x">            case &#39;-&#39;:</span>
<span class="x">                $n = $stack-&gt;pop();</span>
<span class="x">                $stack-&gt;push($stack-&gt;pop() - $n);</span>
<span class="x">                break;</span>
<span class="x">            case &#39;*&#39;:</span>
<span class="x">                $stack-&gt;push($stack-&gt;pop() * $stack-&gt;pop());</span>
<span class="x">                break;</span>
<span class="x">            case &#39;/&#39;:</span>
<span class="x">                $n = $stack-&gt;pop();</span>
<span class="x">                $stack-&gt;push($stack-&gt;pop() / $n);</span>
<span class="x">                break;</span>
<span class="x">            case &#39;%&#39;:</span>
<span class="x">                $n = $stack-&gt;pop();</span>
<span class="x">                $stack-&gt;push($stack-&gt;pop() % $n);</span>
<span class="x">                break;</span>
<span class="x">            default:</span>
<span class="x">                throw new \InvalidArgumentException(sprintf(&#39;Invalid operation: %s&#39;, $op));</span>
<span class="x">                break;</span>
<span class="x">        }</span>
<span class="x">    }</span>

<span class="x">    return $stack-&gt;top();</span>
<span class="x">}</span>
</code></pre></div>
<p>As you can see, the implementation is trivial. It is simply a matter of
looping over the instructions, pushing numbers onto the stack and switching on
the individual instructions to do the right calculation.</p>

<p>A quick test run:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$rpn = &#39;2 3 * 1 +&#39;;</span>
<span class="x">$ops = explode(&#39; &#39;, $rpn);</span>
<span class="x">var_dump(execute($ops));</span>
</code></pre></div>
<p>Confirms that it works! It returns the value <code>7</code> as expected.</p>

<p>An RPN calculator is quite a trivial piece of software. And yet the mechanisms
it uses emulate a subset of what an actual computer does.</p>

<p>Since this stack machine has no means of random access storage and no
conditional branching instructions, it is still limited in its computational
power. It is comparable to a pushdown automaton.</p>

<h2>Summary</h2>

<ul>
<li>RPN is kind of backwards.</li>
<li>Implementing an RPN calculator is easy.</li>
<li>Hey, look! It&#39;s a little computer!</li>
</ul>

<hr>

<ol>
<li><p><a id="ft-1"></a>There are some exceptions, including stack based languages
such as <em>Forth</em>, <em>Factor</em> or <em>Gershwin</em>. <a id="ft-1" href="#ft-1-src">↩</a></p></li>
<li><p><a id="ft-2"></a><a href="http://xkcd.com/645/">Mandatory XKCD</a>. <a id="ft-2"
href="#ft-2-src">↩</a></p></li>
<li><p><a id="ft-3"></a>This implementation is roughly based on the RPN calculator
from <a href="http://cm.bell-labs.com/cm/cs/cbook/">The C Programming Language</a> by
Brian W. Kernighan and Dennis M. Ritchie. <a id="ft-3"
href="#ft-3-src">↩</a></p></li>
</ol>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html">fundamentals</a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html"><strong>rpn-calculator</strong></a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Git Branching Model</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/10/21/git-branching-model.html"/>
        <id>https://igor.io/2013/10/21/git-branching-model.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Git Branching Model</h1>

<p>Since the original <a href="http://nvie.com/git-model/">A successful Git branching model</a>
post from <a href="https://twitter.com/nvie">nvie</a> there have been numerous attempts to
simplify his model. While it is a very solid branching strategy, you do end up
with a ton of branches that you may not actually need.</p>

<p>This post aims to document the general strategy that has been in use by a
subset of the PHP community (and likely other communities too), and thus also
plays nice with <a href="http://semver.org/">semantic versioning</a> and composer.</p>

<blockquote>
<p>Note: This model is intended for OSS projects. For products, I would
recommend something <a href="https://gist.github.com/jbenet/ee6c9ac48068889b0912">like
this</a>.</p>
</blockquote>

<p><center>
    <img src="/img/git-branching/branches.png" alt="branches">
</center></p>

<h2>Versions</h2>

<p>As defined by semantic versioning, versions are in the format
MAJOR.MINOR.PATCH.</p>

<p><center>
    <img src="/img/git-branching/version.png" alt="version">
</center></p>

<h2>Branches</h2>

<p>You generally have one branch per minor version. This means branches like:
<code>1.0</code>, <code>1.1</code>, <code>1.2</code>, <code>2.0</code>, <code>2.1</code>, <code>2.2</code>, etc. The &quot;latest&quot; version is
represented by the <code>master</code> branch. This is just a common convention.</p>

<p>But &quot;latest&quot; can mean one of two things. Either it is the development of a yet
unreleased version. Such as <code>1.1-dev</code> which will eventually become <code>v1.1.0</code>.
Or alternatively there could already be a release on <code>1.1</code>, and this would be
the development of the <em>next</em> release, such as <code>v1.1.1</code>.</p>

<h2>Tags</h2>

<p>Releases are identified by tags. A tag represents a patch version and points
to a commit on the branch of that minor version. The <code>v1.0.0</code> tag points to a
commit on the <code>1.0</code> branch.</p>

<p>Unlike nvie&#39;s model, this one does not have a dedicated branch for releases,
since the releases can be inferred from the tags.</p>

<h2>Bugfixes</h2>

<p>In many cases there will be more than one branch active at the same time.
Bugfixes should generally target the latest supported branch. For example, if
the <code>1.0</code> branch is no longer being maintained, but <code>1.1</code> and <code>1.2</code> are
active, then a bugfix should be applied to <code>1.1</code>.</p>

<p>Because <code>1.2</code> is a downstream branch of <code>1.1</code> it will get those bugfixes as
well. Just periodically merge <code>1.1</code> into <code>1.2</code> and all will be fine.</p>

<h2>Features</h2>

<p>According to semantic versioning, new features should result in a new minor
version. If the latest release is <code>v1.0.5</code>, then there should be a <code>master</code>
branch representing <code>1.1</code>. New features should be merged into <code>master</code>. Once
<code>v1.1.0</code> is released, <code>1.1</code> should be branched off of <code>master</code>, and <code>master</code>
should become <code>1.2</code>.</p>

<p>For smaller projects this rule can be relaxed and new features can be merged
into a branch that already has releases. But keep in mind that it makes it
harder for users to track which version introduced a particular feature.</p>

<h2>Topic branches</h2>

<p>A workflow for contributions is usually based on topic branches. Instead of
committing to the particular version branch directly, a separate branch is
made for a particular feature or bugfix where that change can be developed in
isolation. When ready, that topic branch is then merged into the version
branch.</p>

<p><center>
    <img src="/img/git-branching/topic.png" alt="topic">
</center></p>

<p>If a change spans more than one commit then this allows keeping track of what
was merged when, and also allows it to be reverted in one go if needed.</p>

<p>More importantly, it allows new features to be prototyped independently
without making a commitment to those changes.</p>

<p>Topic branches are usually very short-lived and are discarded after being
merged.</p>

<h2>That&#39;s it</h2>

<p>This post really just documents the process that many of us have been using
for our projects. If you have anything to add, please share it in the
comments.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Dependency Responsibility</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/09/24/dependency-responsibility.html"/>
        <id>https://igor.io/2013/09/24/dependency-responsibility.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Dependency Responsibility</h1>

<p>Convenience is great, and many tools provide you with it. Dependency managers
are one such tool that allow you to easily install any library instantly. But
you should not use them blindly. There are more important considerations than
<em>&quot;I want foo right now&quot;</em>. Which type of foo do you want, and how long do you
want it to last?</p>

<h2>Hairball as a Service</h2>

<p>You can get everything as a service these days. Your software, your
infrastructure, your platform, your development, your design. You click one
button and get a whole stack of fluff that you cannot understand or even peek
into for that matter.</p>

<p>It sounds like a sweet deal. You don&#39;t have to care about how things work. It
just works.</p>

<p>Except you&#39;re forgetting that it&#39;s software. And software breaks. How do you
fix it? By turning it off and on again. That works most of the time, but
eventually you will hit that monster bug that makes your system completely
FUBAR. And now there is nothing you can do about it, because you are not in
charge.</p>

<h2>Dependencies</h2>

<p>Overly relying on convenience also exists in the small. You have a requirement
in your software project, so you install a pre-made library that solves the
problem for you. It&#39;s usually just one command away.</p>

<p>As far as you&#39;re concerned, this library is a black box. You don&#39;t care how it
works. You just install it and use it.</p>

<p>Except you&#39;re forgetting that it&#39;s software. And software breaks. How do you
fix it?</p>

<p>At this point you may have to fix a bug in the library. Writing correct
programs is difficult, submitting some patches upstream is not a big deal, and
helps everyone else using that package as well.</p>

<p>But what if:</p>

<ul>
<li>That bug broke your website, negatively impacting your sales</li>
<li>It was a security issue that compromised your customers&#39; data</li>
<li>It was a performance problem that made your site go down completely</li>
</ul>

<h2>Liability</h2>

<p>Who is liable in open source? Whoever wrote the library that you are using?
<strong>No.</strong></p>

<p>Every OSS license clearly states that the author is not liable and that there
is no warranty. If the software you installed makes your server go up in
smoke, it is <em>your</em> fault.</p>

<p>The upside of OSS is that you <em>are</em> in charge, and you actually <em>can</em> fix
things when they break. Also, you can prevent them from breaking in the first
place.</p>

<h2>Responsibility</h2>

<p>When you install a library, <em>you</em> are responsible for the code in that
library. You are also responsible for the dependencies of your dependencies.
For any code that you run, it is your responsibility to ensure that it
operates correctly.</p>

<p>This means that you have to review all of the code that you put into
production. And make sure it does not contain any destructive bugs or security
issues. As a by-product, you will properly understand that code, and will be
able to debug and fix it if things do go wrong.</p>

<h2>Trust</h2>

<p>Obviously it is impossible to review and fully understand every bit of code we
run. You probably do not vet the source code of the linux kernel, your
operating system utilities, the webserver of your choosing, your language
runtime.</p>

<p>It is simply too much code that moves too quickly. So instead you decide to
trust the maintainers of those packages not to mess it up. Since there is a
community who peer-reviews, hopefully most issues will be caught.</p>

<p>It is possible to do that for your library dependencies as well. But it should
be a conscious decision. A well maintained package with a strong community and
strong BC guarantees is likely to be more trustworthy than some random
library by some random person on the internets.</p>

<p>But even if it is well maintained, think twice before you trust a code base.
Even popular packages can be huge piles of garbage.</p>

<h2>Conclusion</h2>

<ul>
<li>You are responsible for all the code you run in production.</li>
<li>Keep stability, security and performance in mind.</li>
<li>Think twice before you trust a package blindly.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Composer Vendor Directory</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/09/04/composer-vendor-directory.html"/>
        <id>https://igor.io/2013/09/04/composer-vendor-directory.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Composer Vendor Directory</h1>

<p>A common question in composer support is to install packages into a directory
other than <code>vendor</code>. I want to explain why that is a bad idea.</p>

<p>Achtung: Might be a little ranty.</p>

<p><center>
    <img src="/img/binders-vendor.png" alt="binders full of vendor">
</center></p>

<h2>One True Vendor</h2>

<p>You don&#39;t own your vendor directory. When you use composer, you are waiving
your right to decide where things go. This is for your own good. You should
not know where composer puts stuff, and frankly, you should not care.</p>

<p>Composer makes it extremely hard for you to install a package anywhere else
than the one true vendor directory. And this is by design. And there is a good
reason for that.</p>

<p>Composer targets the PHP community. It aims to grow the library space.
Libraries should be small, focused, flexible and avoid side-effects. The user
should be in control.</p>

<p>What sort of side-effects? Don&#39;t create files unless the user asked for them.
Don&#39;t use global state such as superglobals. Don&#39;t call echo, header or exit.
Don&#39;t depend on the location of things in the filesystem, the network or
otherwise.</p>

<h2>Autoloading</h2>

<p>The loading of classes (and functions, etc.) is no exception to this rule. As
a user, I want to specify my dependencies, run <strong>one command</strong>, include <strong>one
file</strong>, and be done with it. I don&#39;t want to care about where stuff is
located, set up include paths, manually include files, define my own autoload
mappings.</p>

<p>Autoloading solves this problem. If every library defines its own rules for
autoloading, PHP takes care of the rest. Libraries don&#39;t have to know where
they or other libs are located. The user is in control.</p>

<p>A composer-managed application should have exactly one single include
statement. A require <code>vendor/autoload.php</code> in the front controller.</p>

<p>A library should have zero.</p>

<h2>Single directory</h2>

<p>Putting everything into one directory just makes sense.</p>

<p>First off, debugging composer issues. Composer has come a long way, but
strange things can happen sometimes. Maybe some files are in an inconsistent
state, maybe someone deleted something accidentally, maybe there was a bug in
the solver. The point is, composer is not operating correctly due to the state
of the vendor directory.</p>

<p>You can just try again by <code>rm -rf vendor &amp;&amp; composer install</code>. You don&#39;t have
to keep track of zillions of possible directories, it&#39;s all in one place.</p>

<p>Second, deployment. When deploying, I want the stuff right there. I want it in
the right place, I want to be able to push it all at once. With a single
directory it doesn&#39;t even matter where I run <code>composer install</code>, because the
result is consistent and easy to manage as part of the build and deployment
process.</p>

<p>Third, version control. No need to litter your gitignore with random garbage.</p>

<h2>Isolation</h2>

<p>Remember PEAR? Not only was PEAR itself installed into some global-ish
location (if you were lucky enough to actually successfully install it), but
all libraries installed via PEAR were global. If you had two projects
depending on conflicting versions of the same package, you were screwed.</p>

<p>Enough of that. That&#39;s why composer is a dependency manager and not a package
manager. It manages deps per-project, it isolates them. It disallows sharing
the same package directory between projects.</p>

<p>Yes, that means you potentially get two copies, but trust me, it&#39;s totally
worth it.</p>

<h2>Excuses</h2>

<p>Here are some reasons why you would need to move your packages to a specific
location:</p>

<ul>
<li><p><strong>Legacy</strong>: You have some legacy project that heavily relies on the location
of files. You cannot break BC. Recommendation: Let it die.</p></li>
<li><p><strong>Frontend</strong>: You have some CSS or JS files that must go to the web
directory. Recommendation: Use symlinks or copy them over.</p></li>
<li><p><strong>I want to</strong>: No you don&#39;t. Now play nice, and autoload.</p></li>
</ul>

<p>If you must, there are some tricks such as <a href="http://getcomposer.org/doc/articles/custom-installers.md">custom
installers</a> or
<a href="http://getcomposer.org/doc/articles/scripts.md">scripts</a>.</p>

<p>But remember, if you use them you are hurting the ecosystem. And I will get
mad.</p>

<h2>Conclusion</h2>

<p>The vendor directory is a black box. The public API is <code>vendor/autoload.php</code>.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>How heavy is Silex?</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/09/02/how-heavy-is-silex.html"/>
        <id>https://igor.io/2013/09/02/how-heavy-is-silex.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>How heavy is Silex?</h1>

<p>Quite often silex has been described as heavy or bloated. It&#39;s time to put
this myth to rest.</p>

<p><center>
    <img src="/img/omnomnom.png" alt="symfony component cookie monster">
</center></p>

<h2>Quotes</h2>

<blockquote>
<p>Silex: The world&#39;s largest microframework.</p>

<p>Silex: All the bloat of Symfony but with only half the features.</p>

<p>Silex is so big: It has more lines of code than your project.</p>
</blockquote>

<h2>Micro-framework</h2>

<p>What an excellent buzzword! Let&#39;s face it, this is an overloaded and mostly
nebulous term.</p>

<p>I don&#39;t think it&#39;s possible to clearly define what it means. However, I want
to give a definition of what it means in the context of silex. Silex is a
route builder, a router, a DI container, based on Symfony2 components.</p>

<p>But the real answer lies in what silex <em>doesn&#39;t</em> do. Unlike a framework, silex
does not provide any conventions. That means that you are forced to architect
your own code base. It gives you a lot of power and responsibility.</p>

<p>So what does micro mean? Is it about lines of code? Amount of dependencies?
No, it&#39;s not.</p>

<p>While I agree that less lines of code and less dependencies are desirable,
that is not the top priority. Micro means that silex exposes a minimal
interface. It makes a minimal amount of decisions for you. Everything else
follows from that principle.</p>

<h2>Dependencies</h2>

<p>So first of all, how many dependencies does silex have? As of right now,
<strong>7</strong>.</p>

<p>Here they are, in all of their glory:</p>

<ul>
<li>pimple/pimple</li>
<li>psr/log</li>
<li>symfony/debug</li>
<li>symfony/event-dispatcher</li>
<li>symfony/http-kernel</li>
<li>symfony/http-foundation</li>
<li>symfony/routing</li>
</ul>

<p>Each one of them does one specific thing. Each is reasonably small in size.</p>

<p>Of course, silex could have implemented all of those features itself. But it
would mean less re-use, less battle-tested libraries, less interoperability.</p>

<p>To put this into perspective, the Symfony2 standard edition installs <strong>60</strong>
packages, 41 of which are symfony components. The ZF2 skeleton installs all of
the <strong>49</strong> components. Laravel4 ships with <strong>58</strong> packages, 28 of which are
laravel components.</p>

<p>The point of this exercise is not to bash other frameworks. It&#39;s just to show
that I&#39;m not lying when I say silex has an add-what-you-need philosophy.</p>

<h2>Number of classes, lines of code</h2>

<p>Even though keeping lines of code down is not the primary goal of silex, we
made sure not to include code that is not needed. So what exactly do you get
when you use silex?</p>

<p>I grabbed the fine code-measuring tool <code>cloc</code> ran some analysis. After
removing tests, the entire code base (including deps) consists of <strong>16831
NCLOC</strong> in <strong>280 classes</strong>. The whole tree (including tests) amounts to <strong>3.5
MiB</strong>.</p>

<p>However, during a standard request only a fraction of that code is actually
loaded. The following <strong>50 classes</strong> are actually used:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">* Silex\Application
* Silex\Controller
* Silex\ControllerCollection
* Silex\ControllerResolver
* Silex\EventListener\ConverterListener
* Silex\EventListener\LocaleListener
* Silex\EventListener\MiddlewareListener
* Silex\EventListener\StringToResponseListener
* Silex\ExceptionHandler
* Silex\LazyUrlMatcher
* Silex\RedirectableUrlMatcher
* Silex\Route
* Symfony\Component\EventDispatcher\Event
* Symfony\Component\EventDispatcher\EventDispatcher
* Symfony\Component\EventDispatcher\EventDispatcherInterface
* Symfony\Component\EventDispatcher\EventSubscriberInterface
* Symfony\Component\HttpFoundation\FileBag
* Symfony\Component\HttpFoundation\HeaderBag
* Symfony\Component\HttpFoundation\ParameterBag
* Symfony\Component\HttpFoundation\Request
* Symfony\Component\HttpFoundation\Response
* Symfony\Component\HttpFoundation\ResponseHeaderBag
* Symfony\Component\HttpFoundation\ServerBag
* Symfony\Component\HttpKernel\Controller\ControllerResolver
* Symfony\Component\HttpKernel\Controller\ControllerResolverInterface
* Symfony\Component\HttpKernel\Event\FilterControllerEvent
* Symfony\Component\HttpKernel\Event\FilterResponseEvent
* Symfony\Component\HttpKernel\Event\GetResponseEvent
* Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent
* Symfony\Component\HttpKernel\Event\KernelEvent
* Symfony\Component\HttpKernel\Event\PostResponseEvent
* Symfony\Component\HttpKernel\EventListener\LocaleListener
* Symfony\Component\HttpKernel\EventListener\ResponseListener
* Symfony\Component\HttpKernel\EventListener\RouterListener
* Symfony\Component\HttpKernel\HttpKernel
* Symfony\Component\HttpKernel\HttpKernelInterface
* Symfony\Component\HttpKernel\KernelEvents
* Symfony\Component\HttpKernel\TerminableInterface
* Symfony\Component\Routing\CompiledRoute
* Symfony\Component\Routing\Matcher\RedirectableUrlMatcher
* Symfony\Component\Routing\Matcher\RedirectableUrlMatcherInterface
* Symfony\Component\Routing\Matcher\UrlMatcher
* Symfony\Component\Routing\Matcher\UrlMatcherInterface
* Symfony\Component\Routing\RequestContext
* Symfony\Component\Routing\RequestContextAwareInterface
* Symfony\Component\Routing\Route
* Symfony\Component\Routing\RouteCollection
* Symfony\Component\Routing\RouteCompiler
* Symfony\Component\Routing\RouteCompilerInterface
</code></pre></div>
<p>Those 50 classes have a total of <strong>4018 NCLOC</strong>.</p>

<p>Is that more than something like slim, limonade or breeze? Yes. By a factor of
2-4. Does that matter? I don&#39;t think so.</p>

<p>It is still sufficiently small. I consider re-use, isolation and interop
provided by silex better than in the other listed projects.</p>

<h2>Minimal interface</h2>

<p>For the most part you will only ever deal with the following types:</p>

<ul>
<li>Silex\Application</li>
<li>Silex\Controller</li>
<li>Silex\Route</li>
<li>Symfony\Component\HttFoundation\Request</li>
<li>Symfony\Component\HttFoundation\Response</li>
<li>Pimple</li>
</ul>

<p>Learn them, and you can effectively use silex.</p>

<h2>Summary</h2>

<ul>
<li>Minimal interface &gt; minimal lines of code.</li>
<li>Silex is quite lightweight.</li>
<li>The entire public API consists of 5 classes.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stack Machines: Fundamentals</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/08/28/stack-machines-fundamentals.html"/>
        <id>https://igor.io/2013/08/28/stack-machines-fundamentals.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stack Machines: Fundamentals</h1>

<p><a href="/2013/08/28/stack-machines-fundamentals.html"><strong>fundamentals</strong></a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

<p>This series will explore design and implementation of virtual stack machines.
That is, virtual machines whose operations are based on a stack. This post
will cover the basics.</p>

<h2>The stack, a data structure</h2>

<p>So what is a stack? It&#39;s a data structure with two operations: <strong>push</strong> and
<strong>pop</strong>. You can push values on the stack, and pop them from the stack. This
happens in LIFO (last in, first out) order.</p>

<p><center>
    <img src="/img/stack-machine/stack-ops.png" alt="stack operations">
</center></p>

<p>This data type is fundamental to the design of a stack machine. Implementing a
stack is quite easy, especially when you have an <strong>array</strong> that holds a list
of discretely-sized cells and is index-addressable.</p>

<p>In addition to the array that is used for data storage, you will need to have
a <strong>stack pointer</strong>. Which just points to the current head of the stack, and
gets incremented and decremented as elements are pushed and popped.</p>

<p>Here is a basic implementation in C:</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="n">sp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">double</span> <span class="n">val</span><span class="p">[</span><span class="n">MAXVAL</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="kt">double</span> <span class="n">f</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">val</span><span class="p">[</span><span class="n">sp</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">double</span> <span class="nf">pop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">val</span><span class="p">[</span><span class="o">--</span><span class="n">sp</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>Many languages already have such a data structure built in. PHP has
<code>array_push</code> and <code>array_pop</code> functions and an <code>SplStack</code> class. ECMAScript has
<code>push</code> and <code>pop</code> methods on the array prototype.</p>

<h2>Instructions</h2>

<p>In order to be actually useful, a stack machine also needs instructions. It
needs to define an instruction set, and it needs a way to store and access
those instructions.</p>

<p><center>
    <img src="/img/stack-machine/instructions.png" alt="instructions">
</center></p>

<p>Instructions usually pop one or more values from the stack, do some
computation, and push the result.</p>

<p>An instruction set can contain operations such as <strong>push</strong> for pushing values,
arithmetic like <strong>add</strong>, <strong>subtract</strong>, <strong>multiply</strong>, <strong>divide</strong>, etc., control
flow that affects which instruction is executed, or even host-specific
operations such as I/O.</p>

<h2>Execution</h2>

<p>In the above example there are three instructions:</p>

<ul>
<li>Push the value 3</li>
<li>Push the value 4</li>
<li>Pop two values and add them, push the result</li>
</ul>

<p>The machine executes them in sequence, reading the instructions one by one.
Usually there is an <strong>instruction pointer</strong> (sometimes also called <strong>program
counter</strong>) that points to the next instruction, and gets incremented after
every operation.</p>

<p>The state of the stack changes during the execution of those steps. The final
state should hopefully be something like this:</p>

<p><center>
    <img src="/img/stack-machine/stack-7.png" alt="stack with result 7">
</center></p>

<p>Usually, when the end of the instructions is reached, the value at the top of
the stack is returned to the caller. In this case, the value <strong>7</strong> would be
popped from the stack and returned.</p>

<h2>Summary</h2>

<ul>
<li>A virtual stack machine consists of a stack and instructions.</li>
<li>Stack is a data structure with two operations: push and pop.</li>
<li>Instructions use the values on the stack.</li>
</ul>

<hr>

<p><a href="/2013/08/28/stack-machines-fundamentals.html"><strong>fundamentals</strong></a> &lt;&lt;
<a href="/2013/12/02/stack-machines-rpn.html">rpn-calculator</a> &lt;&lt;
<a href="/2013/12/03/stack-machines-shunting-yard.html">shunting-yard</a> &lt;&lt;
<a href="/2014/11/29/stack-machines-io.html">io</a> &lt;&lt;
<a href="/2014/11/30/stack-machines-jumps.html">jumps</a> &lt;&lt;
<a href="/2014/12/01/stack-machines-conditionals.html">conditionals</a> &lt;&lt;
<a href="/2014/12/02/stack-machines-comments.html">comments</a> &lt;&lt;
<a href="/2014/12/03/stack-machines-calls.html">calls</a> &lt;&lt;
<a href="/2014/12/04/stack-machines-variables.html">variables</a> &lt;&lt;
<a href="/2014/12/05/stack-machines-stack-frames.html">stack-frames</a> &lt;&lt;
<a href="/2014/12/12/stack-machines-heap.html">heap</a> &lt;&lt;
<a href="/2014/12/18/stack-machines-compilers.html">compilers</a></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Evolving syntax</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/07/26/evolving-syntax.html"/>
        <id>https://igor.io/2013/07/26/evolving-syntax.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Evolving syntax</h1>

<p>As languages become more widely used and the needs of their users evolve, they
often grow. Some languages are designed to support such changing needs, but
most of them are not.</p>

<p>This leads to rather intrusive changes to the language itself; to both its
syntax and its semantics.</p>

<h2>Outdated distribution</h2>

<p>A very common problem that many software projects have is lack of adoption of
new versions. Browsers are an excellent example of this, But it exists on the
server as well. On one hand you have linux distributions, who tend to be
rather conservative. On the other hand there&#39;s hosting companies, who don&#39;t
want to invest in maintaining support for multiple platforms.</p>

<p>This leads to this recursive problem of hosting companies not upgrading
because they don&#39;t have to, and software not requiring newer versions of their
programming language, because they don&#39;t want to lose their users.</p>

<p>The longer your dependency chain is, the more you suffer from this. If you are
using framework X, which depends on PHP 5.3, which depends on a certain
compiler and a set of C libraries, you need to wait for every part of the
chain to be updated before you can start using it.</p>

<p>Another way of looking at it is: The more extensible those low-level pieces
are, the less you will suffer from outdated distribution.</p>

<h2>Lisp macros</h2>

<p>I <a href="/2012/12/29/sexpr-macros.html">already blogged about macros</a> before, but I
shall briefly re-introduce the concept here.</p>

<p>Most lisps have a syntax entirely based on lists, called
<a href="/2012/12/06/sexpr.html">s-expressions</a>. Since the entire code is represented
as a list, it can be treated as code or as data.</p>

<p>Macros allow you to define special functions that operate at compile-time. The
source code is parsed into an AST (the list in memory), and macros are able to
transform this AST before it gets evaluated.</p>

<p>Macros are AST transformations. In a sense they are source-to-source
compilers.</p>

<p><center>
    <img src="/img/evolving-syntax/macro.png" alt="macro">
</center></p>

<h2>Macros without uniform syntax</h2>

<p>All code is in form of lists in lisp. Which makes it easy to parse and modify.
This is sometimes referred to as uniform syntax.</p>

<p>Most languages don&#39;t have uniform syntax, so how would a macro system in a
language such as PHP look like?</p>

<p>The general concept still stands: It&#39;s an AST transformation. You take the
higher level source code, feed it through a macro and receive a lower-level
equivalent.</p>

<p>And this is actually quite an interesting idea, because you could invent new
syntax and language features, as long as they could be compiled down to the
existing set of features.</p>

<p>I toyed with this idea in my <a href="https://speakerdeck.com/igorw/introduction-to-lisp-dpc13?slide=98">lisp introduction at
DPC</a>. What
if we had macro capabilities in PHP? What sort of features could we add to the
language?</p>

<p>One example that I came up with was a <strong>short class constructor</strong> syntax. In
the Dependency Injection Age, most constructors are just a series of argument
assignments.</p>

<p>What if this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class Foo($bar) {</span>
<span class="x">}</span>
</code></pre></div>
<p>Could be transformed into this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class Foo {</span>
<span class="x">    private $bar;</span>
<span class="x">    public function __construct($bar) {</span>
<span class="x">        $this-&gt;bar = $bar;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Wouldn&#39;t that remove an incredibe amount of boilerplate?</p>

<p>Another project that plays with this idea is shaunxcode&#39;s
<a href="https://github.com/shaunxcode/transmogrifier">transmogrifier</a>.</p>

<h2>Backporting</h2>

<p>Do you still use libraries that run on PHP 5.3? Or 5.2? Are you yourself still
running on 5.3, which will soon reach its end of life?</p>

<p>Quite often libraries will support old versions. Or somebody will fork a
library, and rewrite it for the older version of PHP they happen to be using.
They will actually manually rewrite parts of it.</p>

<p>Why not automate this? I can&#39;t be the only person who ever considered writing
a script to make new code work on old versions (<a href="https://github.com/nikic/PHP-Backporter">I&#39;m
not</a>). This thought crossed my mind a
long time ago, because it seemed useful at the time.</p>

<p>What I only recently realized is that <strong>backporting existing features and
inventing new ones is exactly the same thing!</strong> Just from a different
perspective. One is looking at the future, the other is looking at the past.
This completely blew my mind!</p>

<p>What if we could have had all of those fancy new features in PHP 5.4 or 5.5
much earlier? Without having to wait for a new version to be released and the
distributions to catch up? How long did we have to wait for closures? Short
array syntax?</p>

<p>Think about it.</p>

<p>That&#39;s when I truly realized how powerful the idea of macros is. It&#39;s not just
a fancy theoretical idea that lisp fangirls and fanboys fantasize about at
night. Look at what was actually added to the language. This is <em>real</em>.</p>

<p><center>
    <img src="/img/evolving-syntax/54_53.png" alt="backport 5.4 to 5.3">
</center></p>

<h2>Galapagos</h2>

<p>So let&#39;s evolve us some syntax. Let&#39;s see if it can be done. I want to try and
actually backport the new syntactic features from PHP 5.4 so that they can run
on PHP 5.3.</p>

<p>For all of the <a href="http://php.net/manual/en/migration54.new-features.php">new features</a>
introduced in 5.4, it is possible to compile them down to PHP 5.3 syntax.</p>

<ul>
<li><p>Short arrays:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>

<span class="x">=&gt;</span>

<span class="x">array(&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;)</span>
</code></pre></div></li>
<li><p>$this in closures:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class Foo</span>
<span class="x">{</span>
<span class="x">    public function bar()</span>
<span class="x">    {</span>
<span class="x">        return function () {</span>
<span class="x">            return $this-&gt;baz();</span>
<span class="x">        };</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">=&gt;</span>

<span class="x">class Foo</span>
<span class="x">{</span>
<span class="x">    public function bar()</span>
<span class="x">    {</span>
<span class="x">        $that = $this;</span>
<span class="x">        return function () use ($that) {</span>
<span class="x">            return $that-&gt;baz();</span>
<span class="x">        };</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div></li>
<li><p>Function array dereferencing:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">foo()[&#39;bar&#39;];</span>

<span class="x">=&gt;</span>

<span class="x">($tmp = foo()) ? $tmp[&#39;bar&#39;] : $tmp[&#39;bar&#39;];</span>
</code></pre></div></li>
<li><p>Callable typehint:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function foo(callable $bar)</span>
<span class="x">{</span>
<span class="x">}</span>

<span class="x">=&gt;</span>

<span class="x">function foo($bar)</span>
<span class="x">{</span>
<span class="x">    if (!is_callable($bar)) {</span>
<span class="x">        trigger_error(sprintf(&#39;Argument 1 passed to %s() must be callable, %s given&#39;, __FUNCTION__, gettype($bar)), E_ERROR);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div></li>
</ul>

<p>Those are the ones that I actually implemented. The tool/library that does
these transformations is called
<a href="https://github.com/igorw/galapagos">galapagos</a> and would have not been
possible without <a href="http://nikic.github.io/">nikic</a>&#39;s excellent
<a href="https://github.com/nikic/PHP-Parser">PHP-Parser</a>, a PHP parser written in
PHP.</p>

<p>The parser returns an AST that can be processed. Since the parser supports the
entire syntax of PHP 5.5, there is no need to extend it in any way. The
library ships with a <em>node visitor</em> concept. All transformations are
implemented as node visitors.</p>

<p>If you&#39;re interested in the technical details, I recommend you take a look at
<a href="https://github.com/igorw/galapagos">the galapagos source</a>.</p>

<p><center>
    <img src="/img/evolving-syntax/galapagos.png" alt="galapagos turtle">
</center></p>

<h2>Opportunities</h2>

<p>Once PHP 5.4 is completely backported to 5.3, one could write a set of
transformations from 5.3 to 5.2. And so on and so forth, allowing PHP 5.4 code
to pass through the generations and eventually run on PHP/FI.</p>

<p>This would also allow galapagos to compile itself down to previous versions of
PHP, so you wouldn&#39;t even need 5.4 to run it.</p>

<p>You could exploit the same loophole in the universe that
<a href="http://antecedent.github.io/patchwork/">Patchwork</a> uses to rewrite source
code on the fly. Thus eliminating the static compilation step and applying the
transformation in memory, just as the code is loaded.</p>

<h2>Limitations</h2>

<p>Source-to-source works for many types of syntactical features, but there are
limitations to what you can do.</p>

<p>Performance will quickly be a limiting factor, especially for PHP, since it
heavily relies on core features to be implemented in C. Some of these
transformations will not come for free.</p>

<p>Certain features simply cannot easily be implemented as AST transformations.
While even something like generators theoretically <a href="https://github.com/clojure/core.async">could be implemented as a
macro</a>, it&#39;s extremely hard to do. At
that point you&#39;re almost <a href="https://github.com/ircmaxell/PHPPHP">implementing PHP in
PHP</a>.</p>

<p>And some features simply <em>need</em> the underlying engine. Any I/O mechanism,
anything that interacts with the operating system, needs engine support.</p>

<h2>Conclusion</h2>

<p>Being able to invent your own syntax is very useful, which instantly becomes
apparent when you look at the past. Features get added to languages all the
time. What if you could do that easily, within minutes instead of months?</p>

<p>When a language <a href="https://www.youtube.com/watch?v=_ahvzDzKdB0">is able to grow</a>
and evolve with its users&#39; needs, outdated distribution becomes less of an
issue.</p>

<p>Is PHP able to grow that way? Only to a very limited extent. The lack of
uniform syntax makes it a lot more difficult to add new features in a safe and
composable manner. It might <a href="http://sweetjs.org">kinda work</a> though.</p>

<p>Macros are extremely powerful, perhaps a little <a href="http://www.lambdassociates.org/blog/bipolar.htm">too
powerful</a>.</p>

<blockquote>
<p><em>Lisp is so powerful that problems which are technical issues in other
programming languages are social issues in Lisp.</em></p>

<p><em>&mdash; Rudolf Winestock, <a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html">The Lisp Curse</a></em></p>
</blockquote>

        ]]></content>
    </entry>
    
    <entry>
        <title>Introducing Stack</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/05/23/introducing-stack.html"/>
        <id>https://igor.io/2013/05/23/introducing-stack.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <p><link rel="stylesheet" type="text/css" href="/css/stack.css"></p>

<h1>Introducing Stack</h1>

<p>In the post titled <a href="/2013/02/02/http-kernel-middlewares.html">HttpKernel
middlewares</a> I brought up the idea of
bringing rack middlewares to Symfony2.</p>

<p>In order to solidify this effort I would like to announce a new project:
<a href="http://stackphp.com">Stack</a>.</p>

<p><center>
    <h1 class="stack-logo"><a href="http://stackphp.com">Stack</a></h1>
    <p class="lead">Stack is a convention for composing HttpKernelInterface middlewares.</p>
</center></p>

<p>The name and logo are based on the idea of building a stack of middleware
layers, each of which handles a particular piece of logic.</p>

<p>Many thanks to <a href="https://twitter.com/beausimensen">@beausimensen</a> and
<a href="https://twitter.com/hochchristoph">@hochchristoph</a> who helped make this
happen.</p>

<h2>Conventions</h2>

<p>The main goal of stack is to give the idea of &quot;HttpKernel middlewares&quot; a name,
so that we can more easily talk about it.</p>

<p>It aims to make the conventions explicit and clearly define what a middleware
should do and what it should look like. Following them allows for better
interoperability and consistency between middlewares.</p>

<p>Check <a href="http://stackphp.com">the stack website</a> for the actual conventions.</p>

<h2>Toolbox</h2>

<p>The <a href="https://github.com/stackphp">stackphp organisation on GitHub</a> contains a
very small set of basic tools make working with stack middlewares easier.
However, none of those tools are mandatory.</p>

<p>You can create and use stack middlewares without using any of the provided
tools, as long as you follow the conventions.</p>

<p>Some of the packages (<a href="https://github.com/stackphp/inline">inline</a>,
<a href="https://github.com/stackphp/CallableHttpKernel">CallableHttpKernel</a>) are
targetted towards creators of middlewares. Others
(<a href="https://github.com/stackphp/session">session</a>, <a href="https://github.com/stackphp/url-map">url-map</a>,
<a href="https://github.com/stackphp/oauth">oauth</a>) are in fact middlewares that you
can use with your apps.</p>

<p>The most prominent tool is the <a href="https://github.com/stackphp/builder">builder</a>.
<em>Stack\Builder</em> is an evolution of the original <em>Stack</em> object from the
HttpKernel middlewares blog post. This ultimately makes stack usable, and
provides a basis for configuration.</p>

<h2>The future</h2>

<p>Why HttpKernelInterface? Why limit ourselves to Symfony2? Why not target all
of PHP?</p>

<p>First of all, Symfony provides a nice sandbox to experiment in. The basic
primitives are there: An HTTP request/response abstraction, a widely deployed
interface for sending those requests. Lots of popular frameworks are adopting
the HttpKernelInterface, which provides a large user base.</p>

<p>Of course, PHP itself also already has such an abstraction. It&#39;s called SAPI.
It would be interesting to extend the scope of middlewares and target all of
PHP. But in order to do that properly, PHP core would have to be modified to
make SAPIs extensible.</p>

<p>If we can prove that the concept works for HttpKernel, the broader PHP
community might be interested in bringing that capability to PHP core. That&#39;s
a long journey however, we&#39;ll have to take it one step at a time.</p>

<h1 style="text-align: center;">Go stack some middlewares</h1>

<h1 style="text-align: center;"><a href="http://stackphp.com">stackphp.com</a></h1>

<h1 style="text-align: center;"><a href="http://twitter.com/stackphp">@stackphp</a></h1>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Meta-circular</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/04/03/sexpr-meta-eval.html"/>
        <id>https://igor.io/2013/04/03/sexpr-meta-eval.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Meta-circular</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html"><strong>meta-eval</strong></a>)</p>

<blockquote>
<p>Yo dawg. I heard you like Lisp, so I wrote Lisp in Lisp, so you can Lisp
while you Lisp.</p>

<p><em>&mdash; John McCarthy</em></p>
</blockquote>

<h2>Meta-circular evaluator</h2>

<p>A meta-circular evaluator is a self-interpreter of a homoiconic language.</p>

<p>A self-interpreter is an interpreter written in the language it implements.
Examples of this include <a href="https://github.com/jterrace/js.js">js.js</a> or
Anthony&#39;s amazing <a href="https://github.com/ircmaxell/PHPPHP">PHPPHP</a>. In most
languages they are massive, because the languages themselves are massive.</p>

<p>Homoiconicity is another word for &quot;code as data&quot;. By treating source code as a
data structure, parsing becomes trivial to non-existent. One prominent example
of this is XSLT -- an XML program for manipulating XML documents.</p>

<p>Lisp is <em>the</em> homoiconic language, since the entire syntax is based on lists,
and macros allow you to manipulate and transform Lisp code.</p>

<h2>Eval</h2>

<p>John McCarthy published an ACM paper in 1960 that was titled <em>Recursive
Functions of Symbolic Expressions and Their Computation by Machine, Part I</em>.
This introduced not only the Lisp language but also included an implementation
of Lisp in Lisp.</p>

<p>In 2001, Paul Graham wrote an article titled <a href="http://www.paulgraham.com/rootsoflisp.html"><em>The Roots of
Lisp</em></a>, which explains McCarthy&#39;s
paper in a more modern context and includes a Common Lisp port of McCarthy&#39;s
original <code>eval</code>.</p>

<p>It&#39;s a whopping 62 lines in length:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">null.</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">eq</span> <span class="nv">x</span> <span class="o">&#39;</span><span class="p">()))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">and.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">x</span> <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">y</span> <span class="ss">&#39;t</span><span class="p">)</span> <span class="p">(</span><span class="ss">&#39;t</span> <span class="o">&#39;</span><span class="p">())))</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="o">&#39;</span><span class="p">())))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">not.</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">x</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="ss">&#39;t</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">append.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null.</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">append.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">y</span><span class="p">)))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">list.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cons</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">y</span> <span class="o">&#39;</span><span class="p">())))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">pair.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">and.</span> <span class="p">(</span><span class="nv">null.</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">null.</span> <span class="nv">y</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">((</span><span class="nv">and.</span> <span class="p">(</span><span class="nv">not.</span> <span class="p">(</span><span class="nb">atom</span> <span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nv">not.</span> <span class="p">(</span><span class="nb">atom</span> <span class="nv">y</span><span class="p">)))</span>
         <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">list.</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">y</span><span class="p">))</span>
               <span class="p">(</span><span class="nv">pair.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">y</span><span class="p">))))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">assoc.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">y</span><span class="p">))</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nv">assoc.</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">y</span><span class="p">)))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">eval.</span> <span class="p">(</span><span class="nv">e</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span>
    <span class="p">((</span><span class="nb">atom</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nv">assoc.</span> <span class="nv">e</span> <span class="nv">a</span><span class="p">))</span>
    <span class="p">((</span><span class="nb">atom</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">cond</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;quote</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;atom</span><span class="p">)</span>  <span class="p">(</span><span class="nb">atom</span>   <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;eq</span><span class="p">)</span>    <span class="p">(</span><span class="nb">eq</span>     <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;car</span><span class="p">)</span>   <span class="p">(</span><span class="nb">car</span>    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;cdr</span><span class="p">)</span>   <span class="p">(</span><span class="nb">cdr</span>    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;cons</span><span class="p">)</span>  <span class="p">(</span><span class="nb">cons</span>   <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;cond</span><span class="p">)</span>  <span class="p">(</span><span class="nv">evcon.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>
       <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">assoc.</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                        <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">))</span>
                  <span class="nv">a</span><span class="p">))))</span>
    <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;label</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">caddar</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">))</span>
            <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">list.</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">))</span> <span class="nv">a</span><span class="p">)))</span>
    <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;lambda</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caddar</span> <span class="nv">e</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">append.</span> <span class="p">(</span><span class="nv">pair.</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nv">evlis.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>
                     <span class="nv">a</span><span class="p">)))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">evcon.</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nv">evcon.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">a</span><span class="p">))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">evlis.</span> <span class="p">(</span><span class="nv">m</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null.</span> <span class="nv">m</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">eval.</span>  <span class="p">(</span><span class="nb">car</span> <span class="nv">m</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                  <span class="p">(</span><span class="nv">evlis.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">m</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))))</span>
</code></pre></div>
<p>Yes. That&#39;s all it takes to write Lisp in Lisp.</p>

<p>I&#39;m not going to explain all of the details. I highly recommend you read
<em>Roots of Lisp</em> if you&#39;re interested.</p>

<p>But how about running this inside of Ilias, the PHP implementation of Lisp
covered in previous posts?</p>

<h2>Primitives</h2>

<p>The original Lisp consists of seven primitive operators:</p>

<ul>
<li><p><strong>(quote x)</strong>: Quotes a value. <code>&#39;foo</code> is a shortcut for <code>(quote foo)</code>.</p></li>
<li><p><strong>(atom? x)</strong>: Checks if a value is an atom. <code>(atom? (quote foo))</code> returns
<code>true</code>.</p></li>
<li><p><strong>(eq? x y)</strong>: Checks if two values are equal.</p></li>
<li><p><strong>(car x)</strong>: Returns the first element of the list <code>x</code>.</p></li>
<li><p><strong>(cdr x)</strong>: Returns the rest of the list <code>x</code> (everything but the first
element).</p></li>
<li><p><strong>(cons x y)</strong>: Constructs a list by prepending <code>x</code> to the list <code>y</code>.</p></li>
</ul>

<p><code>(cons (quote foo) (quote (bar)))</code> returns the list <code>(foo bar)</code>.</p>

<ul>
<li><strong>(cond (p1 e1) ... (pn en))</strong>: Conditional execution. Takes a list of pairs.</li>
</ul>

<p>The first element of each pair is a predicate, the second is an expression.
  If the predicate evaluates to <code>true</code>, the expression is evaluated and its
  return value returned. If the predicate evaluates to <code>false</code>, the next
  predicate is checked.</p>

<p>You can think of it as a mix between <code>if</code> and <code>switch</code>.</p>

<p>As it turns out, none of these have been implemented yet in Ilias.</p>

<p>Most of them can easily be implemented as functions that operate on values and
arrays:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">class AtomFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke($value)</span>
<span class="x">    {</span>
<span class="x">        return is_string($value);</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class CarFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke(array $list)</span>
<span class="x">    {</span>
<span class="x">        return array_shift($list);</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class CdrFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke(array $list)</span>
<span class="x">    {</span>
<span class="x">        array_shift($list);</span>
<span class="x">        return $list;</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class ConsFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke($value, array $list)</span>
<span class="x">    {</span>
<span class="x">        array_unshift($list, $value);</span>
<span class="x">        return $list;</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class EqFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke($a, $b)</span>
<span class="x">    {</span>
<span class="x">        return $a === $b;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The remaining two, <code>quote</code> and <code>cond</code>, need to be implemented as special
forms. Quote needs to treat its argument&#39;s source as data instead of
evaluating it. Cond needs to evaluate parts conditionally.</p>

<p>Here is <code>cond</code>, it just loops over the pairs and tests the predicates:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class CondOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $pairs = $args-&gt;toArray();</span>

<span class="x">        foreach ($pairs as $pair) {</span>
<span class="x">            list($predicate, $trueForm) = $pair-&gt;toArray();</span>
<span class="x">            if ($predicate-&gt;evaluate($env)) {</span>
<span class="x">                return $trueForm-&gt;evaluate($env);</span>
<span class="x">            }</span>
<span class="x">        }</span>

<span class="x">        return null;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<h2>Quote</h2>

<p>Quote is a bit trickier, because there is a design flaw that needs to be fixed
first. Currently quoted values contain their values as a form tree.</p>

<p>Basically, <code>&#39;(foo bar)</code> becomes:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">new QuoteForm(</span>
<span class="x">    new ListForm([</span>
<span class="x">        new Symbol(&#39;foo&#39;),</span>
<span class="x">        new Symbol(&#39;bar&#39;),</span>
<span class="x">    ])</span>
<span class="x">)</span>
</code></pre></div>
<p>This makes it really hard to work with as data. It would be a lot easier if it
were:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">new QuoteForm([&#39;foo&#39;, &#39;bar&#39;])</span>
</code></pre></div>
<p>This requires two changes. For one, the <code>FormTreeBuilder</code> should no longer
parse the contents of quote expressions. Next, the <code>MacroOp</code> needs to properly
handle quoted values and expand them as needed.</p>

<p>With those two changes, the implementation of <code>quote</code> is a snap:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>
<span class="x">use Igorw\Ilias\Form\QuoteForm;</span>

<span class="x">class QuoteOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        list($value) = $args-&gt;getAst();</span>
<span class="x">        return $value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>And with that, the seven primitive operators are implemented. After adding
them to the <code>Environment</code>, they can be called.</p>

<h2>Common Lispisms</h2>

<p>Paul Graham uses some Common Lisp specific functions. They are mostly
abbreviated versions of list manipulation functions. I will just add them in
Lisp directly:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nb">caar</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">l</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">cadr</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">l</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">cadar</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">l</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">caddar</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">l</span><span class="p">))))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">caddr</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">l</span><span class="p">)))))</span>
</code></pre></div>
<h2>Running it</h2>

<p>Now all of the missing pieces have been added. It should be possible to run
<code>eval</code> now!</p>

<p>Let&#39;s run a simple <code>cons</code>, to construct a list. The expected output is <code>(foo
bar baz)</code>:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="k">quote</span> <span class="nv">foo</span><span class="p">)</span>
      <span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nv">bar</span> <span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>Here is how you run it through <code>eval</code>. The first argument is the expression to
be evaluated, the second argument is the environment, which is empty in this
case.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="k">quote</span> <span class="nv">foo</span><span class="p">)</span>
                    <span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nv">bar</span> <span class="nv">baz</span><span class="p">))))</span>
       <span class="p">(</span><span class="k">quote</span> <span class="p">()))</span>
</code></pre></div>
<p>And the result is:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>
</code></pre></div>
<p>Awesome.</p>

<h2>Conclusion</h2>

<p>It&#39;s mind-blowing how little code it takes to write a meta-circular evaluator
in Lisp.</p>

<p>It has support not only for primitive list operations like <code>cons</code> but also
allows you to define functions, variables, or even implement a
meta-meta-circular evaluator inside of it.</p>

<blockquote>
<p>Note: I was not able to get recursion via Y combinator to work, so there&#39;s
probably still some bugs lurking somewhere.</p>

<p><em>Edit: This is due to McCarthy&#39;s eval not supporting lexical closures.</em></p>
</blockquote>

<h2>Further reading</h2>

<ul>
<li><a href="http://www-formal.stanford.edu/jmc/recursive.html">John McCarthy&#39;s 1960 paper</a></li>
<li><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871">Structure and Interpretation of Computer Programs</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/mccarthy-eval.php">Source code: Ilias <code>examples/mccarthy-eval.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html"><strong>meta-eval</strong></a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stateless Services</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/03/31/stateless-services.html"/>
        <id>https://igor.io/2013/03/31/stateless-services.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stateless Services</h1>

<p>As more frameworks and libraries, particularly in the PHP world, move towards
adopting the <em>Dependency Injection</em> pattern they are all faced with the
problem of bootstrapping their application and constructing the object graph.</p>

<p>In many cases this is solved by a <em>Dependency Injection Container</em> (DIC). Such
a container manages the creation of all the things. The things it manages are
<em>services</em>. Or are they?</p>

<h2>Services</h2>

<p>To understand what a service is, let&#39;s see how services are defined by <em>Eric
Evans</em>:</p>

<blockquote>
<p>When a significant process or transformation in the domain is not a natural
responsibility of an <em>entity</em> or <em>value object</em>, add an operation to the
model as standalone interface declared as a <em>service</em>. Define the interface
in terms of the language of the model and make sure the operation name is
part of the <em>ubiquitous language</em>. <strong>Make the <em>service</em> stateless.</strong></p>

<p>&mdash; <em>Eric Evans, Domain-Driven Design</em></p>
</blockquote>

<p>Let that sink in for a moment. Services should be stateless. What does that
mean exactly?</p>

<p>Service objects should be stateless in the same sense that the HTTP protocol
is stateless. While the service can have some internal immutable constants,
interactions with it should not affect that state. In other words, when you
call a method on a service, the result should depend only on the provided
arguments, and the service should not keep track of previous calls made.</p>

<p>One benefit that you get from this is scalability. You can move expensive
operations to a cluster of dedicated machines and it does not matter which one
responds to a particular request since all of them are independent.</p>

<p>Another great advantage is that complexity is reduced significantly. Stateless
services are conceptually very similar to functions that have no observable
side-effects. Absence of mutation makes it a lot easier to understand the
effects that a particular method call has on the system.</p>

<blockquote>
<p>Side note: While the examples of services in this post are mostly
components, application and infrastructure services (as opposed to domain
services), the concepts apply equally.</p>
</blockquote>

<h2>Service Container</h2>

<p>A <em>service container</em>, more commonly referred to as <em>Dependency Injection
Container</em> or <em>Inversion of Control Container</em>, is a construct that combines a
few patterns in order to aid object graph construction.</p>

<p>It is a dynamic factory that also acts as a registry, as it holds onto the
service objects it creates. Basically, you tell it how to create things and it
then creates them for you on demand.</p>

<p>The <em>Symfony2</em> PHP framework ships with a standalone <em>DependencyInjection</em>
component which implements a service container. The framework uses this
container to configure and create all of the objects of the framework.</p>

<p><center>
    <img src="/img/dic/dic.png" alt="DIC">
</center></p>

<h2>Request</h2>

<p>One of the available services available in Symfony2 is the <code>request</code> service.
It allows other application services to have the request injected, so that
they can use that information somehow.</p>

<p>Request <em>service</em>? The request isn&#39;t really a service, is it? It&#39;s a value
object which represents some immutable state. It does not have any behaviour.
If anything, it&#39;s a <em>parameter</em>.</p>

<p>Services can depend on other services and on parameters. Parameters are
constants, they never change. But is the request constant? Does the
application have one global request that is running all the time?</p>

<p>No. The application handles tons of requests, and every time a service is
called, the request will be different. It is constantly changing. This means
that if a service depends on the request, it is not stateless at all.</p>

<p>Therefore all services that depend on the request are violating Eric Evans&#39;
rule of statelessness. And that has huge implications.</p>

<h2>The request is not a constant</h2>

<p>You may think that for PHP this does not matter, because the entire object
graph must be constructed for every request anyway. And all services will
always be scoped to that single request.</p>

<p>You would be wrong. For one, Symfony2 has a concept of sub-requests, which
means virtual requests can be fired against the app at which point the request
changes. More on how the framework deals with this later.</p>

<p>Another use case for multiple requests per service is when you move certain
services to command-line based workers running in separate processes on
separate machines. You may want to re-use the same service instance to handle
many requests in a long-running worker script.</p>

<p>The request should not be a service. Something is off here.</p>

<h2>Scopes</h2>

<p>There&#39;s two approaches for dealing with stateful services. One of them that
the service container provides is scopes. Any service that depends on the
request service must be in the request scope.</p>

<p>If service <code>C</code> depends on <code>B</code>, which depends on <code>A</code>, which depends on
<code>request</code>, then all three of those must be scoped to the request.</p>

<p><center>
    <img src="/img/dic/req_scope.png" alt="Request Scope">
</center></p>

<p>For each HTTP request, the request scope is entered. These scopes can be
nested, so if you have a sub-request (or several nested sub-requests), you
keep stacking request scopes.</p>

<p>When a sub-request enters a new request scope, all the existing request scoped
services are stashed away. If responding to that sub-request depends on any of
those request scoped services, they will be re-created with the sub-request as
an argument.</p>

<p>As soon as the sub-request is complete, the previously stashed services are
restored, and the parent request continues.</p>

<p>As you can see, scopes lead to a lot of complexity. This is a mess.</p>

<h2>Mutable services</h2>

<p>Last week a pull request titled <a href="https://github.com/symfony/symfony/pull/7007">Synchronized
Services</a> was merged into the
2.3 branch of Symfony2. It introduces a new way of updating existing request
references without stashing them. The container calls <code>setRequest</code> on services
whenever the request scope changes.</p>

<p>This is even worse than scopes. Scopes at least kept some control over
stateful services. With this change they become completely mutable which makes
it impossible to know the state of the service at a given point in time.</p>

<p>While this is mostly related to the <code>request</code> service, there are other faux
services that are infected as well. For example the request context, which
simply gets re-populated (mutated in place) by the RouterListener for every
request.</p>

<p>Make it stop!</p>

<p><center>
    <img src="/img/dic/dic_destroy.png" alt="DIC destruction">
</center></p>

<h2>Event Listeners</h2>

<p>If we aren&#39;t supposed to pass the request at construction time, we&#39;re going to
need a better way of passing the request around.</p>

<p>So how do services get access to the request in a clean way? The request is
available at runtime only. The most obvious way to give services access to it
is simply by passing it to the service from the controller.</p>

<p>A very basic example:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class BlogController</span>
<span class="x">{</span>
<span class="x">    private $negotiator;</span>

<span class="x">    function __construct(ContentNegotiator $negotiator)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;negotiator = $negotiator;</span>
<span class="x">    }</span>

<span class="x">    function viewPostAction(Request $request)</span>
<span class="x">    {</span>
<span class="x">        $contentType = $this-&gt;negotiator-&gt;getTypeFromRequest($request);</span>

<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The controller gets access to the request, so it is able to pass it as an
argument to any service that needs it.</p>

<p>That&#39;s rather tedious though. And that is most likely one of the reasons why
scopes were introduced in the first place. The user should not have to care
about passing things all over the place.</p>

<p>In many cases the problem can be solved by using event listeners:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class ContentNegotiationListener</span>
<span class="x">{</span>
<span class="x">    private $negotiator;</span>

<span class="x">    function __construct(ContentNegotiator $negotiator)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;negotiator = $negotiator;</span>
<span class="x">    }</span>

<span class="x">    function onKernelRequest($event)</span>
<span class="x">    {</span>
<span class="x">        $request = $event-&gt;getRequest();</span>

<span class="x">        $contentType = $this-&gt;negotiator-&gt;getTypeFromRequest($request);</span>
<span class="x">        $request-&gt;attributes-&gt;set(&#39;contentType&#39;, $contentType);</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class BlogController</span>
<span class="x">{</span>
<span class="x">    function viewPostAction($contentType)</span>
<span class="x">    {</span>
<span class="x">        // OMG magic!</span>
<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Event listeners allow you to compose small pieces of request-specific work in
a decoupled manner. Whenever you need to do something for multiple controllers
based on some information contained in the request, this is usually a good
approach.</p>

<p>However, this solution will not always work. Sometimes you just need more
granularity. The controller needs to be able to specify specific actions to
take.</p>

<h2>Pipeline</h2>

<p>I don&#39;t currently have a complete answer for how to manage the flow of
information through the system at runtime. I do believe that there should be
an equivalent of what the DIC does at construction time, but for the runtime
during which you have access to contextual (e.g. request-specific)
information.</p>

<p>Most likely this runtime sub-system will be structured as a pipeline of
functions or components. The output of one component will be passed to the
next one, and there no longer needs to be an explicit relationship between
them.</p>

<p>The work the Patrick Ryan has done on
<a href="https://github.com/CodeOtter/verband-framework">Verband</a>
seems like a step in the right direction. Check it out.</p>

<p><center>
    <img src="/img/dic/pipeline.png" alt="Pipeline">
</center></p>

<p>I would love to hear some more ideas on how this pipeline could or should
work!</p>

<h2>Conclusion</h2>

<p>Symfony2 is a very container-centric framework. That is mostly a good thing,
as it allows for components to be independent from the framework itself.</p>

<p>However, in addition to construction, the container is also responsible for
managing state and context transitions. There is no clear separation between
construction time and runtime, which leads to a lot of complexity.</p>

<p>We should fix this.</p>

<p>I&#39;m just going to leave you with a quote from Joe Armstrong:</p>

<blockquote>
<p>The crazy thing is we still are extremely bad at fitting things together -
still the best way of fitting things together is the unix pipe</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">find ... | grep | uniq | sort | ...
</code></pre></div>
<p>and the <em>fundamental</em> reason for this is that components should be separated
by well-defined protocols in a universal intermediate language.</p>

<p>Fitting things together by message passing is the way to go - this is basis
of OO programming - but done badly in most programming languages.</p>

<p>If ALL applications in the world were interfaced by (say) sockets + lisp
S-expressions and had the semantics of the protocol written down in a formal
notation - then we could reuse things (more) easily.</p>

<p><em>&mdash; Joe Armstrong, <a href="http://erlang.org/pipermail/erlang-questions/2013-January/071944.html">erlang-questions mailing
list</a></em></p>
</blockquote>

<h2>Summary</h2>

<ul>
<li>Services should be stateless.</li>
<li>Container scopes should be abolished.</li>
<li>We need a way of managing runtime flow.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Composer Stability Flags</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/02/07/composer-stability-flags.html"/>
        <id>https://igor.io/2013/02/07/composer-stability-flags.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Composer Stability Flags</h1>

<p>The most common issue coming up in composer support at the moment is confusion
about how stability is determined.</p>

<p>Usually it is a variant of this case:</p>

<blockquote>
<p>When I require package A:dev-master, which depends on B:dev-master, composer
tells me that package B was not found.</p>
</blockquote>

<h2>Root package</h2>

<p>The root package is the main <code>composer.json</code> file. It is the one in the same
directory that you run <code>composer install</code> in. Many of the fields in
<code>composer.json</code> are <em>root-only</em>, which means that they only have an effect if
they are specified in the root package.</p>

<p>The root package is a context. Let&#39;s say you are depending on a package <em>A</em>.
In the directory of your own package, your package is the root package. If you
<code>cd</code> into the directory of <em>A</em>, then <em>A</em> is the root package.</p>

<p>Stability is determined by the root package, and the root package only. Let
that sink in for a moment, and don&#39;t ever forget it.</p>

<p>Composer puts the decision of how stable your dependencies are in the hands of
the user. As a user, you decide if you want to use dev, beta or stable
releases.</p>

<h2>minimum-stability</h2>

<p>The basis of this decision is the <em>minimum-stability</em> field in the root
package. It&#39;s a <em>root-only</em> field. It defines a default value for stability
flags and acts as a lower bound.</p>

<p><center>
    <img src="/img/composer/minimum-stability.png" alt="minimum-stability">
</center></p>

<p>It&#39;s a ruler that you can pull down. By default only shows &quot;stable&quot;, but you
can pull down and reveal the lower stability flags.</p>

<p><em>minimum-stability</em> defines the default stability flag for all constraints.</p>

<h2>Stability resolution</h2>

<p>So let&#39;s think of a scenario where the root package requires package <em>A:dev-
master</em>, which in turn requires <em>B:dev-master</em>.</p>

<p><center>
    <img src="/img/composer/scenario-1.png" alt="scenario-1">
</center></p>

<p>The root package looks like this:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;A&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Composer will follow these steps:</p>

<ul>
<li><p>Determine <code>minimum-stability</code>: In this case the field is not defined, so it
is set to the default value, which is &quot;stable&quot;.</p></li>
<li><p>It sees that <em>A</em> has a constraint for version <code>dev-master</code>. Due to the
<code>dev-</code> prefix, this is known to be a dev version, and dev versions have
&quot;dev&quot; stability. Because this constraint for a dev version is defined in
the root package, it implicitly gets the <code>@dev</code> stability flag.</p></li>
<li><p>Since <em>A</em> has a constraint of <code>A:dev-master@dev</code>, this version matches and
composer follows the link. It sees that <em>A</em> has a dependency on <em>B</em> with a
constraint of <code>dev-master</code>. This has a <code>dev-</code> prefix, so it has a stability
of &quot;dev&quot;.</p></li>
</ul>

<p>However, since the constraint is defined in package <em>A</em> and not the root
  package, it does not implicitly get the <code>@dev</code> stability flag. Instead it
  inherits the <code>minimum-stability</code> which is &quot;stable&quot;. So the resolved
  constraint is <code>B:dev-master@stable</code>.</p>

<p>At this point it will fail, because <code>B:dev-master@stable</code> does not resolve to
anything. It will tell you that it cannot find a package <em>B</em> within the
stability range you provided.</p>

<p>One way to fix the problem would be to just lower your <code>minimum-stability</code>
down to &quot;dev&quot;. But that&#39;s usually a really bad idea, because it applies to all
constraints and as a result you will get unstable versions of <em>all</em> packages.</p>

<p>So please, don&#39;t do that.</p>

<h2>Stability flags</h2>

<p>Instead, use stability flags.</p>

<p>A flag is defined as part of a version constraint. Since stability is
determined by the root package only, flags are also <em>root-only</em>. Flags defined
in dependent packages are simply ignored.</p>

<p>You can use flags to whitelist specific unstable packages. In this case I want
to whitelist <em>B</em>. Here is how you do that:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;A&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span><span class="p">,</span>
        <span class="nt">&quot;B&quot;</span><span class="p">:</span> <span class="s2">&quot;@dev&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Note that I did not define an actual version in the root package. This means
that the root package does not care which version of <em>B</em> is installed, it
delegates that decision to <em>A</em>, which has a more specific constraint.</p>

<p>The benefit is that if <em>A</em> decides to change its dependency on <em>B</em> from
<code>dev-master</code> to <code>~1.0</code> or anything else, the root package will not need any
changes.</p>

<h2>Silex example</h2>

<p>To get a better idea of how this works in practice, let&#39;s look at an example
involving silex.</p>

<p>At the time of this writing there is no stable version of silex, which means
in order to install it, you need to add a <code>@dev</code> flag:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;silex/silex&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.*@dev&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Silex only has a <code>1.0.x-dev</code> version, which is the dev version of the <code>1.0</code>
branch.</p>

<p>All of the dependencies of silex have stable releases. Which means by default
you will get <code>v2.1.7</code> of a number of symfony components and <code>v1.0.1</code> of
pimple.</p>

<p>If you wanted to try the <code>v2.2.0-RC1</code> version of those symfony components that
was released a few days ago, you could whitelist them like this:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;silex/silex&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.*@dev&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/event-dispatcher&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/http-foundation&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/http-kernel&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/routing&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Since specifying all of those versions is kind of tedious, you could lower the
<code>minimum-stability</code>. In this case that is okay, because it is not installing
unstable packages that you do not want.</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;minimum-stability&quot;</span><span class="p">:</span> <span class="s2">&quot;RC&quot;</span><span class="p">,</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;silex/silex&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.*@dev&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>prefer-stable</h2>

<p>Some time after this post was written, composer got a new <code>prefer-stable</code>
feature.</p>

<p>If you don&#39;t want to figure out the stability of your deps, you can just use
the <a href="http://getcomposer.org/doc/04-schema.md#prefer-stable"><code>prefer-stable</code></a>
field in your root package. Composer will try to figure out the most stable
deps it can.</p>

<p>This is quite convenient and often will get you something good enough. But I
would still encourage you to think more about which stability you really want,
and declaring it explicitly. You may be trading convenience for control.</p>

<h2>Conclusion</h2>

<p>Hopefully this gives you a better understanding of how composer determines
stability and how you can use stability flags to get those unstable versions.</p>

<p>Remember though: Most likely the reason why you need those stability flags is
because the maintainers of your dependencies did not tag stable releases. You
should go and annoy them <em>right now</em> so they add branch-aliases and tag
releases. And as soon as they do, you can nuke those stability flags and be
happy again.</p>

<p>See also: <a href="/2013/01/07/composer-versioning.html">Composer Version Constraints</a>.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Value of HttpFoundation</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/02/03/http-foundation-value.html"/>
        <id>https://igor.io/2013/02/03/http-foundation-value.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Value of HttpFoundation</h1>

<p>In the previous post I talked about why most HTTP abstractions for PHP failed
to gain adoption and how Symfony2 HttpFoundation is different:</p>

<blockquote>
<ul>
<li>It is part of a popular framework, giving it wide adoption.</li>
<li>It stays close to HTTP, trying to rebuild the request from the environment.</li>
</ul>
</blockquote>

<p>I would like to elaborate on this a bit and clarify some points, because I
think there is a lot of value hidden inside the abstraction that many people
are not aware of.</p>

<p>Instead of focusing on the HttpKernel and the outer shell, I want to look at
how adopting the HttpFoundation forces huge changes on the design of the app
itself.</p>

<h2>Superglobals</h2>

<p>So let&#39;s start off by comparing HttpFoundation to PHP&#39;s native way of doing
things: Superglobals.</p>

<p><center>
    <img src="/img/superglobal.png" alt="Evil Superglobal">
</center></p>

<p>Most of the time, PHP developers just use <code>$_GET</code>, <code>$_POST</code> and <code>$_COOKIE</code>.
And maybe on rare occasions some keys from <code>$_SERVER</code>. Most of them do not
even properly understand HTTP, and they get away with it because they manage
to get shit done using their subset of web knowledge.</p>

<p>But there has been a strive for professionalism in the PHP community recently.
More frameworks are making HTTP explicit and empowering their users to take
full advantage of headers, status codes, caching, etc.</p>

<p>The main problem that the superglobals bring with them is the fact that they
are by definition accessible from anywhere. This global state leads to code
that is unpredictable and hard to test and re-use.</p>

<p>The way that HttpFoundation addresses this issue is by making all access to
request variables explicit and tied to the request object. If you want to
fetch a query string variable, instead of using <code>$_GET</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$_GET[&#39;foo&#39;]</span>
</code></pre></div>
<p>You now retrieve it from the request:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$request-&gt;query-&gt;get(&#39;foo&#39;)</span>
</code></pre></div>
<p>The consequence of this change is that any code accessing request variables
must use <code>$request</code> and therefore must have access to it. That means that you
are forced to pass the request object around which in turn lets you see
exactly where it is being used.</p>

<p>Knowing is half the battle. Once you know a certain function or object has a
dependency on the request, you can easily move that dependency out and pass in
the required values as arguments directly, leading to lower coupling.</p>

<p>By eliminating global state, you can establish clear boundaries.</p>

<h2>Request and response are values</h2>

<p>If you think about it, protocol messages are values. They&#39;re pure data. As
such, they are (or should be) immutable.</p>

<p>The object-oriented representation of an immutable value is a value object.
You cannot change an existing value object, but you can create a new one with
your changes applied.</p>

<p>HttpFoundation&#39;s <code>Request</code> and <code>Response</code> were not designed to be immutable,
but they come surprisingly close (e.g. <code>Request::duplicate()</code>). And even if
they technically aren&#39;t, it helps to think about these objects as value
objects, because it clarifies their role in the system.</p>

<p>They hold the value of what came from the wire and what will go onto the wire.</p>

<p>In case you are wondering about huge request and response bodies and how a
value object can possibly represent a stream of partial values, this could
be solved quite easily using iterators, which would provide those values
incrementally. As a matter of fact, that&#39;s exactly what Rack does.</p>

<h2>HttpKernel is a function</h2>

<p>To look at those messages in the context of an application, the kernel is a
<em>function</em> that converts requests to responses.</p>

<p><center>
    <img src="/img/http_kernel_function.png" alt="HttpKernel as a function">
</center></p>

<p>And this pattern repeats itself inside the kernel like a fractal. The default
HttpKernel implementation delegates the response creation to controllers,
which guess what? Are just functions (PHP callables) from request to response.</p>

<p>HttpFoundation brings functional programming to the HTTP abstraction layer.</p>

<p>And that&#39;s a Good Thing™.</p>

<p>It&#39;s an extremely simple concept that leads to a clean functional design which
is easy to test and makes it easy to define a boundary between HTTP and your
application.</p>

<h2>Conclusion</h2>

<p>The request and response objects from HttpFoundation do not give you much new
functionality over what PHP itself already provides. They do give you much
better APIs though, which goes an extremely long way if you are a professional
HTTP snob.</p>

<p>The main benefit however is that you get an obvious way to isolate yourself
from HTTP. This not only allows that code to run in a CLI or testing context,
but avoids side effects, making it less likely to randomly explode in your
face.</p>

<h2>Summary</h2>

<p>Here&#39;s why you should care about HttpFoundation:</p>

<ul>
<li>It eliminates PHP superglobals.</li>
<li>It provides you with (conceptual) value objects and nice APIs.</li>
<li>It enables functional super powers!</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>HttpKernel middlewares</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/02/02/http-kernel-middlewares.html"/>
        <id>https://igor.io/2013/02/02/http-kernel-middlewares.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>HttpKernel middlewares</h1>

<h2>A brief history of language-specific HTTP interfaces</h2>

<ul>
<li>1997: <a href="http://jcp.org/en/jsr/detail?id=53">Java Servlet</a></li>
<li>2003: <a href="http://www.python.org/dev/peps/pep-0333/">Python WSGI</a></li>
<li>2007: <a href="http://rack.rubyforge.org/doc/SPEC.html">Ruby Rack</a></li>
<li>2009: <a href="http://search.cpan.org/%7Emiyagawa/PSGI-1.101/PSGI.pod">Perl PSGI</a></li>
<li>2011: Symfony2 HttpKernelInterface</li>
</ul>

<h2>Rack as an interface</h2>

<p>From the aforementioned interfaces, I&#39;m most familiar with Rack. And in fact,
Rack seems the closest to what Symfony2 brings to the PHP world.</p>

<p>So what is Rack all about? Here&#39;s a basic hello world from <a href="http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html">Introducing
Rack</a>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">HelloWorld</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">},</span> <span class="o">[</span><span class="s2">&quot;Hello world!&quot;</span><span class="o">]]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>First and foremost, it is a specification. A spec that defines how a webserver
interacts with a Ruby application. It defines three major components:</p>

<ul>
<li><p><strong>Environment:</strong> Environment variables representing the HTTP request. Mostly
taken from CGI, but has additional Rack-specific variables.</p></li>
<li><p><strong>Response:</strong> The response format. It is an array with three elements: The
status code, a hash of headers and a list of strings for the body.</p></li>
<li><p><strong>Application:</strong> An app is an object with a <code>call</code> method. The input argument
is an env hash, the return value a response array.</p></li>
</ul>

<p>By defining these things, it achieves interop between webservers and
applications. Any web framework that conforms to the specification can be
served by any rack-capable web server.</p>

<p>For a language that was not built for the web specifically, this can be quite
a big deal. By providing such an abstraction inside of the language, it
becomes possible to support many different protocols like CGI, FCGI or HTTP
directly.</p>

<blockquote>
<p>PHP does not care. Because PHP has this abstraction built into the engine at
a lower level. It&#39;s called SAPI (Server API), and it translates between a
backend like CGI or FCGI and the script level CGI interface used by user
code.</p>
</blockquote>

<h2>Rack as a stack of middlewares</h2>

<p>Rack has two sides. The interface spec is what you see from the outside.
However, the project also distributes a <code>rack</code> gem. In case you&#39;re not
familiar with gems, gems are Ruby packages.</p>

<p>This gem gives you classes for request and response, which wrap around the
low-level data structures and give you an object-oriented interface to access
specific information.</p>

<p>In addition to that, the gem ships with a set of general-purpose Rack apps
which act as decorators. That means they all follow this pattern:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">EmptyDecorator</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>The beauty of this is that you get to run custom code before and after the app
runs, and you get to change the request and response values. Without modifying
the app code at all!</p>

<p>This also means that you can stack these <em>middlewares</em> to extend an app. And
since constructing a nested object graph is tedious, Rack ships with
<code>Rack::Builder</code>, which allows you to express this in a more natural way:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">builder</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="o">.</span><span class="n">new</span>
<span class="n">builder</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">CommonLogger</span>
<span class="n">builder</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">ShowExceptions</span>
<span class="n">builder</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</code></pre></div>
<p>What this does behind the scenes is:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">app</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">CommonLogger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rack</span><span class="o">::</span><span class="no">ShowExceptions</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">))</span>
</code></pre></div>
<p>Don&#39;t tell anyone, but these are applied design patterns in Ruby.</p>

<h2>Returning to PHP land</h2>

<p>Here is what Rack does: It provides a language-level abstraction for HTTP.</p>

<p>There have been many attempts to port this idea to PHP, and all of them have
failed, because PHP already has such an abstraction. It&#39;s all in those
superglobals everybody is so scared of: <code>$_GET</code>, <code>$_POST</code> and <code>$_SERVER</code>.</p>

<p>The problem is that it is actually a flawed representation of HTTP. The
distinction between <code>GET</code> and <code>POST</code> variables is quite arbitrary. The
protocol only knows about query string parameters and a request body. And of
course, there are more than just two request methods. But PHP does not reflect
that.</p>

<p>And that&#39;s where <em>HttpFoundation</em> from Symfony2 comes in.</p>

<p>HttpFoundation models HTTP messages as PHP objects. What makes it different
from other attempts to bring Rack to PHP is:</p>

<ul>
<li>It is part of a popular framework, giving it wide adoption.</li>
<li>It stays close to HTTP, trying to rebuild the request from the environment.</li>
</ul>

<p>All that hard work that the web-server did, translating HTTP to CGI? Let&#39;s
destroy that by going from CGI back to HTTP. That pretty much sums up
HttpFoundation.</p>

<h2>HttpKernelInterface</h2>

<p>It&#39;s quite amazing that something with such a ridiculously long name is
supposed to be the rack of PHP:
<code>Symfony\Component\HttpKernel\<wbr>HttpKernelInterface</code>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">interface HttpKernelInterface</span>
<span class="x">{</span>
<span class="x">    /** @return Response */</span>
<span class="x">    public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true);</span>
<span class="x">}</span>
</code></pre></div>
<p>What&#39;s different about <code>HttpKernelInterface</code> (compared to Rack) is that it
does not have a specification. Also, it is coupled to a framework, which means
it will never become as universally accepted as Rack.</p>

<p>At least not until the PHP community agrees that they need a better CGI.</p>

<p>So what exactly is the point of this interface? It&#39;s not about interacting
with web servers. It&#39;s about interacting with fake HTTP clients. The kernel
represents an HTTP server. You can simulate HTTP requests against your app.</p>

<p>This is nice for functional testing. But not really necessary, as you can do
that <a href="https://github.com/igorw/CgiHttpKernel">through CGI</a> just fine. Another
thing you can do is HTTP reverse proxy caching. That&#39;s cute, but there is
really no reason not to use Varnish.</p>

<p><small><small>Except for restrictive shared hosting environments which can go to
hell.</small></small></p>

<p>So, let&#39;s make the <code>HttpKernelInterface</code> more useful. That fancy middleware
crap that Rack has, we can do that in PHP as well!</p>

<h2>Logger middleware</h2>

<p>Logging requests is something that should be done by your webserver.</p>

<p>In certain cases there may however some benefit to doing it inside the
application. You have more context, which means you can gather metrics about a
specific user being logged in, which may not be as easily obtainable at the
webserver level.</p>

<p>By applying the decorator pattern, you can create an <code>HttpKernel</code> that wraps
another one, delegates <code>handle</code> calls, and does some logging.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Middleware;</span>

<span class="x">use Psr\Log\LoggerInterface;</span>
<span class="x">use Symfony\Component\HttpFoundation\Request;</span>
<span class="x">use Symfony\Component\HttpKernel\HttpKernelInterface;</span>

<span class="x">class Logger implements HttpKernelInterface</span>
<span class="x">{</span>
<span class="x">    private $app;</span>
<span class="x">    private $logger;</span>

<span class="x">    public function __construct(HttpKernelInterface $app, LoggerInterface $logger)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;app = $app;</span>
<span class="x">        $this-&gt;logger = $logger;</span>
<span class="x">    }</span>

<span class="x">    public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)</span>
<span class="x">    {</span>
<span class="x">        $response = $this-&gt;app-&gt;handle($request, $type, $catch);</span>

<span class="x">        $this-&gt;logger-&gt;info(sprintf(&#39;%s &quot;%s %s %s&quot; %d&#39;,</span>
<span class="x">            $request-&gt;getHost(),</span>
<span class="x">            $request-&gt;getMethod(),</span>
<span class="x">            $request-&gt;getRequestUri(),</span>
<span class="x">            $request-&gt;server-&gt;get(&#39;SERVER_PROTOCOL&#39;),</span>
<span class="x">            $response-&gt;getStatusCode()));</span>

<span class="x">        return $response;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>This logger middleware can be composed with <em>any</em> <code>HttpKernel</code> and with <em>any</em>
PSR-3 logger. For example, you could now use it with Silex and Monolog:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app = new Silex\Application();</span>

<span class="x">$app-&gt;get(&#39;/&#39;, function () {</span>
<span class="x">    return &quot;Hello World!\n&quot;;</span>
<span class="x">});</span>

<span class="x">$app = new Igorw\Middleware\Logger(</span>
<span class="x">    $app,</span>
<span class="x">    new Monolog\Logger(&#39;app&#39;)</span>
<span class="x">);</span>

<span class="x">$request = Request::createFromGlobals();</span>
<span class="x">$app-&gt;handle($request)-&gt;send();</span>
</code></pre></div>
<p>Instead of Silex you could use a Symfony2 app. Or a Laravel4 app. Or you can
make your own <code>HttpKernel</code>, like this one:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Middleware;</span>

<span class="x">use Symfony\Component\HttpFoundation\Request;</span>
<span class="x">use Symfony\Component\HttpKernel\HttpKernelInterface;</span>

<span class="x">class CallableHttpKernel implements HttpKernelInterface</span>
<span class="x">{</span>
<span class="x">    private $callable;</span>

<span class="x">    public function __construct(callable $callable)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;callable = $callable;</span>
<span class="x">    }</span>

<span class="x">    public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)</span>
<span class="x">    {</span>
<span class="x">        return call_user_func($this-&gt;callable, $request, $type, $catch);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Which can be used by passing a callable to the constructor:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app = new CallableHttpKernel(function (Request $request) {</span>
<span class="x">    return new Response(&quot;Hello World!\n&quot;);</span>
<span class="x">});</span>
</code></pre></div>
<p>As long as you have an object that implements the <code>HttpKernelInterface</code>, it
can be used with this logger middleware.</p>

<h2>Stack</h2>

<p>While doing HTTP reverse proxy caching in PHP is pointless (as previously
mentioned), the <code>HttpKernel</code> component ships with a middleware for doing just
that. So let&#39;s try it.</p>

<p>And in fact the <code>HttpCache</code> middleware is already using the decorator pattern,
so it composes extremely well with what we already have:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use Igorw\Middleware\CallableKernel;</span>
<span class="x">use Symfony\Component\HttpKernel\HttpCache\Store;</span>

<span class="x">$app = new CallableHttpKernel(function (Request $request) {</span>
<span class="x">    return (new Response(&quot;Hello World!\n&quot;))</span>
<span class="x">        -&gt;setCache([&#39;s_maxage&#39; =&gt; 20]);</span>
<span class="x">});</span>

<span class="x">$app = new Igorw\Middleware\Logger(</span>
<span class="x">    new Symfony\Component\HttpKernel\HttpCache\HttpCache(</span>
<span class="x">        $app,</span>
<span class="x">        new Store(__DIR__.&#39;/cache&#39;)</span>
<span class="x">    ),</span>
<span class="x">    new Monolog\Logger(&#39;app&#39;)</span>
<span class="x">);</span>
</code></pre></div>
<p>Once you start nesting those middlewares, the construction logic starts to
become a bit hairy though. Wouldn&#39;t it be great to have an API that looks more
like pushing middlewares onto a stack?</p>

<p>Ideally something like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$stack = (new Stack())</span>
<span class="x">    -&gt;push(&#39;Igorw\Middleware\Logger&#39;, new Monolog\Logger(&#39;app&#39;))</span>
<span class="x">    -&gt;push(&#39;Symfony\Component\HttpKernel\HttpCache\HttpCache&#39;, new Store(__DIR__.&#39;/cache&#39;));</span>

<span class="x">$app = $stack-&gt;resolve($app);</span>
</code></pre></div>
<p>Well, that&#39;s easy enough to implement. <a href="https://github.com/igorw/middleware/blob/master/src/Igorw/Middleware/Stack.php">Take a look at the <code>Stack</code> on
GitHub</a>.</p>

<p>So now we have a stack of middlewares. Calling <code>resolve</code> will construct the
object graph and return the outermost <code>HttpKernel</code>.</p>

<p>It exposes a nice API and easily allows adding new middlewares to the stack.
It is the rough equivalent of
<a href="http://rack.rubyforge.org/doc/Rack/Builder.html">Rack::Builder</a>, but not
quite as feature-rich. One missing feature in particular is prefix matching.
I&#39;ll leave that for another day.</p>

<h2>Better use cases</h2>

<p>So far I&#39;ve only shown you logging and caching, which are both not very sexy
or even useful. You can go way beyond those boring cases though!</p>

<p><strong>Authentication</strong>. For Rack there are quite a few authentication middlewares
which can be used with <em>any</em> Rack app. You configure them, they sit in front
of the app and do their thing. A middleware can provide contextual information
to the application by adding it to the environment. The <code>HttpKernel</code>
equivalent would be <code>$request-&gt;attributes</code>.</p>

<p><strong>Debug toolbar</strong>. Currently the Symfony2 debug toolbar only works with the
Symfony2 framework. There is ongoing work to decouple it. It could be done as
a request listener. An interesting alternative would be to implement it as a
middleware, so that it can be composed with other kernels.</p>

<p><strong>Injected routes</strong>, for example an admin panel. You can simply inject routes
that are prepended to the application.</p>

<p><strong>Signed cookies</strong>. The middleware would just validate all incoming cookies,
removing invalid ones and sign outgoing ones as trusted. That prevents the
cookies from being tampered with.</p>

<p><strong>Asset management</strong>. It could be an integration with Assetic, but operating
at the HTTP level. It would rewrite the HTML source to the minified versions.</p>

<p><strong>Force SSL</strong> seems common enough, it could also be implemented as a
middleware. If the redirect depends on app-specific context it makes sense to
not have the webserver do it.</p>

<p><strong>Error handling</strong>. If all of the inside <code>handle</code> calls are done with <code>$catch</code>
set to <code>false</code>, it should be possible to handle all of those errors at the
middleware layer. Obviously this needs some tweaking, since certain errors are
app-specific and need special care.</p>

<p><strong>Sessions</strong>. Initialization of the session itself can be implemented as a
middleware, that way it is available to all other middlewares as opposed to
only the application itself.</p>

<p>There&#39;s so many more things you can do. Middlewares thrive at adding
application functionality in a decoupled manner.</p>

<p>We should consider implementing more things at this level. It makes the
<code>HttpKernelInterface</code> more attractive for frameworks to adopt. And more
importantly: it makes it actually useful.</p>

<h2>A word of warning</h2>

<p>Middlewares are neat, but they are not suited for everything.</p>

<p>For one, infrastructure tasks like logging and caching really belong into your
webserver. Re-implementing that in PHP is just going to slow things down. Use
Varnish.</p>

<p>The more important point however is that <em>middlewares are coupled to HTTP</em>.
They should only be considered an integration point. The specific pieces of
functionality they provide should still be moved to separate classes so that
they can be properly unit tested and perhaps re-used.</p>

<h2>Summary</h2>

<ul>
<li><code>HttpKernel</code> is almost like Rack.</li>
<li>The PHP community should start stacking middlewares.</li>
<li>Composition is king!</li>
</ul>

<blockquote>
<p>All of the code from this post <a href="https://github.com/igorw/middleware">is available on
GitHub</a>.</p>
</blockquote>

<p><center style="margin-top: 25px;">
    <big>
        <a  href="/2013/05/23/introducing-stack.html"
            style="background: white; border: 2px #d14 solid; border-radius: 5px; padding: 10px; color: #d14;">
            Update: Introducing Stack
        </a>
    </big>
</center></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Autoload path depth insanity</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/01/23/autoload-insanity.html"/>
        <id>https://igor.io/2013/01/23/autoload-insanity.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Autoload path depth insanity</h1>

<p>In the recent 2-3 years there have been a few major developments in the PHP
community. I&#39;d say the most notable ones were the creation of the PSR-0
autoloading standard and the dawn of the composer dependency manager.</p>

<p>The PSR proposals were originally based on the common ground between the
projects pushing them. Today they dominate the way modern PHP libraries are
written. I think it&#39;s time to stop and think for a minute about how we really
want our code and libraries to look like.</p>

<h2>Update (2014-01-04)</h2>

<p>The situation has improved. We now have a
<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md">PSR-4 specification</a>
and support for this new standard
<a href="http://seld.be/notes/psr-4-autoloading-support-in-composer">in composer</a>.</p>

<p>Thanks to everyone who made this happen.</p>

<h2>Autoloading</h2>

<p>While I believe that the creation of
<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR-0</a>
was extremely important for PHP, I no longer care about autoloading. The reason
is simple: Composer made it irrelevant.</p>

<p>With composer you get autoloading for free, but even better: you now have a
standard tool that can generate a classmap instantly. Classmap is one of the
most performant ways to lazy-load classes and it does not even care which
files they are in.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">src
└── Symfony
    └── Component
        └── HttpKernel
            └── HttpKernelInterface.php

library
└── Zend
    └── Mvc
        └── Application.php
</code></pre></div>
<p>If you take a look at these two examples, they have something in common. Both
of them contain a useless level of directory nesting. Both Symfony&#39;s <code>src</code> and
Zend Framework&#39;s <code>library</code> directory contain only one single directory -- as
such it could be eliminated.</p>

<p>Of course PSR-0 would allow removing the <code>src</code> directory and having <code>Symfony</code>
in the root directly (and some projects do that) but that&#39;s not ideal, as you
lose the ability of having a consistent directory for the source code.</p>

<h2>Who will win the pointless nesting competition?</h2>

<p>Here is an example from a library I wrote, called Ilias:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ilias
├── src
│   └── Igorw
│       └── Ilias
│           └── Program.php
└── tests
    └── Igorw
        └── Tests
            └── Ilias
                └── ProgramTest.php
</code></pre></div>
<p>Unlike the previously mentioned projects, this library is not part of a big
organization. As you can see, there are not one, but <em>two</em> levels of
unnecessary directory nesting. The name of my project is <code>igorw/ilias</code>, why
would I care to repeat this information <em>yet again</em> in the directory
structure?</p>

<p>And it gets even worse when look at the unit tests. The amount of nesting is
reaching a level of ridiculousness that exceeds the amount of ignorance a
human being can generate. I hate to say it, but this is annoying.</p>

<blockquote>
<p>Side note: Fortunately PHPUnit does not care about autoloading, so I can
shorten the test filename to <code>tests/unit/ProgramTest.php</code>, which also allows
for a clean separation between unit, integration and functional tests.
<a href="https://twitter.com/__edorian">Thank you, Volker</a>.</p>
</blockquote>

<p>But instead of just complaining, I have a few suggestions that would greatly
improve the way we deal with autoloading today, by introducing a sane amount
of brevity.</p>

<p>It would allow the path to be shortened to <code>src/Program.php</code>.</p>

<h2>Proposal</h2>

<p>Based on <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR-0</a>,
these are the changes I would make:</p>

<ul>
<li><p>An autoloader must take a <code>class_prefix</code> option which defaults to <code>null</code>.</p></li>
<li><p>If the <code>class_prefix</code> is not <code>null</code> and the <abbr title="Fully-qualified
class name">FQCN</abbr> begins with the <code>class_prefix</code>, the <em>transformed
class prefix</em> must be stripped from the beginning filesystem path.</p></li>
<li><p>The <em>transformed class prefix</em> is calculated by applying the following
transformations to it:</p>

<ul>
<li>If the last character is not a namespace separator, append one.</li>
<li>Convert each namespace separator to a <code>DIRECTORY_SEPARATOR</code>.</li>
</ul></li>
</ul>

<p>Here are some examples:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class_prefix: Symfony
class name:   Symfony\Component\HttpKernel\HttpKernelInterface
filename:             Component/HttpKernel/HttpKernelInterface.php

class_prefix: Zend
class name:   Zend\Mvc\Application
filename:          Mvc/Application.php

class_prefix: Igorw\Ilias
class name:   Igorw\Ilias\Program
filename:                 Program.php
</code></pre></div>
<p>The composer configuration could be something along these lines, the class
prefix can be used both matching and for constructing the directory prefix:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;psr-n&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Igorw\\Ilias&quot;</span><span class="p">:</span> <span class="s2">&quot;src&quot;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Based on the feedback I receive I may write up a more detailed spec and a
proof-of-concept implementation for submission to the PHP
<a href="http://www.php-fig.org/">FIG</a>.</p>

<p><center style="margin-top: 25px;">
    <big>
        <a  href="https://gist.github.com/4600419"
            style="background: white; border: 2px #d14 solid; border-radius: 5px; padding: 10px; color: #d14;">
            Please leave a comment!
        </a>
    </big>
</center></p>

<h2>FAQ</h2>

<ul>
<li><strong>Why not just use classmap?</strong></li>
</ul>

<p>The main annoyance with classmap autoloading is that you must manually re-
  dump it every time a new class is added, which makes it unsuited for a
  development environment.</p>

<p>Sure, you could hack together an autoloader that re-generates the class map
  if a class is not found, but I would strongly favour a clean solution over
  such hacks.</p>

<ul>
<li><strong>Doesn&#39;t composer&#39;s <code>target-dir</code> fix this?</strong></li>
</ul>

<p>Unfortunately, no. The <code>target-dir</code> is prepended to the entire package name,
  which means you will need to put code in your top level directory.</p>

<p>What I am asking for is <code>src/{$prefix}/Name.php</code>, which is not possible with
  <code>target-dir</code>.</p>

<ul>
<li><strong>But Symfony2 bundles do not have nesting and work fine.</strong></li>
</ul>

<p>See the composer <code>target-dir</code> question above.</p>

<ul>
<li><strong>Just use an IDE, it will solve all your problems!</strong></li>
</ul>

<p>An IDE cannot fix the filesystem structure of a software project.</p>

<ul>
<li><strong>What if the FIG does not like it?</strong></li>
</ul>

<p>Depending on the feedback I receive, I may consider submitting a patch for
  composer anyway.</p>

<ul>
<li><strong>&lt;insert random insult here&gt;</strong></li>
</ul>

<p>Thanks man, I appreciate it.</p>

<h2>Obligatory XKCD</h2>

<p><center>
    <img src="https://imgs.xkcd.com/comics/standards.png" alt="XKCD: Standards">
</center></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Composer Version Constraints</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/01/07/composer-versioning.html"/>
        <id>https://igor.io/2013/01/07/composer-versioning.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Composer Version Constraints</h1>

<blockquote>
<p>If you don&#39;t know what composer is, <a href="http://getcomposer.org/">go to the composer
homepage</a> and start reading.</p>
</blockquote>

<p>I&#39;ve seen many people struggle with the constraints they put on their composer
dependencies. Hopefully this post will shed some light on why certain things
are bad, and how to avoid them. I will start out with the worst possible
scenario, then improve the constraints step by step.</p>

<h2>The almighty asterisk</h2>

<p>Composer has a dependency resolver, so it should be able to automagically
figure out what I need, right? Wrong.</p>

<p>Declaring a version constraint of <code>*</code> is probably one of the worst things you
can do. Because you have absolutely no control over what you will get. It
could be <em>any</em> version that matches your <code>minimum-stability</code> and other
constraints.</p>

<p>Essentially you are playing a game of russian dependency roulette with
composer, eventually you will get hurt by it. And then you will probably blame
the tool for failing you so badly.</p>

<p>If you&#39;re going to be careless, please at least depend on the latest
development version, which is usually labeled as <code>dev-master</code>.</p>

<h2>Hard-coded branch names</h2>

<p>So now you are using <code>dev-master</code>. The problem is that <code>dev-master</code> is a
moving target. For one, you will always get unstable packages (unstable in
terms of composer&#39;s stability flags). But the bigger problem is that the
meaning of <code>dev-master</code> can change at any time.</p>

<p>Let&#39;s say that it represents the latest <code>1.0</code> development version. At some
point the author of said library starts working on the <code>1.1</code> release, so they
branch off a <code>1.0</code> branch, and <code>dev-master</code> becomes the latest <code>1.1</code> dev
version.</p>

<p>Unless you are tracking the development of that library very closely, you will
not notice this until you run <code>composer update</code>, it blows up in your face, and
ruins your day. That&#39;s why referencing branch names directly is not a
sustainable solution. Luckily composer is here to help with branch aliases.</p>

<h2>Branch alias</h2>

<p>A branch alias is a property that package maintainers can put into their
<code>composer.json</code>, that allows branch names to be mapped to versions. For branch
names like <code>1.0</code>, <code>2.1</code>, etc. this is not necessary -- composer already
handles those.</p>

<p>But with a branch name like <code>master</code> which produces a version named
<code>dev-master</code>, you should definitely alias it. The composer docs have <a href="http://getcomposer.org/doc/articles/aliases.md">a
great article on aliasing</a>
that explains how branch aliases can be defined:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;extra&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;branch-alias&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;dev-master&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.x-dev&quot;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>This maps the <code>dev-master</code> version to a <code>1.0.x-dev</code> alias. Which essentially
means that you can require the package with a <code>1.0.*@dev</code> constraint. The nice
thing about this is that the meaning of <code>1.0</code> is defined and will not change.
It will also make switching to stable versions easier.</p>

<p>The caveat of branch aliases is that package maintainers need to put them in.
If you are using a library that does not have a branch alias, send them a pull
request adding the above <code>extra</code> section to their <code>composer.json</code>.</p>

<h2>Stable releases</h2>

<p>The <code>1.0.*@dev</code> constraint is already quite good. The problem however is that
there is no stable version yet. This is not problematic for your code - apart
from the fact that you are running an unstable version that the maintainer has
not committed to.</p>

<p>But if you have other people depending on your package, then your users either
need to explicitly require your dependency with a <code>@dev</code> flag to allow
composer to install the unstable version, or worse yet lower their
<code>minimum-stability</code>, which means they get unstable versions of <em>everything</em>.</p>

<p>To avoid juggling around dev versions it&#39;s much better to just tag releases.
If you are using a library that has no tagged releases, go and annoy the
maintainer until they tag. Do it, now!</p>

<blockquote>
<p>We as the composer community need to take responsibility. We need to tag
releases, we should maintain CHANGELOGs. It&#39;s hard to do, but makes a huge
difference for the ecosystem as a whole. Remember to tag responsibly and
<a href="http://semver.org/">semantically</a>.</p>
</blockquote>

<p>When you have a stable release, you can remove the <code>@dev</code> flag and change your
constraint to <code>1.0.*</code>.</p>

<h2>Next Significant Release</h2>

<p>If the dependency that you&#39;re using is adhering to the rules of semantic
versioning and keeps strict BC for point releases, then you can improve the
constraint even more.</p>

<p>Right now with <code>1.0.*</code> there will be some potential compatibility problems as
soon as there is a <code>1.1</code> release. If you depend on <code>1.0</code> but somebody else
needs a feature from <code>1.1</code> (which is backwards-compatible, remember?), they
cannot install it. So you need to resort to do something like <code>1.*</code>.</p>

<p>That&#39;s great, except when you start depending on features from <code>1.1</code>, then you
can no longer use it, as it will still match the <code>1.0</code> version. Which has
missing features.</p>

<p>So then you do <code>&gt;=1.1,&lt;2.0</code>, but that&#39;s annoying. Enter the tilde operator,
which allows you to express this in a clean way: <code>~1.1</code>. This means &quot;any <code>1.*</code>
of <code>1.1</code> or above&quot;. And there you have it, encourage semantic versioning to
take advantage of the tilde and maximise inter-package compatibility.</p>

<h2>TLDR</h2>

<ul>
<li>Use <a href="http://getcomposer.org/doc/articles/aliases.md#branch-alias"><code>branch-alias</code></a>.</li>
<li>Tag releases, do it responsibly and <a href="http://semver.org/">semantically</a>.</li>
<li>Use the <a href="http://getcomposer.org/doc/01-basic-usage.md#package-versions">tilde operator</a>.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Walker</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/30/sexpr-walker.html"/>
        <id>https://igor.io/2012/12/30/sexpr-walker.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Walker</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html"><strong>walker</strong></a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The previous post introduced a basic macro system that recursively expands
macros at runtime. This allows users to define their own language constructs,
but is missing a very important aspect of what a macro system should do.</p>

<p>Generally, macros are instructions that are applied by a pre-processor. That
means that they are applied to the source or tree of the program <em>before</em> it
runs.</p>

<p>The advantage of this is that you get huge performance gains. Not only do you
avoid having to expand every time the program is run, by having a separation
of compile-time and runtime you can do calculations of constant values during
compile time and just inline the results.</p>

<h2>Code walker</h2>

<p>The program that pre-processes macros is called a code walker. It walks
through the AST, finds the macro calls and expands them.</p>

<p><center>
    <img src="/sexpr/walker.png" alt="walker">
</center></p>

<p>There are several possibilities as to when this compilation step should
happen. If the Lisp implementation has a notion of files and possibly
compilation of the files to some form of bytecode, then it usually happens on
a per-file basis. In the context of a <abbr title="read-eval-print
loop">REPL</abbr>, compilation often occurs for each entered form before it is
evaluated.</p>

<p>I will adopt the latter approach for Ilias, because I want to be able to
define and use macros in the same program.</p>

<p>The most obvious location to perform expansion is in the <code>Program</code> class,
since it is the glue that loops through the forms and evaluates them. The
<code>Walker</code> class will have an <code>expand</code> method that translates a form. Here are
the additions to <code>Program</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Program</span>
<span class="x">{</span>
<span class="x">    ...</span>
<span class="x">    private $walker;</span>

<span class="x">    public function __construct(..., Walker $walker)</span>
<span class="x">    {</span>
<span class="x">        ...</span>
<span class="x">        $this-&gt;walker = $walker;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env, $code)</span>
<span class="x">    {</span>
<span class="x">        ...</span>

<span class="x">        foreach ($forms as $form) {</span>
<span class="x">            $expanded = $this-&gt;walker-&gt;expand($env, $form);</span>
<span class="x">            $value = $expanded-&gt;evaluate($env);</span>
<span class="x">        }</span>

<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<h2>Basic recursive expansion</h2>

<p>The basic version of the walker takes an environment and a form, and must
check if the form is a macro. If yes, it must expand the macro, producing a
new form which it returns. For non-macros, it just returns the form unchanged.</p>

<p>This is relatively easy to do, since we can just use the existing
<code>MacroOp::expandOne()</code> method. And since that call can return yet another
macro, we recur the <code>expand</code> call.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">use Igorw\Ilias\Form\Form;</span>
<span class="x">use Igorw\Ilias\Form\SymbolForm;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class Walker</span>
<span class="x">{</span>
<span class="x">    public function expand(Environment $env, Form $form)</span>
<span class="x">    {</span>
<span class="x">        if (!$this-&gt;isExpandable($env, $form)) {</span>
<span class="x">            return $form;</span>
<span class="x">        }</span>

<span class="x">        if (!$this-&gt;isMacroCall($env, $form)) {</span>
<span class="x">            return $form;</span>
<span class="x">        }</span>

<span class="x">        $macro = $this-&gt;getMacroOp($env, $form);</span>
<span class="x">        $args = $form-&gt;cdr();</span>
<span class="x">        $expanded = $macro-&gt;expandOne($env, $args);</span>

<span class="x">        return $this-&gt;expand($env, $expanded);</span>
<span class="x">    }</span>

<span class="x">    private function isExpandable(Environment $env, Form $form)</span>
<span class="x">    {</span>
<span class="x">        return $form instanceof ListForm;</span>
<span class="x">    }</span>

<span class="x">    private function isMacroCall(Environment $env, ListForm $form)</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;isFormOfType($env, $form, &#39;Igorw\Ilias\SpecialOp\MacroOp&#39;);</span>
<span class="x">    }</span>

<span class="x">    private function isFormOfType(Environment $env, ListForm $form, $type)</span>
<span class="x">    {</span>
<span class="x">        return $form-&gt;nth(0) instanceof SymbolForm</span>
<span class="x">            &amp;&amp; $form-&gt;nth(0)-&gt;existsInEnv($env)</span>
<span class="x">            &amp;&amp; $form-&gt;nth(0)-&gt;evaluate($env) instanceof $type;</span>
<span class="x">    }</span>

<span class="x">    private function getMacroOp(Environment $env, ListForm $form)</span>
<span class="x">    {</span>
<span class="x">        return $form-&gt;nth(0)-&gt;evaluate($env);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>You will notice that the <code>ListForm</code> has a new <code>nth</code> method, which is a
convenience method for accessing an element of the list by index.</p>

<p>This walker already handles many cases. The following is expanded correctly.</p>

<p>Single level macro:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">plus</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nv">plus</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>Two-level macro:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">plus</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nb">defmacro</span> <span class="nv">pl</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nv">pl</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<h2>Sub-lists</h2>

<p>Currently only top-level macro calls are expanded. That means that the
following incomplete transformation will happen for a nested list:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">plus</span> <span class="mi">1</span> <span class="p">(</span><span class="nv">plus</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nv">plus</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div>
<p>Instead of just returning non-macro list forms directly, expansion must recur
on their sub-lists. And sure enough, with a few small changes this can be
done.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function expand(Environment $env, Form $form)</span>
<span class="x">{</span>
<span class="x">    ...</span>

<span class="x">    if (!$this-&gt;isMacroCall($env, $form)) {</span>
<span class="x">        return $this-&gt;expandSubLists($env, $form);</span>
<span class="x">    }</span>

<span class="x">    ...</span>
<span class="x">}</span>

<span class="x">private function expandSubLists(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    if (!count($form-&gt;toArray())) {</span>
<span class="x">        return $form;</span>
<span class="x">    }</span>

<span class="x">    return new ListForm(array_merge(</span>
<span class="x">        [$form-&gt;nth(0)],</span>
<span class="x">        $this-&gt;expandList($env, $form-&gt;cdr())</span>
<span class="x">    ));</span>
<span class="x">}</span>

<span class="x">private function expandList(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    return array_map(</span>
<span class="x">        function ($form) use ($env) {</span>
<span class="x">            return $this-&gt;expand($env, $form);</span>
<span class="x">        },</span>
<span class="x">        $form-&gt;toArray()</span>
<span class="x">    );</span>
<span class="x">}</span>
</code></pre></div>
<p>And with this adjustment in place it will correctly expand the sub-list:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">plus</span> <span class="mi">1</span> <span class="p">(</span><span class="nv">plus</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div>
<p>Even if it is inside a lambda expression:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</code></pre></div>
<p>At this point almost all cases are handled. There is still one specific
problematic case though.</p>

<h2>Special form awareness</h2>

<p>Some special forms have special interpretations of their list arguments, and
do not treat them as function applications. The most prominent example of this
is the argument list of the <code>lambda</code> special form.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div>
<p>This function takes a <code>plus</code> argument which is a function and two numbers <code>a</code>
and <code>b</code>. It applies <code>plus</code> to the two numbers and the number <code>5</code>. Regardless
of whether this function makes sense or not, there is a problem at compile
time.</p>

<p>The first issue is that the walker will try to expand the argument list. It
does not treat lambda forms in any special way. In fact, it does not even know
what a lambda form is, it just sees a list and tries to expand it.</p>

<p>That will result in something like this:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div>
<p>The second issue is that the walker will try to expand the body in this case,
even though <code>plus</code> is a lexical variable of the lambda. This happens because
it is not aware of lexical scoping rules.</p>

<p>Also, the <code>plus</code> macro only takes two arguments, so this extra argument of <code>5</code>
will make it blow up. If the macro system provided access to all of the
arguments as a list, it would not blow up, but it would still expand, which is
not what we want here.</p>

<p>In order to fix those two issues, the walker needs to be aware of special
forms, in this case the <code>lambda</code> special form, and handle the argument list
and the bound parameters inside the lambda body in a different way than normal
lists.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function expand(Environment $env, Form $form)</span>
<span class="x">{</span>
<span class="x">    if (!$this-&gt;isExpandable($env, $form)) {</span>
<span class="x">        return $form;</span>
<span class="x">    }</span>

<span class="x">    if ($this-&gt;isLambdaForm($env, $form)) {</span>
<span class="x">        return $this-&gt;expandLambdaForm($env, $form);</span>
<span class="x">    }</span>

<span class="x">    ...</span>
<span class="x">}</span>

<span class="x">private function isLambdaForm(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    return $this-&gt;isFormOfType($env, $form, &#39;Igorw\Ilias\SpecialOp\LambdaOp&#39;);</span>
<span class="x">}</span>

<span class="x">private function expandLambdaForm(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    $subEnv = clone $env;</span>
<span class="x">    foreach ($form-&gt;nth(1)-&gt;toArray() as $argName) {</span>
<span class="x">        $subEnv[$argName-&gt;getSymbol()] = null;</span>
<span class="x">    }</span>

<span class="x">    return new ListForm(array_merge(</span>
<span class="x">        [$form-&gt;nth(0), $form-&gt;nth(1)],</span>
<span class="x">        $this-&gt;expandList($subEnv, $form-&gt;cdr()-&gt;cdr())</span>
<span class="x">    ));</span>
<span class="x">}</span>
</code></pre></div>
<p>All that this does is:</p>

<ul>
<li><p>Clone the environment, so that changes to it will not affect the overall
macro expansion process.</p></li>
<li><p>Override the argument symbols on the environment, setting them to null. This
ensures that locally scoped variables that share the name of a macro will not
be expanded.</p></li>
<li><p>Skip expansion of the argument list, but recur on the lambda body using the
cloned environment.</p></li>
</ul>

<p>This will take care of those special cases and ensure that the following
expands correctly (actually, it correctly lacks expansion):</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</code></pre></div>
<p>And because the cloned environment is passed on to sub-expansions, lexical
scope is preserved, which means it works for nested lambdas too:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</code></pre></div>
<p>And with that, the walker can correctly expand lambdas at compile time! It
strips out all of the macro calls and replaces them with the actual code.</p>

<h2>Conclusion</h2>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nb">when</span> <span class="p">(</span><span class="kt">condition</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;if</span> <span class="kt">condition</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;begin</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)))</span>
<span class="p">(</span><span class="nv">define</span> <span class="nv">foo</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
        <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">x</span> <span class="mi">10</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nv">define</span> <span class="nv">foo</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
        <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">x</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nv">begin</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))))</span>
</code></pre></div>
<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Walker.php">Source code: <code>Igorw\Ilias\Walker</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/WalkerTest.php">Source code: <code>Igorw\Ilias\WalkerTest</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/macro-expand.php">Source code: Ilias <code>examples/macro-expand.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html"><strong>walker</strong></a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Macros</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/29/sexpr-macros.html"/>
        <id>https://igor.io/2012/12/29/sexpr-macros.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Macros</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html"><strong>macros</strong></a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The interpreter is functioning, it is able to calculate the fibonacci sequence
recursively. And probably almost anything else you would want to. So what is
the next step?</p>

<p>We have learnt that Lisp programs themself consist of lists. This makes them
extremely easy to parse. But apart from that, we have not really seen the
action of &quot;code as data&quot;. This property is also known as <em>Homoiconicity</em>.</p>

<p>If programs are lists and lists are data, that means we can treat programs as
data. So instead of just parsing and interpreting it, how about modifying and
generating new programs? And that&#39;s exactly where macros come into play.</p>

<h2>Macro theory</h2>

<p>You probably know macros from C. A macro is an instruction that is applied to
the source code before it is compiled. It is a source code transformation. In
case of C, these macros tend to get very messy, which is mostly due to the
fact that C is hard to generate code for, especially in a dynamic manner.</p>

<p>In Lisp, macros are quite common. In fact many of the things that are
implemented as special forms in Ilias are macros in other Lisp
implementations, and reduce to a very small number of primitive special forms.
It&#39;s a lot easier to generate valid syntax, because the syntax consists
entirely of lists.</p>

<p>In fact, Lisp macros are not plain source transformations. They are AST
transformations. This means that you get the fully parsed syntax tree and can
make changes to it before it gets compiled or evaluated.</p>

<p>But it gets better. Macros can be defined at runtime. This means that a macro
defined at runtime can modify the AST of the code following it. Which means
that macros can use runtime functions to modify the source code.</p>

<p>At this point you&#39;re probably thinking <strong>what the func</strong>, so let&#39;s look at a
practical example!</p>

<h2>When operator</h2>

<p>Imagine a program with a lot of conditional logic. For each condition there
are a number of statements that need to be executed. In fact, let&#39;s introduce
a <code>begin</code> function in order to correctly represent this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">class BeginFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke()</span>
<span class="x">    {</span>
<span class="x">        $args = array_values(func_get_args());</span>
<span class="x">        return end($args);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Of course it also needs to be added to the standard environment as <code>begin</code>.</p>

<p>The begin function takes a list of arguments and returns the last one. This
simply allows a series of function calls to be made, and the result of the
last one to be returned. Like this:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
       <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
       <span class="p">(</span><span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>That statement will call three functions: <code>foo</code>, <code>bar</code> and <code>baz</code>. And return
the resulting value from the <code>baz</code> call.</p>

<p>Now, the program with all of its conditional logic will have to do this all
over the place:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">if</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">baz</span><span class="p">)))</span>
</code></pre></div>
<p>It must use <code>begin</code> to group the statements due to the way that <code>if</code> is
structured. You cannot use a function for this, because some of the statements
are conditional, and functions have all arguments evaluated before their
application.</p>

<p>At some point you may think: Why am I repeating myself? If only the language
had a <code>when</code> operator that has no <code>else-form</code> but just executes all arguments
in sequence. And it would work like this:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">when</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>With macros, you can add this new operator to the language yourself!</p>

<h2>DefMacro</h2>

<p>The way you can add it is by using the <code>defmacro</code> special form.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nb">when</span> <span class="p">(</span><span class="kt">condition</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;if</span> <span class="kt">condition</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;begin</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)))</span>
</code></pre></div>
<p>It takes three arguments:</p>

<ul>
<li><p><strong>name:</strong> The name of the macro, which is a symbol under which the macro
will be stored in the environment. In this case <code>when</code>.</p></li>
<li><p><strong>arguments:</strong> The argument list names unevaluated parts of the AST that
will get passed to the macro function.</p></li>
<li><p><strong>body:</strong> This is the equivalent of the body of a <code>lambda</code> special form
which operates on the provided arguments. The return value of this
function is the new AST that should be used instead of the original one.
What it is doing in this case is constructing the actual previous source
code of <code>(if condition? (begin a b c))</code> as a list, and returning it.</p></li>
</ul>

<p>Other implementations have a more fancy way of representing list construction,
I will keep it raw in this case and construct lists manually using a <code>list</code>
function which produces a list form from its arguments.</p>

<p>Actually, that function does not exist yet, so let&#39;s define it:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class ListFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke()</span>
<span class="x">    {</span>
<span class="x">        return new ListForm(func_get_args());</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>As always, this also needs to go into the standard environment.</p>

<p>Going back to <code>defmacro</code>, it is basically just a special form that constructs
a macro function and assigns it to the environment. It will be represented by
a <code>DefMacroOp</code> and is relatively straight-forward to implement:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class DefMacroOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $name = $args-&gt;car()-&gt;getSymbol();</span>
<span class="x">        $macroArgs = $args-&gt;cdr()-&gt;car();</span>
<span class="x">        $macroBody = $args-&gt;cdr()-&gt;cdr()-&gt;car();</span>
<span class="x">        $env[$name] = new MacroOp($macroArgs, $macroBody);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The macro function itself will be an instance of <code>MacroOp</code>, and this is in
fact the first time that a special form is being constructed dynamically. So
far they have always been pre-defined on the environment. Now we are creating
instances of the macro special form dynamically at runtime.</p>

<h2>Macro operator</h2>

<p>Now that macros can be defined, it also needs to be possible to actually
expand them into their resulting form before evaluation. A very easy way of
doing that is by expanding at runtime.</p>

<p>Once the program execution hits this form and evaluates it:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">when</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>The macro operator expands it to:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">if</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">baz</span><span class="p">)))</span>
</code></pre></div>
<p>Then evaluates that and returns the result.</p>

<p>The macro operator has two constructor arguments as seen in <code>DefMacroOp</code>: A
list of arguments and a list form representing the body.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class MacroOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    private $macroArgs;</span>
<span class="x">    private $macroBody;</span>

<span class="x">    public function __construct(ListForm $macroArgs, ListForm $macroBody)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;macroArgs = $macroArgs;</span>
<span class="x">        $this-&gt;macroBody = $macroBody;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>There is one issue has not been discussed yet. And that is recursive
expansion. If a macro call returns a new macro call, then that new macro call
must also be expanded.</p>

<p>For example:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">plus</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nb">defmacro</span> <span class="nv">pl</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nv">pl</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>The third form of <code>(pl 1 2)</code> must be expanded once, yielding <code>(plus 1 2)</code>. And
since <code>plus</code> is also a macro, it needs to be expanded again, producing the
final <code>(+ 1 2)</code> which can then be evaluated. The macro operator must be able
to handle that case.</p>

<p>It turns out that the implementation of <code>MacroOp</code> is quite trivial. Most of
the logic is already defined in <code>LambdaOp</code> and can be re-used. And because
macros are expanded at runtime, they expand recursively automatically, simply
by invoking them:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">{</span>
<span class="x">    $expanded = $this-&gt;expandOne($env, $args);</span>

<span class="x">    return $expanded-&gt;evaluate($env);</span>
<span class="x">}</span>

<span class="x">public function expandOne(Environment $env, Form $form)</span>
<span class="x">{</span>
<span class="x">    $transformForm = new LambdaOp();</span>
<span class="x">    $transformFormArgs = new ListForm([</span>
<span class="x">        $this-&gt;macroArgs,</span>
<span class="x">        $this-&gt;macroBody,</span>
<span class="x">    ]);</span>

<span class="x">    $transformFn = $transformForm-&gt;evaluate($env, $transformFormArgs);</span>

<span class="x">    return call_user_func_array($transformFn, $form-&gt;toArray());</span>
<span class="x">}</span>
</code></pre></div>
<p>Indeed, this is all it takes to implement runtime macro expansion.</p>

<blockquote>
<p>Note: This implementation of macros does not operate on the raw AST, but on
the form tree instead. The form tree is nothing more than an AST with
attached behaviour. It&#39;s an enriched AST.</p>
</blockquote>

<h2>How is this different from eval?</h2>

<blockquote>
<p>And while we&#39;re at it, isn&#39;t eval evil?</p>
</blockquote>

<p>Macros are definitely extremely powerful and also quite dangerous. But they
are <em>not</em> the equivalent of calling <code>eval</code> in PHP.</p>

<ul>
<li><p>Macros do not have to be expanded at runtime. (More on this in an upcoming
blog post).</p></li>
<li><p>Evaluation in Lisp does not mean interpretation. Many implementations will
in fact compile the code before running it. Which could be remotely compared
to opcode caching in PHP.</p></li>
</ul>

<h2>Conclusion</h2>

<p>Macros are an extremely powerful code generation tool that is built into the
language and allows you to define your own language constructs which look just
like native ones.</p>

<h2>Further reading</h2>

<ul>
<li><a href="http://sweetjs.org/">Sweet.js: JavaScript macros</a></li>
<li><a href="http://www.youtube.com/watch?v=_ahvzDzKdB0">Growing a Language - Guy Steele</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/SpecialOp/DefMacroOp.php">Source code: <code>Igorw\Ilias\SpecialOp\DefMacroOp</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/SpecialOp/MacroOp.php">Source code: <code>Igorw\Ilias\SpecialOp\MacroOp</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/IntegrationTest.php#L56">Source code: <code>Igorw\Ilias\IntegrationTest</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html"><strong>macros</strong></a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Special forms</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/14/sexpr-special-forms.html"/>
        <id>https://igor.io/2012/12/14/sexpr-special-forms.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Special forms</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html"><strong>special-forms</strong></a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<blockquote>
<p><strong>Note:</strong> The terminology of this post was changed from <em>special form</em> to
<em>special operator</em> where appropriate on Dec 28, 2012.</p>
</blockquote>

<p>Ilias is quite powerful at this point. It allows arbitrary variables to be
defined in PHP. These variables can be functions. These functions can be
called from within Lisp.</p>

<p>However, there are some fundamental constructs that are missing to make the
language unstoppable, which once added will inevitably lead to world
domination: <code>define</code>, <code>lambda</code> and <code>if</code>.</p>

<h2>Program</h2>

<p>Before we look into that, let&#39;s simplify the usage of the toolchain. It now
includes: Lexer, Reader, FormTreeBuilder. How about a class that packages
those steps up. I will call it <code>Program</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Program</span>
<span class="x">{</span>
<span class="x">    private $lexer;</span>
<span class="x">    private $reader;</span>
<span class="x">    private $builder;</span>

<span class="x">    public function __construct(Lexer $lexer, Reader $reader, FormTreeBuilder $builder)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;lexer = $lexer;</span>
<span class="x">        $this-&gt;reader = $reader;</span>
<span class="x">        $this-&gt;builder = $builder;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env, $code)</span>
<span class="x">    {</span>
<span class="x">        $tokens = $this-&gt;lexer-&gt;tokenize($code);</span>
<span class="x">        $ast = $this-&gt;reader-&gt;parse($tokens);</span>
<span class="x">        $forms = $this-&gt;builder-&gt;parseAst($ast);</span>

<span class="x">        $value = null;</span>
<span class="x">        foreach ($forms as $form) {</span>
<span class="x">            $value = $form-&gt;evaluate($env);</span>
<span class="x">        }</span>
<span class="x">        return $value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>It lexes, then parses, then builds a form tree. Finally it evaluates all forms
and returns the result of the last one.</p>

<p>Usage:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$program = new Program(</span>
<span class="x">    new Lexer(),</span>
<span class="x">    new Reader(),</span>
<span class="x">    new FormTreeBuilder()</span>
<span class="x">);</span>

<span class="x">$env = Environment::standard();</span>
<span class="x">var_dump($program-&gt;evaluate($env, &#39;(+ 1 2)&#39;));</span>
</code></pre></div>
<p>That&#39;s a lot easier to use. Back to world domination.</p>

<h2>Why special is special</h2>

<p>The new constructs <code>define</code>, <code>lambda</code> and <code>if</code> are special. They are language
constructs that do not behave like regular functions, although they may appear
so.</p>

<p><code>define</code> is used to assign a value to a symbol in the environment.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">foo</span> <span class="mi">42</span><span class="p">)</span>
<span class="nv">foo</span>
</code></pre></div>
<p>That&#39;s a program of two forms. The first form is a <code>define</code> special form that
defines the symbol <em>foo</em> to represent the value <em>42</em>. The second form is a
symbol form representing the <em>foo</em> variable that evaluates to <em>42</em>. The return
value of this program is <em>42</em>.</p>

<p>The special thing about <code>define</code> is that it has access to the environment at
call time. It needs to, in order to set the value on it. Normal functions do
not have this capability.</p>

<p>The second, more profound difference which is very subtle in this case is that
it does not evaluate all of its arguments. It surely evaluates the second
argument, which is a literal. But it does <em>not</em> evaluate the first argument,
the symbol.</p>

<p>If it tried to evaluate <code>foo</code> that would result in an error, since <code>foo</code> is
not defined on the environment yet, as that&#39;s what <code>define</code> is about to do!</p>

<h2>Special operator interface</h2>

<p>In order to deal with special forms, they need to be modeled in the form tree.
A special form is a list form whose first element is a special operator. The
<code>SpecialOp</code> interface gives the operator access to the environment and to the
unevaluated arguments.</p>

<p>I repeat, the <em>unevaluated arguments</em>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">interface SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args);</span>
<span class="x">}</span>
</code></pre></div>
<p>The form tree builder does not have to be modified. Special operators are
simply values defined on the environment that look like functions but have a
different behaviour when evaluated. The only adjustment needs to be made in
<code>ListForm::evaluate()</code>, since special forms are a special kind of list form.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function evaluate(Environment $env)</span>
<span class="x">{</span>
<span class="x">    $func = $this-&gt;car()-&gt;evaluate($env);</span>

<span class="x">    if ($func instanceof SpecialOp) {</span>
<span class="x">        return $func-&gt;evaluate($env, $this-&gt;cdr());</span>
<span class="x">    }</span>

<span class="x">    $args = $this-&gt;evaluateArgs($env, $this-&gt;cdr());</span>
<span class="x">    return call_user_func_array($func, $args);</span>
<span class="x">}</span>
</code></pre></div>
<p>If the function in an list form evaluation is a special form, it is evaluated
with the <code>cdr</code> passed in unevaluated.</p>

<h2>Define</h2>

<p><code>define</code> will be the first special form, implementing the <code>SpecialOp</code>
interface:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class DefineOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $name = $args-&gt;car()-&gt;getSymbol();</span>
<span class="x">        $env[$name] = $args-&gt;cdr()-&gt;car()-&gt;evaluate($env);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>It&#39;s trivial. The first argument is a symbol representing the name. Instead of
evaluating it, the symbol is fetched and used as a key.</p>

<p>The second argument is a form whose evaluation is assigned to the environment.
It is fetched by getting the <code>car</code> of the <code>cdr</code> of the arguments.</p>

<p>To make <code>define</code> available to the world, it just needs to be part of the
standard environment:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Environment extends \ArrayObject</span>
<span class="x">{</span>
<span class="x">    public static function standard()</span>
<span class="x">    {</span>
<span class="x">        return new static([</span>
<span class="x">            &#39;define&#39;    =&gt; new SpecialOp\DefineOp(),</span>

<span class="x">            &#39;+&#39;         =&gt; new Func\PlusFunc(),</span>
<span class="x">        ]);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>That&#39;s it, the <code>define</code> special operator is now available, so this should work:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">(define foo 42)
foo
</code></pre></div>
<h2>Lambda</h2>

<p>The term lambda describes an anonymous function. It originally was introduced
as part of <em>lambda calculus</em>, a system for representing computation through
functions.</p>

<p>In Lisp, <code>lambda</code> is a special operator that represents a function as a value.
All functions are anonymous, the only way of naming them is by assigning them
to a variable using <code>define</code>.</p>

<p>Here is a lambda with no arguments that always returns 42:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="mi">42</span><span class="p">)</span>
</code></pre></div>
<p>It could be invoked directly without giving it a name, yielding the return
value:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">((</span><span class="k">lambda</span> <span class="p">()</span> <span class="mi">42</span><span class="p">))</span>
</code></pre></div>
<p>And defined as <code>the-answer</code>, it can be called using that name:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">the-answer</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="mi">42</span><span class="p">))</span>
<span class="p">(</span><span class="nv">the-answer</span><span class="p">)</span>
</code></pre></div>
<p>Here is the identity function, it returns any argument it receives:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nb">identity</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
</code></pre></div>
<p>Here is an increment function, it returns the increment of the argument it
receives:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">increment</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">)))</span>
</code></pre></div>
<p>The first argument to the <code>lambda</code> special operator is a list of symbols
representing argument names. All the following arguments are forms to be
evaluated when the function gets called, in the context of that function.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class LambdaOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $symbols = $args-&gt;car()-&gt;toArray();</span>
<span class="x">        $argNames = $this-&gt;getMappedSymbols($symbols);</span>

<span class="x">        $bodyForms = $args-&gt;cdr()-&gt;toArray();</span>

<span class="x">        return function () use ($env, $argNames, $bodyForms) {</span>
<span class="x">            $subEnv = clone $env;</span>

<span class="x">            $vars = array_combine($argNames, func_get_args());</span>
<span class="x">            foreach ($vars as $name =&gt; $value) {</span>
<span class="x">                $subEnv[$name] = $value;</span>
<span class="x">            }</span>

<span class="x">            $value = null;</span>
<span class="x">            foreach ($bodyForms as $form) {</span>
<span class="x">                $value = $form-&gt;evaluate($subEnv);</span>
<span class="x">            }</span>
<span class="x">            return $value;</span>
<span class="x">        };</span>
<span class="x">    }</span>

<span class="x">    private function getMappedSymbols(array $symbols)</span>
<span class="x">    {</span>
<span class="x">        return array_map(</span>
<span class="x">            function ($symbol) {</span>
<span class="x">                return $symbol-&gt;getSymbol();</span>
<span class="x">            },</span>
<span class="x">            $symbols</span>
<span class="x">        );</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>What is significant is that the function produced by <code>lambda</code> evaluates its
body using a separate environment. The result of the last body form&#39;s
evaluation is returned from the function.</p>

<p>After adding the new <code>lambda</code> special operator to the environment it should be
able to do all those things. According to lambda calculus we can stop now, as
anything can be represented using lambdas alone. But we will continue
nevertheless.</p>

<h2>If</h2>

<p>Finally, the <code>if</code> special operator takes three arguments: a predicate, a true-
form and an else-form. The predicate is evaluated. If the result of that
evaluation is truthy, then the true-form is evaluated. If it is falsy, the
else-form is evaluated. The result of the evaluated form is returned.</p>

<p>This is what an example usage looks like:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">answer</span> <span class="mi">42</span><span class="p">)</span> <span class="ss">&#39;correct</span> <span class="ss">&#39;wrong</span><span class="p">)</span>
</code></pre></div>
<p>The implementation:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class IfOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $predicate = $args-&gt;car();</span>
<span class="x">        $trueForm  = $args-&gt;cdr()-&gt;car();</span>
<span class="x">        $elseForm  = $args-&gt;cdr()-&gt;cdr()-&gt;car();</span>

<span class="x">        $form = ($predicate-&gt;evaluate($env)) ? $trueForm : $elseForm;</span>
<span class="x">        return $form ? $form-&gt;evaluate($env) : null;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Easy.</p>

<p>After adding it to the standard environment, it is available from within Lisp.</p>

<h2>Fibonacci</h2>

<p>Now that all of the pieces are in place it should be possible to use them. One
way to demonstrate that is by implementing a function that calculates the
fibonacci sequence.</p>

<p>I know, it&#39;s a lame example. But is based on conditional recursion which means
it is a good test for scoping, naming and lazy evaluation of conditionals.</p>

<p>This is the (terribly inefficient) implementation of <code>fib</code> in Lisp:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">fib</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">)</span>
        <span class="nv">n</span>
        <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">))))))</span>
</code></pre></div>
<p>As you can see, I have added a <code>-</code> in addition to the <code>+</code> function.</p>

<p>And now, for the very first time in history will we witness special forms...</p>

<p>*<em>drumroll</em>*</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">fib</span> <span class="mi">23</span><span class="p">)</span>
</code></pre></div>
<p><em>And it takes 4 seconds to compute the result which is...</em></p>

<p><code>28657</code>, which is correct! Now anything is possible. The future awaits us!</p>

<p><a href="https://github.com/igorw/ilias">Source code: Ilias</a></p>

<h2>Conclusion</h2>

<p><center>
    <img src="/sexpr/world-domination.png" alt="world domination">
</center></p>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html"><strong>special-forms</strong></a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Forms</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/13/sexpr-forms.html"/>
        <id>https://igor.io/2012/12/13/sexpr-forms.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Forms</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html"><strong>forms</strong></a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The previous post introduced a basic implementation of evaluation that is
lacking on many fronts. It currently only supports s-expressions which are
function applications. The objective is to add support for different types of
sexprs.</p>

<p>In Lisp lingo, a <em>form</em> is an object that can be evaluated. Based on the current
state of the AST, there are four different types of forms that it can model:</p>

<ul>
<li><p><strong>List:</strong> The list form represents a function application. Its elements are
also forms. Evaluating the list will evaluate nested lists recursively by
applying the <code>car</code> to the <code>cdr</code>. Or in other words, applying the function to
its arguments.</p></li>
<li><p><strong>Symbol:</strong> A symbol is an identifier that usually references a value in
the environment. It is a variable name if you will. Evaluating a symbol looks
up the name in the environment and returns the associated value.</p></li>
<li><p><strong>Literal:</strong> A literal represents a value. Numbers are literals. Evaluating
a literal just returns its value.</p></li>
<li><p><strong>Quote:</strong> A quote form represents a value or a list of values in quoted
form. Evaluating a quote form returns the value that is being quoted.</p></li>
</ul>

<p>Currently only list forms are supported, and they are only supported
partially.</p>

<h2>Form interface</h2>

<p>Before looking into adding support for the other forms I want to introduce
forms into the code base as a concept. A form is an object that can be
evaluated. It is evaluated against an environment. A form represents the
behaviour or functionality of an AST node.</p>

<p>This abstraction can be encoded into a <code>Form</code> interface that all forms must
implement:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">interface Form</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env);</span>
<span class="x">}</span>
</code></pre></div>
<p>With this interface it is easy to create separate form classes for the
different types of forms. To match the functionality of the previous post&#39;s
<code>evaluate</code> function, there must be a <code>ListForm</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class ListForm implements Form</span>
<span class="x">{</span>
<span class="x">    private $forms;</span>

<span class="x">    public function __construct(array $forms)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;forms = $forms;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        $fn = $this-&gt;car();</span>
<span class="x">        $args = $this-&gt;cdr();</span>

<span class="x">        return call_user_func_array($env[$fn], $args);</span>
<span class="x">    }</span>

<span class="x">    public function car()</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;forms[0];</span>
<span class="x">    }</span>

<span class="x">    public function cdr()</span>
<span class="x">    {</span>
<span class="x">        return new static(array_slice($this-&gt;forms, 1));</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>This is exactly the same as the <code>evaluate</code>, <code>car</code> and <code>cdr</code> functions, but
they are now encapsulated within an object.</p>

<blockquote>
<p>Note: The <code>Environment</code> implements the <code>ArrayAccess</code> interface. Its
implementation will be discussed later on.</p>
</blockquote>

<h2>Form tree</h2>

<p>Now that there is a good abstraction it&#39;s time to fix how list forms are
evaluated. The major limitations are:</p>

<ul>
<li>The <code>car</code> cannot be an expression, it is currently assumed to be a symbol.</li>
<li>The <code>cdr</code> cannot contain expressions, it is assumed to be a list of
literals.</li>
</ul>

<p>To fix the first issue we must not assume the <code>car</code> to be a symbol. Instead,
it should be assumed to be any form that can be evaluated. If it is a
<code>SymbolForm</code>, that form will perform the environment lookup itself and return
the value.</p>

<p>The implementation of <code>SymbolForm</code> is trivial:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class SymbolForm implements Form</span>
<span class="x">{</span>
<span class="x">    private $symbol;</span>

<span class="x">    public function __construct($symbol)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;symbol = $symbol;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        return $env[$this-&gt;symbol];</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>That solves the the <code>car</code> problem, since it can now be any form. It gets
evaluated when the <code>ListForm</code> is evaluated.</p>

<p>The next problem is that the <code>cdr</code> is assumed to be a list of literals. The
same pattern that was applied for <code>car</code> can be applied here as well.</p>

<p>Instead of using the <code>cdr</code> values directly, they should be assumed to be a
list of forms, each of which is evaluated before the function is applied.</p>

<p>This means that literals need to be represented as forms as well:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class LiteralForm implements Form</span>
<span class="x">{</span>
<span class="x">    private $value;</span>

<span class="x">    public function __construct($value)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;value = $value;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Going back to the <code>ListForm</code>, here is the adjusted version which calls
<code>evaluate</code> on <code>car</code> and each element of <code>cdr</code> before applying the function:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class ListForm implements Form</span>
<span class="x">{</span>
<span class="x">    ...</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        $func = $this-&gt;car()-&gt;evaluate($env);</span>
<span class="x">        $args = $this-&gt;evaluateArgs($env, $this-&gt;cdr());</span>

<span class="x">        return call_user_func_array($func, $args);</span>
<span class="x">    }</span>

<span class="x">    ...</span>

<span class="x">    public function toArray()</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;forms;</span>
<span class="x">    }</span>

<span class="x">    private function evaluateArgs(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        return array_map(</span>
<span class="x">            function ($arg) use ($env) {</span>
<span class="x">                return $arg-&gt;evaluate($env);</span>
<span class="x">            },</span>
<span class="x">            $args-&gt;toArray()</span>
<span class="x">        );</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>This form tree should eliminate the problems of the previous <code>evaluate</code>
implementation. The only step left is constructing the forms.</p>

<p>If you want to see the implementation of <code>QuoteForm</code>, it can be found in the
Ilias repo:
<a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Form/QuoteForm.php"><code>Igorw\Ilias\Form\QuoteForm</code></a>.</p>

<h2>Form tree builder</h2>

<p>To create a form tree, there must be some object that is able to parse the
AST and translate the AST nodes into forms. For lack of a better name, this
object shall be called <code>FormTreeBuilder</code>.</p>

<p>For a sample input of:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[[&#39;+&#39;, 1, 2]]</span>
</code></pre></div>
<p>The tree builder should return:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[</span>
<span class="x">    new Form\ListForm([</span>
<span class="x">        new Form\SymbolForm(&#39;+&#39;),</span>
<span class="x">        new Form\LiteralForm(1),</span>
<span class="x">        new Form\LiteralForm(2),</span>
<span class="x">    ])</span>
<span class="x">]</span>
</code></pre></div>
<p>Implementing such a builder is quite trivial. The interface will be a method
named <code>parseAst</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class FormTreeBuilder</span>
<span class="x">{</span>
<span class="x">    public function parseAst(array $ast);</span>
<span class="x">}</span>
</code></pre></div>
<p>The AST is an array of s-expressions, <code>parseAst</code> will parse each one of them
and return an array of forms:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function parseAst(array $ast)</span>
<span class="x">{</span>
<span class="x">    return array_map([$this, &#39;parseSexpr&#39;], $ast);</span>
<span class="x">}</span>
</code></pre></div>
<p>An s-expression is either a list of s-expressions or an atom. Atoms are
handled by <code>parseAtom</code>. Lists are recursively parsed into a <code>ListForm</code>. Each
element of a list is a fully parsed form.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function parseSexpr($sexpr)</span>
<span class="x">{</span>
<span class="x">    if (!is_array($sexpr)) {</span>
<span class="x">        return $this-&gt;parseAtom($sexpr);</span>
<span class="x">    }</span>

<span class="x">    $list = $this-&gt;parseAst($sexpr);</span>
<span class="x">    return new Form\ListForm($list);</span>
<span class="x">}</span>
</code></pre></div>
<p>An atom is either a quoted value, a symbol or a literal. A quoted values
becomes <code>QuoteForm</code>, a symbol becomes a <code>SymbolForm</code> and a literal becomes a
<code>LiteralForm</code>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function parseAtom($atom)</span>
<span class="x">{</span>
<span class="x">    if ($atom instanceof Ast\QuotedValue) {</span>
<span class="x">        return new Form\QuoteForm($atom);</span>
<span class="x">    }</span>

<span class="x">    if (is_string($atom)) {</span>
<span class="x">        return new Form\SymbolForm($atom);</span>
<span class="x">    }</span>

<span class="x">    return new Form\LiteralForm($atom);</span>
<span class="x">}</span>
</code></pre></div>
<p>That is already enough to construct the form tree correctly. It&#39;s just a dumb
mapping from AST nodes to form objects.</p>

<h2>Environment</h2>

<p>One part that I did not explain yet is the environment. Previously this was
just a simple array of values. Now it is an <code>Environment</code> object that
implements the <code>ArrayAccess</code> interface.</p>

<p>In fact this <code>Environment</code> is really just a class that extends <code>ArrayObject</code>,
without adding any new behaviour. It allows for type hints and also enables
adding convenience factory methods that create pre-set environments. The
previous <code>environment</code> function can be replaced with a <code>standard</code> factory
method that returns an Environment which has all the core methods on it.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Environment extends \ArrayObject</span>
<span class="x">{</span>
<span class="x">    public static function standard()</span>
<span class="x">    {</span>
<span class="x">        return new static([</span>
<span class="x">            &#39;+&#39; =&gt; new Func\PlusFunc(),</span>
<span class="x">        ]);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Finally, the <code>plus</code> function should be moved to a <code>PlusFunc</code> class so that it
can be autoloaded. If PHP supported function autoloading this would not be
necessary. Using the <code>__invoke</code> magic method, the &quot;function object&quot; can
pretend to be a function.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">class PlusFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke()</span>
<span class="x">    {</span>
<span class="x">        return array_sum(func_get_args());</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>As you can see, the implementation is identical to <code>plus</code>. It behaves the same
way.</p>

<h2>Usage</h2>

<p>Phew.</p>

<p>This new evaluation process should be able to evaluate literals, nested
applications and symbols. Here is how the pieces are put together:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ast = [[&#39;+&#39;, 1, 2]];</span>
<span class="x">$env = Environment::standard();</span>

<span class="x">$builder = new FormTreeBuilder();</span>
<span class="x">$forms = $builder-&gt;parseAst($ast);</span>

<span class="x">foreach ($forms as $form) {</span>
<span class="x">    var_dump($form-&gt;evaluate($env));</span>
<span class="x">}</span>
</code></pre></div>
<p>This correctly returns <code>3</code>.</p>

<p>Let&#39;s try some more complex examples with nested <code>car</code> and <code>cdr</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ast = [</span>
<span class="x">    [&#39;+&#39;, 1, [&#39;+&#39;, 2, 3]],</span>
<span class="x">    [[&#39;get-plus-func&#39;], 1, 2],</span>
<span class="x">    [&#39;get-random-number&#39;],</span>
<span class="x">];</span>

<span class="x">$env = Environment::standard();</span>
<span class="x">$env[&#39;get-plus-func&#39;] = function () use ($env) {</span>
<span class="x">    return $env[&#39;+&#39;];</span>
<span class="x">};</span>
<span class="x">$env[&#39;get-random-number&#39;] = function () {</span>
<span class="x">    return 4;</span>
<span class="x">};</span>
</code></pre></div>
<p>And sure enough, these correctly evaluate to <code>6</code>, <code>3</code> and <code>4</code> respectively.
Ça marche!</p>

<h2>Summary</h2>

<ul>
<li>Introduced a new concept of forms, which are objects that can be evaluated.</li>
<li>There are different types of forms: List, Symbol, Literal, Quote.</li>
<li>The <code>FormTreeBuilder</code> parses an AST into a nested tree of forms.</li>
</ul>

<p>The next post will introduce a completely new concept: Special forms. They
will allow adding more low-level building blocks to the language, such as
<code>if</code>, <code>define</code> and user-land functions.</p>

<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/form-eval.php">Source code: Ilias <code>examples/form-eval.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html"><strong>forms</strong></a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Evaluation</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/12/sexpr-eval.html"/>
        <id>https://igor.io/2012/12/12/sexpr-eval.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Evaluation</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html"><strong>eval</strong></a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>So far this series has mostly been about s-expressions as a data format. I
would like to start exploring a more advanced space now: Treating
s-expressions as code and evaluating them.</p>

<p>In many Lisp implementations this is done by two functions: <em>eval</em> and
<em>apply</em>. Eval takes an expression and an environment and will evaluate that
expression in the context of the env. Apply applies a function, which means
evaluating the body of the function against a set of arguments. The arguments
are evaluated before the function is applied.</p>

<h2>Addition</h2>

<p>Ever since <a href="https://github.com/Herzult/SimplePHPEasyPlus">SimplePHPEasyPlus</a>
we know that adding two numbers together is hard.</p>

<p>So let&#39;s start with evaluating a very basic case of an s-expression. The
addition of two numbers:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>In the AST, that expression is represented as:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[[&#39;+&#39;, 1, 2]]</span>
</code></pre></div>
<p>The resulting computation of when translating this function call to PHP would
be:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">1 + 2</span>
</code></pre></div>
<p>It turns out that in Lisp you can pass more than two arguments to <code>+</code>, and it
will return the sum of all of them. With that in mind, perhaps this is a more
accurate PHP equivalent:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">array_sum([1, 2])</span>
</code></pre></div>
<p>Which in fact maps better to the way Lisp works because <code>+</code> is no longer a
special construct. It is just a function.</p>

<h2>Basic eval</h2>

<p>The starting point for implementing this is the AST. It is an array of sexprs
that should be evaluated. Each evaluated sexpr returns a value and the value
of the last evaluation should be returned.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function evaluateAst(array $ast, array $env)</span>
<span class="x">{</span>
<span class="x">    $value = null;</span>
<span class="x">    foreach ($ast as $sexpr) {</span>
<span class="x">        $value = evaluate($sexpr, $env);</span>
<span class="x">    }</span>
<span class="x">    return $value;</span>
<span class="x">}</span>
</code></pre></div>
<p>The environment represents the context of this evaluation and will become
useful later on.</p>

<p><code>evaluate</code> takes a sexpr and returns the result of that evaluation. Right now
we want to evaluate <code>(+ 1 2)</code>, which is the application of the function <code>+</code> to
the arguments <code>1</code> and <code>2</code>.</p>

<p>This function application is represented as a list whose first element is a
<em>symbol</em> referencing the function by name, all other elements are arguments to
that function.</p>

<p>In Lisp the first element of a list is called the <code>car</code>, the rest of the list
is called the <code>cdr</code> (pronounced &quot;cudder&quot;). These crazy names exist for
historical reasons but are in wide use.</p>

<p>Here are their implementations:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function car(array $list)</span>
<span class="x">{</span>
<span class="x">    return $list[0];</span>
<span class="x">}</span>

<span class="x">function cdr(array $list)</span>
<span class="x">{</span>
<span class="x">    return array_slice($list, 1);</span>
<span class="x">}</span>
</code></pre></div>
<p>For the sexpr <code>(+ 1 2)</code>, the <code>car</code> is <code>+</code> and the <code>cdr</code> is <code>(1 2)</code>. Which
happen to be the function name and the arguments.</p>

<p>Now, instead of hard-coding the possible functions like <code>+</code> into <code>evaluate</code>,
it would be better to store them in the environment. After a simple lookup,
the function can be applied to the given arguments.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function evaluate($sexpr, array $env)</span>
<span class="x">{</span>
<span class="x">    $fn = car($sexpr);</span>
<span class="x">    $args = cdr($sexpr);</span>

<span class="x">    return call_user_func_array($env[$fn], $args);</span>
<span class="x">}</span>
</code></pre></div>
<p>The last piece of the puzzle is producing an environment that actually
contains the <code>+</code> function.</p>

<p>As mentioned previously, PHP&#39;s <code>array_sum</code> is a good match for the addition
functionality. However, because <code>array_sum</code> takes an array of arguments, it
needs to be wrapped in a new <code>plus</code> function that uses <code>func_get_args</code> to get
all passed arguments as opposed to one array argument.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">array_sum([1, 2])</span>
<span class="x">plus(1, 2)</span>
</code></pre></div>
<p>The plus function:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">function plus(/* $numbers... */)</span>
<span class="x">{</span>
<span class="x">    return array_sum(func_get_args());</span>
<span class="x">}</span>
</code></pre></div>
<p>Finally, why not provide some sort of default environment which contains the
core functions. It&#39;s simply an array which maps from function name symbols to
actual PHP functions:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function environment()</span>
<span class="x">{</span>
<span class="x">    return [</span>
<span class="x">        &#39;+&#39; =&gt; &#39;Igorw\Ilias\plus&#39;,</span>
<span class="x">    ];</span>
<span class="x">}</span>
</code></pre></div>
<p>This should be enough to evaluate <code>(+ 1 2)</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ast = [[&#39;+&#39;, 1, 2]];</span>
<span class="x">$env = environment();</span>
<span class="x">var_dump(evaluateAst($ast, $env));</span>
</code></pre></div>
<p>And sure enough, this returns <code>3</code>. Just to be extra sure, how about
<code>(+ 1 2 3)</code>? It returns <code>6</code>, as expected.</p>

<p>Sweet!</p>

<h2>Limitations</h2>

<p>This implementation is already quite flexible. It allows new functions to be
added dynamically, it allows the Lisp code to call any PHP function that is
mapped in the environment. But overall it is very basic, and many things are
not yet working.</p>

<ul>
<li>Only function application is supported.</li>
<li>The expression cannot be a literal <code>42</code>.</li>
<li>The expression cannot be a quoted value <code>&#39;foo</code>.</li>
<li>The expression cannot be a quoted list <code>&#39;(foo bar)</code>.</li>
<li>The <code>car</code> cannot be an application <code>((get-plus) 1 2)</code>.</li>
<li>The <code>cdr</code> cannot contain nested applications <code>(+ 1 (+ 2 3))</code>.</li>
</ul>

<p>To address these issues, the following changes need to be made to <code>evaluate</code>:</p>

<ul>
<li>It needs to support other forms than simple function applications.</li>
<li>It needs to evaluate the <code>car</code> of lists before the environment lookup.</li>
<li>It needs to evaluate each element from the <code>cdr</code> of lists before application.</li>
</ul>

<p>In the next post I will improve the overall design of how evaluation works,
fix the mentioned shortcomings and introduce some new concepts.</p>

<h2>Conclusion</h2>

<ul>
<li>Adding two numbers is hard.</li>
<li>Evaluating a Lisp function application is easy.</li>
<li><code>car</code> and <code>cdr</code> are bad names, even worse than <em>sexpr</em>.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/basic-eval.php">Source code: Ilias <code>examples/basic-eval.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html"><strong>eval</strong></a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Reader</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/08/sexpr-reader.html"/>
        <id>https://igor.io/2012/12/08/sexpr-reader.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Reader</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html"><strong>reader</strong></a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The previous post discussed the first step of parsing: tokenization. Now I
want to dive into token parsing. Usually the program that parses the tokens
into an abstract syntax tree or AST is called a <em>parser</em>.</p>

<p>In the context of s-expressions and Lisp, it is usually refered to as a
<em>reader</em>, so that is the terminology that I will use.</p>

<p><center>
    <img src="/sexpr/reader.png" alt="parser process">
</center></p>

<h2>Abstract syntax tree</h2>

<p>The lexer has constructed a nice token stream, but that is not very useful
yet. A token stream does not tell me very much. What I want is a format that
represents the hierarchy of the data.</p>

<p>Which is exactly what an abstract syntax tree does. For sexprs the AST is
basically just an in-memory representation of the lists which form the sexpr.</p>

<p>Similarly to how token streams usually have token names, ASTs usually have
node names. However, since sexprs can be considered a data format I will just
parse them into flat PHP arrays directly.</p>

<p>Going back to the sexprs that I fed into the lexer and the tokens it spat out,
what should I expect the reader to give me from those tokens? Here are the
outputs that I expect:</p>

<div class="ascii-table"><pre>
+---------------+---------------------------------+------------------------+
| Sexpr         | Tokens                          | AST                    |
+---------------+---------------------------------+------------------------+
| foo           | ["foo"]                         | ["foo"]                |
| an-atom       | ["an-atom"]                     | ["an-atom"]            |
| ()            | ["(", ")"]                      | [[]]                   |
| (foo)         | ["(", "foo", ")"]               | [["foo"]]              |
| (foo bar)     | ["(", "foo", "bar", ")"]        | [["foo", "bar"]]       |
| (foo bar baz) | ["(", "foo", "bar", "baz", ")"] | [["foo", "bar"]]       |
| (+ 1 2)       | ["(", "+", "1", "2", ")"]       | [["+", 1, 2]]          |
+---------------+---------------------------------+------------------------+
</pre></div>

<p>Note that the AST is always an array. The reason for that is that the top
level of the sexpr can contain many lists like so:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
<span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
<span class="p">(</span><span class="nv">baz</span><span class="p">)</span>
</code></pre></div>
<p>Which would result in:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[[&quot;foo&quot;], [&quot;bar&quot;], [&quot;baz&quot;]]</span>
</code></pre></div>
<p>Also note that the parser will already make some type distinctions. If an atom
looks like a number, it will be represented as an integer.</p>

<h2>Basic reader</h2>

<p>The interface of the reader is very straight-forward. It has a single <em>parse</em>
method which takes the token stream as an argument and returns the AST.</p>

<p>Usage:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$reader = new Reader();</span>
<span class="x">$ast = $reader-&gt;parse($tokens);</span>
</code></pre></div>
<p>Source:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Reader</span>
<span class="x">{</span>
<span class="x">    public function parse(array $tokens)</span>
<span class="x">    {</span>
<span class="x">        $ast = [];</span>

<span class="x">        for ($i = 0, $length = count($tokens); $i &lt; $length; $i++) {</span>
<span class="x">            $token = $tokens[$i];</span>

<span class="x">            // extract atoms</span>
<span class="x">            if (!in_array($token, [&#39;(&#39;, &#39;)&#39;])) {</span>
<span class="x">                $ast[] = $this-&gt;normalizeAtom($token);</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // parse list recursively</span>
<span class="x">            if (&#39;(&#39; === $token) {</span>
<span class="x">                list($listTokens, $i) = $this-&gt;extractListTokens($tokens, $i);</span>
<span class="x">                $ast[] = $this-&gt;parse($listTokens);</span>
<span class="x">                continue;</span>
<span class="x">            }</span>
<span class="x">        }</span>

<span class="x">        return $ast;</span>
<span class="x">    }</span>

<span class="x">    ...</span>
<span class="x">}</span>
</code></pre></div>
<p>If you recall the different implicit token types: <code>T_OPEN</code>, <code>T_CLOSE</code>,
<code>T_ATOM</code> and <code>T_QUOTE</code>. And I will ignore quoting for now.</p>

<p>Any token that is not an opening or closing brace is an atom. Atoms are
normalized, then appended to the AST. Normalization just detects the atom type
and casts it accordingly.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function normalizeAtom($atom)</span>
<span class="x">{</span>
<span class="x">    if (is_numeric($atom)) {</span>
<span class="x">        return (int) $atom;</span>
<span class="x">    }</span>

<span class="x">    return $atom;</span>
<span class="x">}</span>
</code></pre></div>
<p>If the reader finds an open token, it must read all tokens until it finds a
matching close token and then parse the whole range into a list. That list can
then be appended to the AST.</p>

<p>The method for finding the matching brace and extracting the tokens simply
needs to keep track of the nesting level and stop when the nesting level goes
back to zero.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function extractListTokens(array $tokens, $i)</span>
<span class="x">{</span>
<span class="x">    $level = 0;</span>
<span class="x">    $init = $i;</span>

<span class="x">    for ($length = count($tokens); $i &lt; $length; $i++) {</span>
<span class="x">        $token = $tokens[$i];</span>

<span class="x">        if (&#39;(&#39; === $token) {</span>
<span class="x">            $level++;</span>
<span class="x">        }</span>

<span class="x">        if (&#39;)&#39; === $token) {</span>
<span class="x">            $level--;</span>
<span class="x">        }</span>

<span class="x">        if (0 === $level) {</span>
<span class="x">            return [</span>
<span class="x">                array_slice($tokens, $init + 1, $i - ($init + 1)),</span>
<span class="x">                $i,</span>
<span class="x">            ];</span>
<span class="x">        }</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The reader is designed to be stateless, which is why it does not store the
tokens or the parsing position in member variables.</p>

<h2>Quoted values</h2>

<p>In its current state, the reader is able to parse most of the provided test
cases. One remaining problem however are quoted values.</p>

<p>In fact, because this reader does not represent the AST with an abstract type
of node, we have no way of distinguishing between quoted and non-quoted
values. There is an easy hack which allows it to be handled in a fairly clean
way though: encapsulating quoted values within <code>QuotedValue</code> objects.</p>

<p>The <code>QuotedValue</code> class just wraps around a value to mark it as quoted:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class QuotedValue</span>
<span class="x">{</span>
<span class="x">    private $value;</span>

<span class="x">    public function __construct($value)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;value = $value;</span>
<span class="x">    }</span>

<span class="x">    public function getValue()</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Now, in order to parse these quoted values correctly we need to detect the
<code>T_QUOTE</code> token:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">// wrap quoted value</span>
<span class="x">if (&quot;&#39;&quot; === $token) {</span>
<span class="x">    list($parsedToken, $i) = $this-&gt;parseQuotedToken($tokens, $i);</span>
<span class="x">    $ast[] = $parsedToken;</span>
<span class="x">    continue;</span>
<span class="x">}</span>
</code></pre></div>
<p>The quoted value is either an atom or a list. Since lists consist of multiple
tokens, the reader needs to do some extra work here to completely extract all
of the tokens:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function parseQuotedToken(array $tokens, $i)</span>
<span class="x">{</span>
<span class="x">    // skip past quote char</span>
<span class="x">    $i++;</span>

<span class="x">    // quoted atom</span>
<span class="x">    if (&#39;(&#39; !== $tokens[$i]) {</span>
<span class="x">        $atom = $this-&gt;normalizeAtom($tokens[$i]);</span>
<span class="x">        return [</span>
<span class="x">            new QuotedValue($atom),</span>
<span class="x">            $i,</span>
<span class="x">        ];</span>
<span class="x">    }</span>

<span class="x">    // quoted list</span>
<span class="x">    list($listTokens, $i) = $this-&gt;extractListTokens($tokens, $i);</span>
<span class="x">    $list = $this-&gt;parse($listTokens);</span>

<span class="x">    return [</span>
<span class="x">        new QuotedValue($list),</span>
<span class="x">        $i,</span>
<span class="x">    ];</span>
<span class="x">}</span>
</code></pre></div>
<p>And that&#39;s it, the reader is now correctly parsing quoted values as well.</p>

<h2>Problems</h2>

<p>This implementation is quite naïve, a lot of stuff is missing. The biggest
problem is the complete lack of error handling.</p>

<p>A parser should validate its input correctly. It should expect valid follow-up
tokens to the current one and throw an exception in your face if you feed it
invalid tokens.</p>

<p>Speaking of error handling and exceptions, it should try to give useful
exception messages. If a parse error occurs, it should tell you exactly where,
with a contextual snippet of the input code. And it should include line
numbers.</p>

<p>Does the reader have access to the line numbers? No. The lexer did not provide
them. If the token data structure were extended to contain more information,
then the reader would be able to give the user more meaningful error messages.</p>

<p>This is what the token data structure could look like:</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">Token</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">type</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">source</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">line</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">offset</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>But I will keep it simple for now.</p>

<h2>Parsing an s-expression</h2>

<p>With the lexer and the parser in place, they can now be combined to parse
s-expressions into an AST:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$code = &#39;(+ 1 2)&#39;;</span>

<span class="x">$lexer  = new Lexer();</span>
<span class="x">$reader = new Reader();</span>

<span class="x">$tokens = $lexer-&gt;tokenize($code);</span>
<span class="x">$ast    = $reader-&gt;parse($tokens);</span>

<span class="x">var_dump($ast);</span>
<span class="x">// [[&quot;+&quot;, 1, 2]]</span>
</code></pre></div>
<p>Hooray, it works!</p>

<h2>Conclusion</h2>

<ul>
<li>The reader parses a token stream into an AST.</li>
<li>Writing a reliable parser is hard.</li>
<li>I want to know how to interpret an abstract syntax tree.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/nikic/PHP-Parser">nikic/PHP-Parser</a></li>
<li><a href="https://github.com/schmittjoh/parser-lib">schmittjoh/parser-lib</a></li>
<li><a href="https://github.com/fabpot/Twig">fabpot/Twig</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Reader.php">Source code: <code>Igorw\Ilias\Reader</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/ReaderTest.php">Source code: <code>Igorw\Ilias\ReaderTest</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html"><strong>reader</strong></a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Lexer</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/07/sexpr-lexer.html"/>
        <id>https://igor.io/2012/12/07/sexpr-lexer.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Lexer</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html"><strong>lexer</strong></a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>In this follow-up post to s-expressions I would like to introduce you to
lexical analysis.</p>

<p>Parsing a language or a data format is often implemented as
a two step process. The first step is <em>lexing</em> which takes raw data and
translates it to a <em>token stream</em>. The second step is <em>parsing</em> which
translates a token stream to an <em>abstract syntax tree</em>.</p>

<p><center>
    <img src="/sexpr/parser-process.png" alt="parser process">
</center></p>

<h2>Tokenization</h2>

<p>The job of the lexer is tokenization. You give it code, it looks at the
characters, groups them and labels those groups with some sort of type.</p>

<p>It usually does not perform any validation on the tokens, except for very
basic checks, such as throwing an exception if no valid token is matched at
all.</p>

<p>Here is an example of some possible inputs you could feed into an sexpr lexer,
and the resulting outputs:</p>

<div class="ascii-table"><pre>
+---------------+----------------------------------------------------+
| Sexpr         | Tokens                                             |
+---------------+----------------------------------------------------+
| foo           | ["foo"]                                            |
| an-atom       | ["an-atom"]                                        |
| ()            | ["(", ")"]                                         |
| (foo)         | ["(", "foo", ")"]                                  |
| (foo bar)     | ["(", "foo", "bar", ")"]                           |
| (foo bar baz) | ["(", "foo", "bar", "baz", ")"]                    |
| (+ 1 2)       | ["(", "+", "1", "2", ")"]                          |
| ((a 1) (b 2)) | ["(", "(", "a", "1", ")", "(", "b", "2", ")", ")"] |
+---------------+----------------------------------------------------+
</pre></div>

<p>A more advanced lexer could define specific token types such as <code>T_OPEN</code>,
<code>T_CLOSE</code>, <code>T_ATOM</code> and encode them as part of the token stream. In the case
of s-expressions it&#39;s very easy to detect the token type from its raw
characters, so just returning a flat array of strings will suffice for now.</p>

<h2>Quoting</h2>

<p>Before we look at the actual code for lexing, you need to understand one more
concept about s-expressions that I shamelessly omitted in the last post:
quoting.</p>

<p>Since sexprs are code in Lisp, non-numeric atoms are interpreted as variables
and lists are interpreted as function calls. In order to represent data and
have a sexpr not evaluate, you need to quote the value.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">quote</span> <span class="nv">foo</span><span class="p">)</span>
<span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</code></pre></div>
<p>There is also a shortcut for this: just prepend a single quote in front of the
expression that you want to quote.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="ss">&#39;foo</span>
<span class="o">&#39;</span><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>Now you can apply the <code>length</code> function with a list of atoms, which will in
this case return <code>3</code>:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">length</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</code></pre></div>
<p>Going back to the lexer, this means that it should turn the <code>&#39;</code> into a
<code>T_QUOTE</code> token, which I will represent using the quote character.</p>

<div class="ascii-table"><pre>
+--------+------------------------+
| Sexpr  | Tokens                 |
+--------+------------------------+
| 'foo   | ["'", 'foo']           |
| '(foo) | ["'", '(', 'foo', ')'] |
+--------+------------------------+
</pre></div>

<p>Those test cases should already give a fairly complete subset of sexpr tokens.</p>

<h2>Lexer</h2>

<blockquote>
<p>Note: All of the code samples from this series are based on a very simplistic Lisp
implementation I did in PHP: <a href="https://github.com/igorw/ilias">Ilias</a>.</p>
</blockquote>

<p>The lexer will be a class with a single <code>tokenize</code> method.</p>

<p>Usage:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$lexer = new Lexer();</span>
<span class="x">$tokens = $lexer-&gt;tokenize($code);</span>
</code></pre></div>
<p>Source:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Lexer</span>
<span class="x">{</span>
<span class="x">    private $whitespace = [&#39; &#39;, &quot;\t&quot;, &quot;\r&quot;, &quot;\n&quot;];</span>
<span class="x">    private $nonAtom = [&#39;(&#39;, &#39;)&#39;, &#39; &#39;, &quot;\t&quot;, &quot;\r&quot;, &quot;\n&quot;];</span>

<span class="x">    public function tokenize($code)</span>
<span class="x">    {</span>
<span class="x">        $tokens = [];</span>

<span class="x">        for ($i = 0, $length = strlen($code); $i &lt; $length; $i++) {</span>
<span class="x">            $char = $code[$i];</span>

<span class="x">            // kill whitespace</span>
<span class="x">            if (in_array($char, $this-&gt;whitespace)) {</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // parens are single tokens</span>
<span class="x">            if (in_array($char, [&#39;(&#39;, &#39;)&#39;])) {</span>
<span class="x">                $tokens[] = $char;</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // quote token (just the quote character)</span>
<span class="x">            if (&quot;&#39;&quot; === $char) {</span>
<span class="x">                $tokens[] = $char;</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // atom token</span>
<span class="x">            $atom = &#39;&#39;;</span>
<span class="x">            $next = $char;</span>
<span class="x">            do {</span>
<span class="x">                $atom .= $next;</span>
<span class="x">                $next = ($length &gt; $i+1) ? $code[$i+1] : null;</span>
<span class="x">            } while (null !== $next &amp;&amp; !in_array($next, $this-&gt;nonAtom) &amp;&amp; ++$i);</span>
<span class="x">            $tokens[] = $atom;</span>
<span class="x">        }</span>

<span class="x">        return $tokens;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The lexer consumes the input one character at a time. First it checks for
whitespace, which is simply ignored. Then it detects single-char tokens which
are pushed onto the token stream array. Finally, it turns all chars that are
part of an atom into an atom token.</p>

<p>Well, that is already enough to correctly tokenize the above test cases and
quite a few more.</p>

<h2>Conclusion</h2>

<ul>
<li>Parsing is usually a two step process: Lexing and token parsing.</li>
<li>A lexer turns raw data into a token stream.</li>
<li>I want to know how to parse a token stream into an abstract syntax tree.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="http://nikic.github.com/2011/10/23/Improving-lexing-performance-in-PHP.html">Improving lexing performance in PHP - nikic</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Lexer.php">Source code: <code>Igorw\Ilias\Lexer</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/LexerTest.php">Source code: <code>Igorw\Ilias\LexerTest</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html"><strong>lexer</strong></a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/06/sexpr.html"/>
        <id>https://igor.io/2012/12/06/sexpr.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions</h1>

<p>(<a href="/2012/12/06/sexpr.html"><strong>sexpr</strong></a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>A symbolic expression is a notation of a nested list structure. It&#39;s origin
lies within the Lisp family of programming languages whose entire syntax
consists of these expressions.</p>

<p>I want to introduce you to the syntax and in subsequent posts go into how it
can be parsed and interpreted.</p>

<h2>Syntax</h2>

<p>An s-expression is either an atom or an ordered pair of s-expressions. In
practice that just means that you have lists of s-expressions that can be
nested.</p>

<p>An atom is a symbol which is essentially a value that is not a list. Here are
a few examples of atoms:</p>

<ul>
<li><code>foo</code></li>
<li><code>an-atom</code></li>
<li><code>42</code></li>
</ul>

<p>Lists are represented by parentheses. They can be empty, or hold atoms,
delimited by spaces.</p>

<ul>
<li><code>()</code></li>
<li><code>(foo)</code></li>
<li><code>(foo bar)</code></li>
<li><code>(foo bar baz)</code></li>
</ul>

<p>Lists can also contain other lists, allowing them to be nested:</p>

<ul>
<li><code>((foo) (bar))</code></li>
<li><code>((a 1) (b 2))</code></li>
<li><code>(alpha (beta (gamma (delta))))</code></li>
</ul>

<p>This should give you a basic understanding of how the sexpr syntax works.</p>

<h2>Representing data</h2>

<p>You can use this format to represent data, just as you would use XML or JSON.
In fact, let&#39;s take the <code>composer.json</code> from
<a href="https://github.com/igorw/yolo">YOLO</a> (the microframework with swag):</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;igorw/yolo&quot;</span><span class="p">,</span>
    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;The microframework with swag.&quot;</span><span class="p">,</span>
    <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;useless&quot;</span><span class="p">,</span> <span class="s2">&quot;microframework&quot;</span><span class="p">,</span> <span class="s2">&quot;academic&quot;</span><span class="p">,</span> <span class="s2">&quot;swag&quot;</span><span class="p">],</span>
    <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
    <span class="nt">&quot;authors&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Igor Wiedler&quot;</span><span class="p">,</span>
            <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;igor@wiedler.ch&quot;</span>
        <span class="p">}</span>
    <span class="p">]</span>
    <span class="err">...</span>
<span class="p">}</span>
</code></pre></div>
<p>And transpose it to sexpr:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">dict</span> <span class="p">(</span><span class="nv">name</span> <span class="s">&quot;igorw/yolo&quot;</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">description</span> <span class="s">&quot;The microframework with swag.&quot;</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">keywords</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">useless</span> <span class="nv">microframework</span> <span class="nv">academic</span> <span class="nv">swag</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">license</span> <span class="s">&quot;MIT&quot;</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">authors</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nv">dict</span> <span class="p">(</span><span class="nv">name</span> <span class="s">&quot;Igor Wiedler&quot;</span><span class="p">)</span>
                           <span class="p">(</span><span class="nv">email</span> <span class="s">&quot;igor@wiedler.ch&quot;</span><span class="p">)))))</span>
</code></pre></div>
<p>A few things worth noting:</p>

<ul>
<li>There is a <code>dict</code> keyword, which produces a dictionary from the pairs it
receives as arguments.</li>
<li>Strings are written between quotes, which groups them from the whitespace.</li>
<li>The <code>keywords</code> are represented by a quoted list of atoms.</li>
<li>The data in <code>authors</code> is explicitly constructed as a list using a <code>list</code>
construct.</li>
</ul>

<p>Try not to worry about those details too much at this point. This is just one
possible way of representing that data.</p>

<blockquote>
<p>Side note: Wouldn&#39;t it be awesome if composer supported <code>composer.sexpr</code>
files natively, so that we would no longer have to write JSON? No, not
really. I would argue that the benefits of a unified standard format
outweigh pluggability in this case.</p>
</blockquote>

<h2>Representing code</h2>

<p>What&#39;s really fascinating about s-expressions is that they can be used to
represent not only data, but also code.</p>

<p>Here is one of the most basic Lisp code snippets:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>It looks cryptic, but it&#39;s actually quite simple. Instead of infix notation,
this is using Polish notation, also known as <em>prefix notation</em>. What the
expression represents is this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">1 + 2</span>
</code></pre></div>
<p>The parentheses tell you that it&#39;s a <em>function application</em> or
function invocation. The first element of the list is a function, the
remaining elements are the arguments passed to that function. <code>+</code> is simply a
function which sums up any arguments it receives.</p>

<p>So what about other functions, that are not operators? They work the same way.
For example, this application:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">foo</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</code></pre></div>
<p>Would be written like this in PHP:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">foo($a, $b);</span>
</code></pre></div>
<p>That&#39;s about as far as I will go in this post. This should give you an idea
about the basics of the syntax and how to read it. Stay tuned for follow-up
posts.</p>

<h2>Conclusion</h2>

<ul>
<li>S-expressions are a strange looking format that is simple, yet powerful.</li>
<li>They can represent both data and code.</li>
<li>I want to know how to parse them in PHP.</li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html"><strong>sexpr</strong></a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Scaling a Silex code base</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/11/09/scaling-silex.html"/>
        <id>https://igor.io/2012/11/09/scaling-silex.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Scaling a Silex code base</h1>

<blockquote>
<p><strong>Warning:</strong> This blog post is <em>not</em> about clouds, it&#39;s about people.</p>
</blockquote>

<p>One common misconception about <a href="http://silex.sensiolabs.org">silex</a> and
microframeworks in general is that they are only suited for small, simple
apps, APIs and prototyping. Of course, those use cases are the main selling
point, but they are by no means the limit of what is possible.</p>

<h2>Creating the mess</h2>

<p>The first experience with silex will most likely be something like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app-&gt;get(&#39;/&#39;, function () {</span>
<span class="x">    return &#39;Hi&#39;;</span>
<span class="x">});</span>
</code></pre></div>
<p>Cute. Now fast-forward a few months, and it is looking more like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app-&gt;get(&#39;/&#39;, function (Request $request) use ($app) {</span>
<span class="x">    $products = $app[&#39;db&#39;]-&gt;fetchAll(&#39;SELECT * FROM products&#39;);</span>

<span class="x">    $suggestions = [];</span>
<span class="x">    $token = $app[&#39;security&#39;]-&gt;getToken();</span>
<span class="x">    if (null !== $token) {</span>
<span class="x">        $user = $token-&gt;getUser();</span>

<span class="x">        $friends = $app[&#39;db&#39;]-&gt;fetchAll(&#39;SELECT u.* FROM users u JOIN purchases pu ON pu.user_id = user.id WHERE pu.product_id IN (SELECT product_id FROM purchases WHERE user_id = ?)&#39;, [(int) $user-&gt;getId()]);</span>

<span class="x">        $sql = sprintf(&#39;SELECT p.* FROM products p JOIN purchases pu ON pu.product_id = p.id WHERE pu.user_id IN (%s)&#39;, implode(&#39;,&#39;, array_map(function ($friend) { return (int) $friend[&#39;id&#39;]; }, $friends)));</span>
<span class="x">        $suggestions = $app[&#39;db&#39;]-&gt;fetchAll($sql);</span>
<span class="x">    }</span>

<span class="x">    $app[&#39;predis&#39;]-&gt;incr(&#39;pageviews&#39;);</span>
<span class="x">    $app[&#39;predis&#39;]-&gt;incr(&#39;pageviews:index&#39;);</span>

<span class="x">    $data = [</span>
<span class="x">        &#39;products&#39;      =&gt; $products,</span>
<span class="x">        &#39;suggestions&#39;   =&gt; $suggestions,</span>
<span class="x">    ];</span>

<span class="x">    if (&#39;application/json&#39; === $request-&gt;headers-&gt;get(&#39;Accept&#39;)) {</span>
<span class="x">        return $app-&gt;json($data);</span>
<span class="x">    }</span>

<span class="x">    return $app[&#39;twig&#39;]-&gt;render(&#39;index.html.twig&#39;, $data);</span>
<span class="x">});</span>
</code></pre></div>
<p>This is a vastly simplified example, but you get the idea. Imagine 20-30 of
these inline controllers. Even if you extract everything into services, you
will still be left with a single file of bloat. I am going to suggest
something revolutionary: <em>Move your code into classes!</em></p>

<p>One of the more common complaints that I hear is that silex forces you to put
all of your code into a single file. Now to be fair, controllers as classes
are only very briefly mentioned in the documentation. There are two pull
requests that will document the feature properly and appropriately.</p>

<blockquote>
<p>Note: I am going to assume that these classes will be loaded via PSR-0
autoloading, managed by composer.</p>
</blockquote>

<h2>Controllers in classes</h2>

<p>This is how it is done:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Shop\Controller;</span>

<span class="x">use Silex\Application;</span>
<span class="x">use Symfony\Component\HttpFoundation\Request;</span>

<span class="x">class ShopController</span>
<span class="x">{</span>
<span class="x">    public function indexAction(Request $request, Application $app)</span>
<span class="x">    {</span>
<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>And now the routing looks like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app-&gt;get(&#39;/&#39;,          &#39;Igorw\Shop\Controller\ShopController::indexAction&#39;);</span>
<span class="x">$app-&gt;match(&#39;/login&#39;,   &#39;Igorw\Shop\Controller\ShopController::loginAction&#39;);</span>
<span class="x">$app-&gt;get(&#39;/product&#39;,   &#39;Igorw\Shop\Controller\ShopController::productAction&#39;);</span>
</code></pre></div>
<p>And if those class names are too damn long, relax. You can easily write a
function to shorten them. Did you know that it is okay to write functions in
PHP? It is!</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function controller($shortName)</span>
<span class="x">{</span>
<span class="x">    list($shortClass, $shortMethod) = explode(&#39;/&#39;, $shortName, 2);</span>

<span class="x">    return sprintf(&#39;Igorw\Shop\Controller\%sController::%sAction&#39;, ucfirst($shortClass), $shortMethod);</span>
<span class="x">}</span>

<span class="x">$app-&gt;get(&#39;/&#39;, controller(&#39;shop/index&#39;));</span>
<span class="x">$app-&gt;match(&#39;/login&#39;, controller(&#39;shop/login&#39;));</span>
<span class="x">$app-&gt;get(&#39;/product&#39;, controller(&#39;shop/product&#39;));</span>
</code></pre></div>
<p>It is worth noting that although we specified the controller name as a string
here, it will <em>not</em> call the method statically (unless it is a static method),
but in fact create an instance of the class on demand. This ensures that the
class is lazy-loaded and only instantiated if that particular route matches.</p>

<p>This is done using the Symfony2 <code>ControllerResolver</code>, which can be extended to
resolve the provided controller name to a <code>callable</code> dynamically, allowing the
short notation of controller names to be supported directly, without the call
to <code>controller()</code>.</p>

<h2>Logic in services</h2>

<p>Since the controllers are still huge, you will most likely want to rip them
apart and extract as much code as possible into separate classes, which can
then be defined as services on the pimple container.</p>

<p>Here is an example of what you <em>might</em> end up with:</p>

<ul>
<li><code>Igorw\Store\Storage\ProductRepository</code></li>
<li><code>Igorw\Store\Storage\StatsCollector</code></li>
<li><code>Igorw\Store\View\ProductJsonView</code></li>
<li><code>Igorw\Store\View\ProductTwigView</code></li>
<li><code>Igorw\Store\Suggestor</code></li>
</ul>

<p>And a more manageable controller:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class ShopController</span>
<span class="x">{</span>
<span class="x">    public function indexAction(Request $request, Application $app)</span>
<span class="x">    {</span>
<span class="x">        $products = $app[&#39;repo.product&#39;]-&gt;findAll();</span>

<span class="x">        $user = $this-&gt;getUser($app);</span>
<span class="x">        $suggestions = ($user) ? $app[&#39;suggestor&#39;]-&gt;suggestProducts($user) : [];</span>

<span class="x">        $app[&#39;stats&#39;]-&gt;pageview(&#39;index&#39;);</span>

<span class="x">        $data = [</span>
<span class="x">            &#39;products&#39;      =&gt; $products,</span>
<span class="x">            &#39;suggestions&#39;   =&gt; $suggestions,</span>
<span class="x">        ];</span>

<span class="x">        return $app[&#39;view_factory&#39;]</span>
<span class="x">            -&gt;create($request, $data)</span>
<span class="x">            -&gt;render();</span>
<span class="x">    }</span>

<span class="x">    private function getUser(Application $app)</span>
<span class="x">    {</span>
<span class="x">        $token = $app[&#39;security&#39;]-&gt;getToken();</span>
<span class="x">        return $token ? $token-&gt;getUser() : null;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Is there room for improvement? Certainly. The next step would be to define the
controllers themselves as services by extending the <code>ControllerResolver</code>. This
would eliminate the dependency that the controllers have on the service
locator, turning it into a real service container. I will not cover that here.
If you are interested, <a href="http://davedevelopment.co.uk/2012/10/03/Silex-Controllers-As-Services.html">read this excellent blog post by Dave
Marshall</a>.</p>

<h2>Taming the beast</h2>

<p>As you hopefully see now, silex is able to grow organically as your code base
grows. It does not impose the lack of structure on you. The
<code>Silex\Application</code> class has two main responsibilities (yes, it&#39;s an SRP
violation, deal with it):</p>

<ul>
<li>Silex is a <strong>Service Container</strong>* based on pimple.</li>
<li>Silex is a <strong>Route Builder</strong>.</li>
</ul>

<p>* In most cases it is used as a service locator, not a service container.</p>

<p>The route builder responsibility becomes visible instantly once you move the
controllers into separate classes. At that point it is basically a PHP API for
a <code>routing.yml</code> file with some extra bells and whistles.</p>

<p>The technical issues of growing a silex code base have been addressed. They&#39;re
gone. In this case we ended up with something that is quite similar to
full-stack Symfony2 in many ways. It is not using any static configuration
files, and is lacking many of the features that the full-stack framework has.
The main difference is something completely different though.</p>

<h2>Silex vs Symfony2</h2>

<p>I have had many people ask where to draw the line between Symfony2 and silex.
How many routes can I have in silex before it becomes unbearable? How many
services can I have before I should consider switching from silex to Symfony2?
And for a long time I didn&#39;t have a good answer to this question. One of the
best answers I have heard <a href="https://twitter.com/mrf/status/251731315739729920">is from Dustin
Whittle</a>:</p>

<blockquote>
<p>Use silex if you are comfortable with making all of your own architecture
decisions and full stack Symfony2 if not.</p>
</blockquote>

<p>To put it in other words, it really does not matter how large your app is, how
many controllers and routes and services you have. On a technical level you
can find solutions for that. The challenge you will actually face is people.</p>

<p>The main difference between silex and Symfony2 full-stack is that Symfony2 is
a framework. Silex is not a framework, it&#39;s a library which provides a service
container, a route builder and some glue to build your own framework with.</p>

<p>The distinction that I want to make here is that Symfony2 has conventions. It
has a pre-defined directory structure, config files, front controllers. All of
these conventions are very explicit and will most likely be consistent across
most Symfony2 projects.</p>

<p>There are many good reasons to have these kind of conventions. The main one is
human scale. When you have many developers working on the same code base, you
want the code to remain consistent. At the same time, it is growing, so it may
need to be re-structured. With Symfony2 you already know how to structure it.
With silex you need to figure it out on your own.</p>

<h2>Summary</h2>

<ul>
<li>Silex does not prevent you from structuring your code.</li>
<li>It requires you to make your own architecture decisions.</li>
<li>Human scale is the only limiting factor.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Binary parsing with PHP</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/09/24/binary-parsing.html"/>
        <id>https://igor.io/2012/09/24/binary-parsing.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Binary parsing with PHP</h1>

<p>Binary operations in PHP are a bit strange. Since PHP was originally a
templating layer for C code, it still has many of those C-isms. Lots of the
function names map directly to C-level APIs, even if they work a bit
differently sometimes. For example, PHP&#39;s <code>strlen</code> maps directly to
<code>STRLEN(3)</code>, and there are countless examples of this. However, as soon as it
comes to dealing with binary data, things suddenly become very different.</p>

<h2>Binary data, you say?</h2>

<p>What is binary data? Binary is really just a representation of data, and any
data can be represented as 0s and 1s. When we speak of binary data, what we
usually mean is representing data as a sequence of bits. And what we usually
want to do is encode some data into bits for transfer and then decode them on
the other end. The binary representation is simply an efficient wire format.</p>

<p>To encode and decode, we must somehow gain access to the individual bits, and
then have functions that are able to convert from some existing representation
to the packed one, and vice-versa. One of the tools that programming languages
provide in order to do that are bitwise operations.</p>

<h2>The C way</h2>

<p>Before we look at the way this works in PHP, I&#39;d like to first see how C
handles it under the hood.</p>

<p>While C is a high level language, it is still very close to the hardware.
Inside the CPU and RAM, data is stored as a sequence of bits. Therefore,
integers in C are internally also a sequence of bits. A char is also a
sequence of bits, and a string is an array of chars.</p>

<p>Let&#39;s look at an example:</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">char</span> <span class="o">*</span><span class="n">hello</span> <span class="o">=</span> <span class="s">&quot;Hello World&quot;</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&quot;char: %c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hello</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&quot;ascii: %i</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hello</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</code></pre></div>
<p>We are accessing the first character <code>H</code> and printing out two representations
of it. The first is the char representation (<code>%c</code>), the second is the integer
representation (<code>%i</code>). The char representation is <code>H</code>, the integer
representation is <code>72</code>. Why <code>72</code>, you ask? Because the decimal <code>72</code> represents
the letter <code>H</code> in the ascii table, which defines a charset that assigns every
number from 0 to 128 a specific meaning. Some of them are control characters,
some represent numbers, some represent letters.</p>

<p>So far so good. The data is just data that is stored somewhere, and we need to
decide how to interpret it.</p>

<h2>PHP: You should not be doing this in PHP anyways</h2>

<p>One of the main reasons why this is different in PHP is the fact that string
is a completely different type. Let&#39;s explore what PHP does:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$hello = &quot;Hello World&quot;;</span>
<span class="x">var_dump($hello[0]);</span>
<span class="x">var_dump(ord($hello[0]));</span>
</code></pre></div>
<p>To get the ascii code of a character in PHP, you need to call <code>ord</code> on a
character (which is really not a character, but a one-character string, as
there is no char type). Ord returns the ascii value of a character.</p>

<p>Unlike the C example, we have more than one representation of the data here.
In C there is only a single representation which may have different
interpretations. The number <code>72</code> could at the same time be the character <code>H</code>.
PHP requires us to convert between strings and ascii-values, storing those two
in separate variables with distinct types.</p>

<p>And this is the main pain when performing binary parsing in PHP. Since data
can be represented as a string or a number, you always need to be aware of
which you are dealing with. And depending on which one it is, you will have
different tools you can use.</p>

<h2>Dropping down to the bit level</h2>

<p>So far we&#39;ve seen how to access individual bytes and how to get their ascii
value. But this isn&#39;t very useful just yet. In order to parse binary
protocols, we need to get access to the individual bytes.</p>

<p>As an example I will use the header of a DNS packet. The header consists of 12
bytes. Those 12 bytes are divided into 6 fields, each consisting of 2 bytes.
Here is the format as defined by RFC 1035:</p>

<div class="ascii-table"><pre>
                                1  1  1  1  1  1
  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ID                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    QDCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ANCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    NSCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ARCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
</pre></div>

<p>All fields except the second are to be read as full numbers. The second one is
special, because it fits many values into those 2 bytes.</p>

<p>Let&#39;s assume that we have a DNS packet that is represented as a string, and we
wanted to parse this &quot;binary string&quot; with PHP. Extracting the number values is
easy. PHP provides an <code>unpack</code> function which allows you to unpack any string,
decomposing it into a set of fields. You need to tell it how many bytes you
want each field to have. Since we have 16 bits per field, we can just use <code>n</code>,
which is defined as  <code>unsigned short (always 16 bit, big endian byte order)</code>.
Unpack allows repeating a format as a pattern by appending a <code>*</code>, so we can
simply unpack by using:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">list($id, $fields, $qdCount, $anCount, $nsCount, $arCount) = array_values(unpack(&#39;n*&#39;, $header));</span>
</code></pre></div>
<p>It converts the string of bytes into 6 numbers, each based on two bytes. We
call <code>array_values</code> because the value returned by <code>unpack</code> is a 1-indexed
array. In order to use <code>list</code> we need a 0-indexed array.</p>

<p>Here is the data of the DNS header, represented as hexadecimal. Two digits
correspond to one byte. Two bytes are one field.</p>

<div class="ascii-table"><pre>
72 62 01 00 00 01 00 00 00 00 00 00
</pre></div>

<p>This means that the values are:</p>

<ul>
<li><code>id</code> is <code>0x7262</code> which is <code>0111 0010 0110 0010</code> in binary, <code>29282</code> in decimal.</li>
<li><code>fields</code> is <code>0x0100</code> which is <code>0000 0001 0000 0000</code> in binary.</li>
<li><code>qdCount</code> is <code>0x0001</code> which is <code>0000 0000 0000 0001</code> in binary, <code>1</code> in decimal.</li>
<li><code>anCount</code>, <code>nsCount</code> and <code>arCount</code> are <code>0</code>.</li>
</ul>

<p>Now, let&#39;s have a look at expanding that <code>fields</code> variable into the values it
contains. We cannot use unpack for that because unpack only deals with full
bytes. But we can use the value that we got by decoding with <code>n</code> and extract
the bytes from it by using bitwise operators.</p>

<h2>Bitwise operators</h2>

<p>There are a number of bitwise operators, which deal with the binary
interpretation of PHP integers.</p>

<ul>
<li><code>&amp;</code> is a bitwise <code>AND</code></li>
<li><code>|</code> is a bitwise <code>OR</code></li>
<li><code>^</code> is a bitwise <code>XOR</code></li>
<li><code>~</code> is a <code>NOT</code>, which means it inverts all bits</li>
<li><code>&lt;&lt;</code> is a left shift</li>
<li><code>&gt;&gt;</code> is a right shift</li>
</ul>

<p>The main use case for <code>&amp;</code> is bitmasks. A bitmask allows you to unset certain
bits. This is useful to only check the bits you care about, and ignore the
others.</p>

<p>We determined that the value of <code>fields</code> is a number representing <code>0000 0001
0000 0000</code>. We will process this value from right to left. The first sub-field
is <code>rcode</code>, and it is 4 bits in length. This means that we need to ignore
everything but the last 4 bits. We can do that by applying a bitmask:</p>

<div class="ascii-table"><pre>
value:          0000 0001 0000 0000
bitmask:        0000 0000 0000 1111
result of & op: 0000 0000 0000 0000
</pre></div>

<p>The <code>&amp;</code> operator sets those bits that are <code>1</code> in both the value and the
bitmask. Since there is no match in this case, the result is <code>0</code>. In PHP code,
the same operation looks like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$rcode = $fields &amp; bindec(&#39;1111&#39;);</span>
</code></pre></div>
<blockquote>
<p>Note: We are using <code>bindec</code> to get an integer representing the binary
<code>1111</code>, because bitwise operators act on numbers. Since PHP 5.4 it is
possible to write <code>0b1111</code>, PHP will automatically convert it to the integer
value <code>15</code>.</p>
</blockquote>

<p>Now we need to get the next value, the <code>z</code>. We can also apply the bitmask, but
now we have a new problem. The value we care about has some extra bits on the
right. To be exact, the <code>4</code> bits from the <code>rcode</code>. We can set them to <code>0</code> by
using a bitmask, but that means we have some <code>0</code>s there that we do not want.</p>

<p>The solution to this is bitwise shifting. You can take the entire number, in
binary, and shift it to the left or to the right. Shifting to the right
destroys the bits on the far right, as they&#39;re shifted &quot;over the edge&quot;. In
this case we want to shift it to the right, and we want to do that 4 times.</p>

<div class="ascii-table"><pre>
value:          0000 0001 0000 0000
result of >> 4:      0000 0001 0000
</pre></div>

<p>Now we can use a bitmask on this value to extract the last 3 bits to get the
<code>z</code> value.</p>

<div class="ascii-table"><pre>
value:          0000 0001 0000 0000
result of >> 4:      0000 0001 0000
bitmask:        0000 0000 0000 0111
result of & op:      0000 0000 0000
</pre></div>

<p>And the same in PHP code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$z = ($fields &gt;&gt; 4) &amp; bindec(&#39;111&#39;);</span>
</code></pre></div>
<p>You can re-apply this technique over and over, in order to parse the whole
header. When you do that, you will end up with this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">list($id, $fields, $qdCount, $anCount, $nsCount, $arCount) = array_values(unpack(&#39;n*&#39;, $header));</span>

<span class="x">$rcode = $fields &amp; bindec(&#39;1111&#39;);</span>
<span class="x">$z = ($fields &gt;&gt; 4) &amp; bindec(&#39;111&#39;);</span>
<span class="x">$ra = ($fields &gt;&gt; 7) &amp; 1;</span>
<span class="x">$rd = ($fields &gt;&gt; 8) &amp; 1;</span>
<span class="x">$tc = ($fields &gt;&gt; 9) &amp; 1;</span>
<span class="x">$aa = ($fields &gt;&gt; 10) &amp; 1;</span>
<span class="x">$opcode = ($fields &gt;&gt; 11) &amp; bindec(&#39;1111&#39;);</span>
<span class="x">$qr = ($fields &gt;&gt; 15) &amp; 1;</span>
</code></pre></div>
<p>And that&#39;s how you parse binary data with PHP.</p>

<h2>Summary</h2>

<ul>
<li>PHP has different ways of representing binary data.</li>
<li>Use <code>unpack</code> to convert from a &quot;binary string&quot; to an integer.</li>
<li>Use bitwise operators to access individual bits of that integer.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="http://php.net/operators.bitwise">PHP: Bitwise Operators</a></li>
<li><a href="http://php.net/unpack">PHP: unpack</a></li>
<li><a href="http://www.ietf.org/rfc/rfc1035.txt">RFC 1035: Domain Names - Implementation and specification</a></li>
<li><a href="https://github.com/reactphp/react/blob/master/src/React/Dns/Protocol/Parser.php">Source code: <code>React\Dns\Protocol\Parser</code></a></li>
</ul>

        ]]></content>
    </entry>
    
</feed>
