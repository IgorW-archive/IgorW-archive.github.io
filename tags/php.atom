<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>igorw</title>
    <subtitle>weblog</subtitle>
    <link href="https://igor.io/tags/php.atom" rel="self" />
    <link href="https://igor.io/" />
    <id>igor.io</id>
    <updated>2015-04-06T16:35:01+02:00</updated>
    
        
    
    
    <entry>
        <title>Dependency Responsibility</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/09/24/dependency-responsibility.html"/>
        <id>https://igor.io/2013/09/24/dependency-responsibility.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Dependency Responsibility</h1>

<p>Convenience is great, and many tools provide you with it. Dependency managers
are one such tool that allow you to easily install any library instantly. But
you should not use them blindly. There are more important considerations than
<em>&quot;I want foo right now&quot;</em>. Which type of foo do you want, and how long do you
want it to last?</p>

<h2>Hairball as a Service</h2>

<p>You can get everything as a service these days. Your software, your
infrastructure, your platform, your development, your design. You click one
button and get a whole stack of fluff that you cannot understand or even peek
into for that matter.</p>

<p>It sounds like a sweet deal. You don&#39;t have to care about how things work. It
just works.</p>

<p>Except you&#39;re forgetting that it&#39;s software. And software breaks. How do you
fix it? By turning it off and on again. That works most of the time, but
eventually you will hit that monster bug that makes your system completely
FUBAR. And now there is nothing you can do about it, because you are not in
charge.</p>

<h2>Dependencies</h2>

<p>Overly relying on convenience also exists in the small. You have a requirement
in your software project, so you install a pre-made library that solves the
problem for you. It&#39;s usually just one command away.</p>

<p>As far as you&#39;re concerned, this library is a black box. You don&#39;t care how it
works. You just install it and use it.</p>

<p>Except you&#39;re forgetting that it&#39;s software. And software breaks. How do you
fix it?</p>

<p>At this point you may have to fix a bug in the library. Writing correct
programs is difficult, submitting some patches upstream is not a big deal, and
helps everyone else using that package as well.</p>

<p>But what if:</p>

<ul>
<li>That bug broke your website, negatively impacting your sales</li>
<li>It was a security issue that compromised your customers&#39; data</li>
<li>It was a performance problem that made your site go down completely</li>
</ul>

<h2>Liability</h2>

<p>Who is liable in open source? Whoever wrote the library that you are using?
<strong>No.</strong></p>

<p>Every OSS license clearly states that the author is not liable and that there
is no warranty. If the software you installed makes your server go up in
smoke, it is <em>your</em> fault.</p>

<p>The upside of OSS is that you <em>are</em> in charge, and you actually <em>can</em> fix
things when they break. Also, you can prevent them from breaking in the first
place.</p>

<h2>Responsibility</h2>

<p>When you install a library, <em>you</em> are responsible for the code in that
library. You are also responsible for the dependencies of your dependencies.
For any code that you run, it is your responsibility to ensure that it
operates correctly.</p>

<p>This means that you have to review all of the code that you put into
production. And make sure it does not contain any destructive bugs or security
issues. As a by-product, you will properly understand that code, and will be
able to debug and fix it if things do go wrong.</p>

<h2>Trust</h2>

<p>Obviously it is impossible to review and fully understand every bit of code we
run. You probably do not vet the source code of the linux kernel, your
operating system utilities, the webserver of your choosing, your language
runtime.</p>

<p>It is simply too much code that moves too quickly. So instead you decide to
trust the maintainers of those packages not to mess it up. Since there is a
community who peer-reviews, hopefully most issues will be caught.</p>

<p>It is possible to do that for your library dependencies as well. But it should
be a conscious decision. A well maintained package with a strong community and
strong BC guarantees is likely to be more trustworthy than some random
library by some random person on the internets.</p>

<p>But even if it is well maintained, think twice before you trust a code base.
Even popular packages can be huge piles of garbage.</p>

<h2>Conclusion</h2>

<ul>
<li>You are responsible for all the code you run in production.</li>
<li>Keep stability, security and performance in mind.</li>
<li>Think twice before you trust a package blindly.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Composer Vendor Directory</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/09/04/composer-vendor-directory.html"/>
        <id>https://igor.io/2013/09/04/composer-vendor-directory.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Composer Vendor Directory</h1>

<p>A common question in composer support is to install packages into a directory
other than <code>vendor</code>. I want to explain why that is a bad idea.</p>

<p>Achtung: Might be a little ranty.</p>

<p><center>
    <img src="/img/binders-vendor.png" alt="binders full of vendor">
</center></p>

<h2>One True Vendor</h2>

<p>You don&#39;t own your vendor directory. When you use composer, you are waiving
your right to decide where things go. This is for your own good. You should
not know where composer puts stuff, and frankly, you should not care.</p>

<p>Composer makes it extremely hard for you to install a package anywhere else
than the one true vendor directory. And this is by design. And there is a good
reason for that.</p>

<p>Composer targets the PHP community. It aims to grow the library space.
Libraries should be small, focused, flexible and avoid side-effects. The user
should be in control.</p>

<p>What sort of side-effects? Don&#39;t create files unless the user asked for them.
Don&#39;t use global state such as superglobals. Don&#39;t call echo, header or exit.
Don&#39;t depend on the location of things in the filesystem, the network or
otherwise.</p>

<h2>Autoloading</h2>

<p>The loading of classes (and functions, etc.) is no exception to this rule. As
a user, I want to specify my dependencies, run <strong>one command</strong>, include <strong>one
file</strong>, and be done with it. I don&#39;t want to care about where stuff is
located, set up include paths, manually include files, define my own autoload
mappings.</p>

<p>Autoloading solves this problem. If every library defines its own rules for
autoloading, PHP takes care of the rest. Libraries don&#39;t have to know where
they or other libs are located. The user is in control.</p>

<p>A composer-managed application should have exactly one single include
statement. A require <code>vendor/autoload.php</code> in the front controller.</p>

<p>A library should have zero.</p>

<h2>Single directory</h2>

<p>Putting everything into one directory just makes sense.</p>

<p>First off, debugging composer issues. Composer has come a long way, but
strange things can happen sometimes. Maybe some files are in an inconsistent
state, maybe someone deleted something accidentally, maybe there was a bug in
the solver. The point is, composer is not operating correctly due to the state
of the vendor directory.</p>

<p>You can just try again by <code>rm -rf vendor &amp;&amp; composer install</code>. You don&#39;t have
to keep track of zillions of possible directories, it&#39;s all in one place.</p>

<p>Second, deployment. When deploying, I want the stuff right there. I want it in
the right place, I want to be able to push it all at once. With a single
directory it doesn&#39;t even matter where I run <code>composer install</code>, because the
result is consistent and easy to manage as part of the build and deployment
process.</p>

<p>Third, version control. No need to litter your gitignore with random garbage.</p>

<h2>Isolation</h2>

<p>Remember PEAR? Not only was PEAR itself installed into some global-ish
location (if you were lucky enough to actually successfully install it), but
all libraries installed via PEAR were global. If you had two projects
depending on conflicting versions of the same package, you were screwed.</p>

<p>Enough of that. That&#39;s why composer is a dependency manager and not a package
manager. It manages deps per-project, it isolates them. It disallows sharing
the same package directory between projects.</p>

<p>Yes, that means you potentially get two copies, but trust me, it&#39;s totally
worth it.</p>

<h2>Excuses</h2>

<p>Here are some reasons why you would need to move your packages to a specific
location:</p>

<ul>
<li><p><strong>Legacy</strong>: You have some legacy project that heavily relies on the location
of files. You cannot break BC. Recommendation: Let it die.</p></li>
<li><p><strong>Frontend</strong>: You have some CSS or JS files that must go to the web
directory. Recommendation: Use symlinks or copy them over.</p></li>
<li><p><strong>I want to</strong>: No you don&#39;t. Now play nice, and autoload.</p></li>
</ul>

<p>If you must, there are some tricks such as <a href="http://getcomposer.org/doc/articles/custom-installers.md">custom
installers</a> or
<a href="http://getcomposer.org/doc/articles/scripts.md">scripts</a>.</p>

<p>But remember, if you use them you are hurting the ecosystem. And I will get
mad.</p>

<h2>Conclusion</h2>

<p>The vendor directory is a black box. The public API is <code>vendor/autoload.php</code>.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>How heavy is Silex?</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/09/02/how-heavy-is-silex.html"/>
        <id>https://igor.io/2013/09/02/how-heavy-is-silex.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>How heavy is Silex?</h1>

<p>Quite often silex has been described as heavy or bloated. It&#39;s time to put
this myth to rest.</p>

<p><center>
    <img src="/img/omnomnom.png" alt="symfony component cookie monster">
</center></p>

<h2>Quotes</h2>

<blockquote>
<p>Silex: The world&#39;s largest microframework.</p>

<p>Silex: All the bloat of Symfony but with only half the features.</p>

<p>Silex is so big: It has more lines of code than your project.</p>
</blockquote>

<h2>Micro-framework</h2>

<p>What an excellent buzzword! Let&#39;s face it, this is an overloaded and mostly
nebulous term.</p>

<p>I don&#39;t think it&#39;s possible to clearly define what it means. However, I want
to give a definition of what it means in the context of silex. Silex is a
route builder, a router, a DI container, based on Symfony2 components.</p>

<p>But the real answer lies in what silex <em>doesn&#39;t</em> do. Unlike a framework, silex
does not provide any conventions. That means that you are forced to architect
your own code base. It gives you a lot of power and responsibility.</p>

<p>So what does micro mean? Is it about lines of code? Amount of dependencies?
No, it&#39;s not.</p>

<p>While I agree that less lines of code and less dependencies are desirable,
that is not the top priority. Micro means that silex exposes a minimal
interface. It makes a minimal amount of decisions for you. Everything else
follows from that principle.</p>

<h2>Dependencies</h2>

<p>So first of all, how many dependencies does silex have? As of right now,
<strong>7</strong>.</p>

<p>Here they are, in all of their glory:</p>

<ul>
<li>pimple/pimple</li>
<li>psr/log</li>
<li>symfony/debug</li>
<li>symfony/event-dispatcher</li>
<li>symfony/http-kernel</li>
<li>symfony/http-foundation</li>
<li>symfony/routing</li>
</ul>

<p>Each one of them does one specific thing. Each is reasonably small in size.</p>

<p>Of course, silex could have implemented all of those features itself. But it
would mean less re-use, less battle-tested libraries, less interoperability.</p>

<p>To put this into perspective, the Symfony2 standard edition installs <strong>60</strong>
packages, 41 of which are symfony components. The ZF2 skeleton installs all of
the <strong>49</strong> components. Laravel4 ships with <strong>58</strong> packages, 28 of which are
laravel components.</p>

<p>The point of this exercise is not to bash other frameworks. It&#39;s just to show
that I&#39;m not lying when I say silex has an add-what-you-need philosophy.</p>

<h2>Number of classes, lines of code</h2>

<p>Even though keeping lines of code down is not the primary goal of silex, we
made sure not to include code that is not needed. So what exactly do you get
when you use silex?</p>

<p>I grabbed the fine code-measuring tool <code>cloc</code> ran some analysis. After
removing tests, the entire code base (including deps) consists of <strong>16831
NCLOC</strong> in <strong>280 classes</strong>. The whole tree (including tests) amounts to <strong>3.5
MiB</strong>.</p>

<p>However, during a standard request only a fraction of that code is actually
loaded. The following <strong>50 classes</strong> are actually used:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">* Silex\Application
* Silex\Controller
* Silex\ControllerCollection
* Silex\ControllerResolver
* Silex\EventListener\ConverterListener
* Silex\EventListener\LocaleListener
* Silex\EventListener\MiddlewareListener
* Silex\EventListener\StringToResponseListener
* Silex\ExceptionHandler
* Silex\LazyUrlMatcher
* Silex\RedirectableUrlMatcher
* Silex\Route
* Symfony\Component\EventDispatcher\Event
* Symfony\Component\EventDispatcher\EventDispatcher
* Symfony\Component\EventDispatcher\EventDispatcherInterface
* Symfony\Component\EventDispatcher\EventSubscriberInterface
* Symfony\Component\HttpFoundation\FileBag
* Symfony\Component\HttpFoundation\HeaderBag
* Symfony\Component\HttpFoundation\ParameterBag
* Symfony\Component\HttpFoundation\Request
* Symfony\Component\HttpFoundation\Response
* Symfony\Component\HttpFoundation\ResponseHeaderBag
* Symfony\Component\HttpFoundation\ServerBag
* Symfony\Component\HttpKernel\Controller\ControllerResolver
* Symfony\Component\HttpKernel\Controller\ControllerResolverInterface
* Symfony\Component\HttpKernel\Event\FilterControllerEvent
* Symfony\Component\HttpKernel\Event\FilterResponseEvent
* Symfony\Component\HttpKernel\Event\GetResponseEvent
* Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent
* Symfony\Component\HttpKernel\Event\KernelEvent
* Symfony\Component\HttpKernel\Event\PostResponseEvent
* Symfony\Component\HttpKernel\EventListener\LocaleListener
* Symfony\Component\HttpKernel\EventListener\ResponseListener
* Symfony\Component\HttpKernel\EventListener\RouterListener
* Symfony\Component\HttpKernel\HttpKernel
* Symfony\Component\HttpKernel\HttpKernelInterface
* Symfony\Component\HttpKernel\KernelEvents
* Symfony\Component\HttpKernel\TerminableInterface
* Symfony\Component\Routing\CompiledRoute
* Symfony\Component\Routing\Matcher\RedirectableUrlMatcher
* Symfony\Component\Routing\Matcher\RedirectableUrlMatcherInterface
* Symfony\Component\Routing\Matcher\UrlMatcher
* Symfony\Component\Routing\Matcher\UrlMatcherInterface
* Symfony\Component\Routing\RequestContext
* Symfony\Component\Routing\RequestContextAwareInterface
* Symfony\Component\Routing\Route
* Symfony\Component\Routing\RouteCollection
* Symfony\Component\Routing\RouteCompiler
* Symfony\Component\Routing\RouteCompilerInterface
</code></pre></div>
<p>Those 50 classes have a total of <strong>4018 NCLOC</strong>.</p>

<p>Is that more than something like slim, limonade or breeze? Yes. By a factor of
2-4. Does that matter? I don&#39;t think so.</p>

<p>It is still sufficiently small. I consider re-use, isolation and interop
provided by silex better than in the other listed projects.</p>

<h2>Minimal interface</h2>

<p>For the most part you will only ever deal with the following types:</p>

<ul>
<li>Silex\Application</li>
<li>Silex\Controller</li>
<li>Silex\Route</li>
<li>Symfony\Component\HttFoundation\Request</li>
<li>Symfony\Component\HttFoundation\Response</li>
<li>Pimple</li>
</ul>

<p>Learn them, and you can effectively use silex.</p>

<h2>Summary</h2>

<ul>
<li>Minimal interface &gt; minimal lines of code.</li>
<li>Silex is quite lightweight.</li>
<li>The entire public API consists of 5 classes.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Evolving syntax</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/07/26/evolving-syntax.html"/>
        <id>https://igor.io/2013/07/26/evolving-syntax.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Evolving syntax</h1>

<p>As languages become more widely used and the needs of their users evolve, they
often grow. Some languages are designed to support such changing needs, but
most of them are not.</p>

<p>This leads to rather intrusive changes to the language itself; to both its
syntax and its semantics.</p>

<h2>Outdated distribution</h2>

<p>A very common problem that many software projects have is lack of adoption of
new versions. Browsers are an excellent example of this, But it exists on the
server as well. On one hand you have linux distributions, who tend to be
rather conservative. On the other hand there&#39;s hosting companies, who don&#39;t
want to invest in maintaining support for multiple platforms.</p>

<p>This leads to this recursive problem of hosting companies not upgrading
because they don&#39;t have to, and software not requiring newer versions of their
programming language, because they don&#39;t want to lose their users.</p>

<p>The longer your dependency chain is, the more you suffer from this. If you are
using framework X, which depends on PHP 5.3, which depends on a certain
compiler and a set of C libraries, you need to wait for every part of the
chain to be updated before you can start using it.</p>

<p>Another way of looking at it is: The more extensible those low-level pieces
are, the less you will suffer from outdated distribution.</p>

<h2>Lisp macros</h2>

<p>I <a href="/2012/12/29/sexpr-macros.html">already blogged about macros</a> before, but I
shall briefly re-introduce the concept here.</p>

<p>Most lisps have a syntax entirely based on lists, called
<a href="/2012/12/06/sexpr.html">s-expressions</a>. Since the entire code is represented
as a list, it can be treated as code or as data.</p>

<p>Macros allow you to define special functions that operate at compile-time. The
source code is parsed into an AST (the list in memory), and macros are able to
transform this AST before it gets evaluated.</p>

<p>Macros are AST transformations. In a sense they are source-to-source
compilers.</p>

<p><center>
    <img src="/img/evolving-syntax/macro.png" alt="macro">
</center></p>

<h2>Macros without uniform syntax</h2>

<p>All code is in form of lists in lisp. Which makes it easy to parse and modify.
This is sometimes referred to as uniform syntax.</p>

<p>Most languages don&#39;t have uniform syntax, so how would a macro system in a
language such as PHP look like?</p>

<p>The general concept still stands: It&#39;s an AST transformation. You take the
higher level source code, feed it through a macro and receive a lower-level
equivalent.</p>

<p>And this is actually quite an interesting idea, because you could invent new
syntax and language features, as long as they could be compiled down to the
existing set of features.</p>

<p>I toyed with this idea in my <a href="https://speakerdeck.com/igorw/introduction-to-lisp-dpc13?slide=98">lisp introduction at
DPC</a>. What
if we had macro capabilities in PHP? What sort of features could we add to the
language?</p>

<p>One example that I came up with was a <strong>short class constructor</strong> syntax. In
the Dependency Injection Age, most constructors are just a series of argument
assignments.</p>

<p>What if this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class Foo($bar) {</span>
<span class="x">}</span>
</code></pre></div>
<p>Could be transformed into this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class Foo {</span>
<span class="x">    private $bar;</span>
<span class="x">    public function __construct($bar) {</span>
<span class="x">        $this-&gt;bar = $bar;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Wouldn&#39;t that remove an incredibe amount of boilerplate?</p>

<p>Another project that plays with this idea is shaunxcode&#39;s
<a href="https://github.com/shaunxcode/transmogrifier">transmogrifier</a>.</p>

<h2>Backporting</h2>

<p>Do you still use libraries that run on PHP 5.3? Or 5.2? Are you yourself still
running on 5.3, which will soon reach its end of life?</p>

<p>Quite often libraries will support old versions. Or somebody will fork a
library, and rewrite it for the older version of PHP they happen to be using.
They will actually manually rewrite parts of it.</p>

<p>Why not automate this? I can&#39;t be the only person who ever considered writing
a script to make new code work on old versions (<a href="https://github.com/nikic/PHP-Backporter">I&#39;m
not</a>). This thought crossed my mind a
long time ago, because it seemed useful at the time.</p>

<p>What I only recently realized is that <strong>backporting existing features and
inventing new ones is exactly the same thing!</strong> Just from a different
perspective. One is looking at the future, the other is looking at the past.
This completely blew my mind!</p>

<p>What if we could have had all of those fancy new features in PHP 5.4 or 5.5
much earlier? Without having to wait for a new version to be released and the
distributions to catch up? How long did we have to wait for closures? Short
array syntax?</p>

<p>Think about it.</p>

<p>That&#39;s when I truly realized how powerful the idea of macros is. It&#39;s not just
a fancy theoretical idea that lisp fangirls and fanboys fantasize about at
night. Look at what was actually added to the language. This is <em>real</em>.</p>

<p><center>
    <img src="/img/evolving-syntax/54_53.png" alt="backport 5.4 to 5.3">
</center></p>

<h2>Galapagos</h2>

<p>So let&#39;s evolve us some syntax. Let&#39;s see if it can be done. I want to try and
actually backport the new syntactic features from PHP 5.4 so that they can run
on PHP 5.3.</p>

<p>For all of the <a href="http://php.net/manual/en/migration54.new-features.php">new features</a>
introduced in 5.4, it is possible to compile them down to PHP 5.3 syntax.</p>

<ul>
<li><p>Short arrays:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>

<span class="x">=&gt;</span>

<span class="x">array(&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;)</span>
</code></pre></div></li>
<li><p>$this in closures:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class Foo</span>
<span class="x">{</span>
<span class="x">    public function bar()</span>
<span class="x">    {</span>
<span class="x">        return function () {</span>
<span class="x">            return $this-&gt;baz();</span>
<span class="x">        };</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">=&gt;</span>

<span class="x">class Foo</span>
<span class="x">{</span>
<span class="x">    public function bar()</span>
<span class="x">    {</span>
<span class="x">        $that = $this;</span>
<span class="x">        return function () use ($that) {</span>
<span class="x">            return $that-&gt;baz();</span>
<span class="x">        };</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div></li>
<li><p>Function array dereferencing:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">foo()[&#39;bar&#39;];</span>

<span class="x">=&gt;</span>

<span class="x">($tmp = foo()) ? $tmp[&#39;bar&#39;] : $tmp[&#39;bar&#39;];</span>
</code></pre></div></li>
<li><p>Callable typehint:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function foo(callable $bar)</span>
<span class="x">{</span>
<span class="x">}</span>

<span class="x">=&gt;</span>

<span class="x">function foo($bar)</span>
<span class="x">{</span>
<span class="x">    if (!is_callable($bar)) {</span>
<span class="x">        trigger_error(sprintf(&#39;Argument 1 passed to %s() must be callable, %s given&#39;, __FUNCTION__, gettype($bar)), E_ERROR);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div></li>
</ul>

<p>Those are the ones that I actually implemented. The tool/library that does
these transformations is called
<a href="https://github.com/igorw/galapagos">galapagos</a> and would have not been
possible without <a href="http://nikic.github.io/">nikic</a>&#39;s excellent
<a href="https://github.com/nikic/PHP-Parser">PHP-Parser</a>, a PHP parser written in
PHP.</p>

<p>The parser returns an AST that can be processed. Since the parser supports the
entire syntax of PHP 5.5, there is no need to extend it in any way. The
library ships with a <em>node visitor</em> concept. All transformations are
implemented as node visitors.</p>

<p>If you&#39;re interested in the technical details, I recommend you take a look at
<a href="https://github.com/igorw/galapagos">the galapagos source</a>.</p>

<p><center>
    <img src="/img/evolving-syntax/galapagos.png" alt="galapagos turtle">
</center></p>

<h2>Opportunities</h2>

<p>Once PHP 5.4 is completely backported to 5.3, one could write a set of
transformations from 5.3 to 5.2. And so on and so forth, allowing PHP 5.4 code
to pass through the generations and eventually run on PHP/FI.</p>

<p>This would also allow galapagos to compile itself down to previous versions of
PHP, so you wouldn&#39;t even need 5.4 to run it.</p>

<p>You could exploit the same loophole in the universe that
<a href="http://antecedent.github.io/patchwork/">Patchwork</a> uses to rewrite source
code on the fly. Thus eliminating the static compilation step and applying the
transformation in memory, just as the code is loaded.</p>

<h2>Limitations</h2>

<p>Source-to-source works for many types of syntactical features, but there are
limitations to what you can do.</p>

<p>Performance will quickly be a limiting factor, especially for PHP, since it
heavily relies on core features to be implemented in C. Some of these
transformations will not come for free.</p>

<p>Certain features simply cannot easily be implemented as AST transformations.
While even something like generators theoretically <a href="https://github.com/clojure/core.async">could be implemented as a
macro</a>, it&#39;s extremely hard to do. At
that point you&#39;re almost <a href="https://github.com/ircmaxell/PHPPHP">implementing PHP in
PHP</a>.</p>

<p>And some features simply <em>need</em> the underlying engine. Any I/O mechanism,
anything that interacts with the operating system, needs engine support.</p>

<h2>Conclusion</h2>

<p>Being able to invent your own syntax is very useful, which instantly becomes
apparent when you look at the past. Features get added to languages all the
time. What if you could do that easily, within minutes instead of months?</p>

<p>When a language <a href="https://www.youtube.com/watch?v=_ahvzDzKdB0">is able to grow</a>
and evolve with its users&#39; needs, outdated distribution becomes less of an
issue.</p>

<p>Is PHP able to grow that way? Only to a very limited extent. The lack of
uniform syntax makes it a lot more difficult to add new features in a safe and
composable manner. It might <a href="http://sweetjs.org">kinda work</a> though.</p>

<p>Macros are extremely powerful, perhaps a little <a href="http://www.lambdassociates.org/blog/bipolar.htm">too
powerful</a>.</p>

<blockquote>
<p><em>Lisp is so powerful that problems which are technical issues in other
programming languages are social issues in Lisp.</em></p>

<p><em>&mdash; Rudolf Winestock, <a href="http://www.winestockwebdesign.com/Essays/Lisp_Curse.html">The Lisp Curse</a></em></p>
</blockquote>

        ]]></content>
    </entry>
    
    <entry>
        <title>Introducing Stack</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/05/23/introducing-stack.html"/>
        <id>https://igor.io/2013/05/23/introducing-stack.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <p><link rel="stylesheet" type="text/css" href="/css/stack.css"></p>

<h1>Introducing Stack</h1>

<p>In the post titled <a href="/2013/02/02/http-kernel-middlewares.html">HttpKernel
middlewares</a> I brought up the idea of
bringing rack middlewares to Symfony2.</p>

<p>In order to solidify this effort I would like to announce a new project:
<a href="http://stackphp.com">Stack</a>.</p>

<p><center>
    <h1 class="stack-logo"><a href="http://stackphp.com">Stack</a></h1>
    <p class="lead">Stack is a convention for composing HttpKernelInterface middlewares.</p>
</center></p>

<p>The name and logo are based on the idea of building a stack of middleware
layers, each of which handles a particular piece of logic.</p>

<p>Many thanks to <a href="https://twitter.com/beausimensen">@beausimensen</a> and
<a href="https://twitter.com/hochchristoph">@hochchristoph</a> who helped make this
happen.</p>

<h2>Conventions</h2>

<p>The main goal of stack is to give the idea of &quot;HttpKernel middlewares&quot; a name,
so that we can more easily talk about it.</p>

<p>It aims to make the conventions explicit and clearly define what a middleware
should do and what it should look like. Following them allows for better
interoperability and consistency between middlewares.</p>

<p>Check <a href="http://stackphp.com">the stack website</a> for the actual conventions.</p>

<h2>Toolbox</h2>

<p>The <a href="https://github.com/stackphp">stackphp organisation on GitHub</a> contains a
very small set of basic tools make working with stack middlewares easier.
However, none of those tools are mandatory.</p>

<p>You can create and use stack middlewares without using any of the provided
tools, as long as you follow the conventions.</p>

<p>Some of the packages (<a href="https://github.com/stackphp/inline">inline</a>,
<a href="https://github.com/stackphp/CallableHttpKernel">CallableHttpKernel</a>) are
targetted towards creators of middlewares. Others
(<a href="https://github.com/stackphp/session">session</a>, <a href="https://github.com/stackphp/url-map">url-map</a>,
<a href="https://github.com/stackphp/oauth">oauth</a>) are in fact middlewares that you
can use with your apps.</p>

<p>The most prominent tool is the <a href="https://github.com/stackphp/builder">builder</a>.
<em>Stack\Builder</em> is an evolution of the original <em>Stack</em> object from the
HttpKernel middlewares blog post. This ultimately makes stack usable, and
provides a basis for configuration.</p>

<h2>The future</h2>

<p>Why HttpKernelInterface? Why limit ourselves to Symfony2? Why not target all
of PHP?</p>

<p>First of all, Symfony provides a nice sandbox to experiment in. The basic
primitives are there: An HTTP request/response abstraction, a widely deployed
interface for sending those requests. Lots of popular frameworks are adopting
the HttpKernelInterface, which provides a large user base.</p>

<p>Of course, PHP itself also already has such an abstraction. It&#39;s called SAPI.
It would be interesting to extend the scope of middlewares and target all of
PHP. But in order to do that properly, PHP core would have to be modified to
make SAPIs extensible.</p>

<p>If we can prove that the concept works for HttpKernel, the broader PHP
community might be interested in bringing that capability to PHP core. That&#39;s
a long journey however, we&#39;ll have to take it one step at a time.</p>

<h1 style="text-align: center;">Go stack some middlewares</h1>

<h1 style="text-align: center;"><a href="http://stackphp.com">stackphp.com</a></h1>

<h1 style="text-align: center;"><a href="http://twitter.com/stackphp">@stackphp</a></h1>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Meta-circular</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/04/03/sexpr-meta-eval.html"/>
        <id>https://igor.io/2013/04/03/sexpr-meta-eval.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Meta-circular</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html"><strong>meta-eval</strong></a>)</p>

<blockquote>
<p>Yo dawg. I heard you like Lisp, so I wrote Lisp in Lisp, so you can Lisp
while you Lisp.</p>

<p><em>&mdash; John McCarthy</em></p>
</blockquote>

<h2>Meta-circular evaluator</h2>

<p>A meta-circular evaluator is a self-interpreter of a homoiconic language.</p>

<p>A self-interpreter is an interpreter written in the language it implements.
Examples of this include <a href="https://github.com/jterrace/js.js">js.js</a> or
Anthony&#39;s amazing <a href="https://github.com/ircmaxell/PHPPHP">PHPPHP</a>. In most
languages they are massive, because the languages themselves are massive.</p>

<p>Homoiconicity is another word for &quot;code as data&quot;. By treating source code as a
data structure, parsing becomes trivial to non-existent. One prominent example
of this is XSLT -- an XML program for manipulating XML documents.</p>

<p>Lisp is <em>the</em> homoiconic language, since the entire syntax is based on lists,
and macros allow you to manipulate and transform Lisp code.</p>

<h2>Eval</h2>

<p>John McCarthy published an ACM paper in 1960 that was titled <em>Recursive
Functions of Symbolic Expressions and Their Computation by Machine, Part I</em>.
This introduced not only the Lisp language but also included an implementation
of Lisp in Lisp.</p>

<p>In 2001, Paul Graham wrote an article titled <a href="http://www.paulgraham.com/rootsoflisp.html"><em>The Roots of
Lisp</em></a>, which explains McCarthy&#39;s
paper in a more modern context and includes a Common Lisp port of McCarthy&#39;s
original <code>eval</code>.</p>

<p>It&#39;s a whopping 62 lines in length:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defun</span> <span class="nv">null.</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">eq</span> <span class="nv">x</span> <span class="o">&#39;</span><span class="p">()))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">and.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">x</span> <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">y</span> <span class="ss">&#39;t</span><span class="p">)</span> <span class="p">(</span><span class="ss">&#39;t</span> <span class="o">&#39;</span><span class="p">())))</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="o">&#39;</span><span class="p">())))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">not.</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">(</span><span class="nv">x</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="ss">&#39;t</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">append.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null.</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">append.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">y</span><span class="p">)))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">list.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cons</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">y</span> <span class="o">&#39;</span><span class="p">())))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">pair.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">and.</span> <span class="p">(</span><span class="nv">null.</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">null.</span> <span class="nv">y</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">((</span><span class="nv">and.</span> <span class="p">(</span><span class="nv">not.</span> <span class="p">(</span><span class="nb">atom</span> <span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nv">not.</span> <span class="p">(</span><span class="nb">atom</span> <span class="nv">y</span><span class="p">)))</span>
         <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">list.</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">y</span><span class="p">))</span>
               <span class="p">(</span><span class="nv">pair.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">y</span><span class="p">))))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">assoc.</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">y</span><span class="p">))</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nv">assoc.</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">y</span><span class="p">)))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">eval.</span> <span class="p">(</span><span class="nv">e</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span>
    <span class="p">((</span><span class="nb">atom</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nv">assoc.</span> <span class="nv">e</span> <span class="nv">a</span><span class="p">))</span>
    <span class="p">((</span><span class="nb">atom</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">))</span>
     <span class="p">(</span><span class="nb">cond</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;quote</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;atom</span><span class="p">)</span>  <span class="p">(</span><span class="nb">atom</span>   <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;eq</span><span class="p">)</span>    <span class="p">(</span><span class="nb">eq</span>     <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;car</span><span class="p">)</span>   <span class="p">(</span><span class="nb">car</span>    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;cdr</span><span class="p">)</span>   <span class="p">(</span><span class="nb">cdr</span>    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;cons</span><span class="p">)</span>  <span class="p">(</span><span class="nb">cons</span>   <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))</span>
       <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;cond</span><span class="p">)</span>  <span class="p">(</span><span class="nv">evcon.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>
       <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">assoc.</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                        <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">))</span>
                  <span class="nv">a</span><span class="p">))))</span>
    <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;label</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">caddar</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">))</span>
            <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">list.</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">e</span><span class="p">))</span> <span class="nv">a</span><span class="p">)))</span>
    <span class="p">((</span><span class="nb">eq</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">e</span><span class="p">)</span> <span class="ss">&#39;lambda</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caddar</span> <span class="nv">e</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">append.</span> <span class="p">(</span><span class="nv">pair.</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">e</span><span class="p">)</span> <span class="p">(</span><span class="nv">evlis.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">e</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>
                     <span class="nv">a</span><span class="p">)))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">evcon.</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">caar</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
         <span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="nb">cadar</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nv">evcon.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">a</span><span class="p">))))</span>

<span class="p">(</span><span class="nb">defun</span> <span class="nv">evlis.</span> <span class="p">(</span><span class="nv">m</span> <span class="nv">a</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">null.</span> <span class="nv">m</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">(</span><span class="ss">&#39;t</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">eval.</span>  <span class="p">(</span><span class="nb">car</span> <span class="nv">m</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
                  <span class="p">(</span><span class="nv">evlis.</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">m</span><span class="p">)</span> <span class="nv">a</span><span class="p">)))))</span>
</code></pre></div>
<p>Yes. That&#39;s all it takes to write Lisp in Lisp.</p>

<p>I&#39;m not going to explain all of the details. I highly recommend you read
<em>Roots of Lisp</em> if you&#39;re interested.</p>

<p>But how about running this inside of Ilias, the PHP implementation of Lisp
covered in previous posts?</p>

<h2>Primitives</h2>

<p>The original Lisp consists of seven primitive operators:</p>

<ul>
<li><p><strong>(quote x)</strong>: Quotes a value. <code>&#39;foo</code> is a shortcut for <code>(quote foo)</code>.</p></li>
<li><p><strong>(atom? x)</strong>: Checks if a value is an atom. <code>(atom? (quote foo))</code> returns
<code>true</code>.</p></li>
<li><p><strong>(eq? x y)</strong>: Checks if two values are equal.</p></li>
<li><p><strong>(car x)</strong>: Returns the first element of the list <code>x</code>.</p></li>
<li><p><strong>(cdr x)</strong>: Returns the rest of the list <code>x</code> (everything but the first
element).</p></li>
<li><p><strong>(cons x y)</strong>: Constructs a list by prepending <code>x</code> to the list <code>y</code>.</p></li>
</ul>

<p><code>(cons (quote foo) (quote (bar)))</code> returns the list <code>(foo bar)</code>.</p>

<ul>
<li><strong>(cond (p1 e1) ... (pn en))</strong>: Conditional execution. Takes a list of pairs.</li>
</ul>

<p>The first element of each pair is a predicate, the second is an expression.
  If the predicate evaluates to <code>true</code>, the expression is evaluated and its
  return value returned. If the predicate evaluates to <code>false</code>, the next
  predicate is checked.</p>

<p>You can think of it as a mix between <code>if</code> and <code>switch</code>.</p>

<p>As it turns out, none of these have been implemented yet in Ilias.</p>

<p>Most of them can easily be implemented as functions that operate on values and
arrays:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">class AtomFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke($value)</span>
<span class="x">    {</span>
<span class="x">        return is_string($value);</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class CarFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke(array $list)</span>
<span class="x">    {</span>
<span class="x">        return array_shift($list);</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class CdrFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke(array $list)</span>
<span class="x">    {</span>
<span class="x">        array_shift($list);</span>
<span class="x">        return $list;</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class ConsFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke($value, array $list)</span>
<span class="x">    {</span>
<span class="x">        array_unshift($list, $value);</span>
<span class="x">        return $list;</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class EqFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke($a, $b)</span>
<span class="x">    {</span>
<span class="x">        return $a === $b;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The remaining two, <code>quote</code> and <code>cond</code>, need to be implemented as special
forms. Quote needs to treat its argument&#39;s source as data instead of
evaluating it. Cond needs to evaluate parts conditionally.</p>

<p>Here is <code>cond</code>, it just loops over the pairs and tests the predicates:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class CondOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $pairs = $args-&gt;toArray();</span>

<span class="x">        foreach ($pairs as $pair) {</span>
<span class="x">            list($predicate, $trueForm) = $pair-&gt;toArray();</span>
<span class="x">            if ($predicate-&gt;evaluate($env)) {</span>
<span class="x">                return $trueForm-&gt;evaluate($env);</span>
<span class="x">            }</span>
<span class="x">        }</span>

<span class="x">        return null;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<h2>Quote</h2>

<p>Quote is a bit trickier, because there is a design flaw that needs to be fixed
first. Currently quoted values contain their values as a form tree.</p>

<p>Basically, <code>&#39;(foo bar)</code> becomes:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">new QuoteForm(</span>
<span class="x">    new ListForm([</span>
<span class="x">        new Symbol(&#39;foo&#39;),</span>
<span class="x">        new Symbol(&#39;bar&#39;),</span>
<span class="x">    ])</span>
<span class="x">)</span>
</code></pre></div>
<p>This makes it really hard to work with as data. It would be a lot easier if it
were:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">new QuoteForm([&#39;foo&#39;, &#39;bar&#39;])</span>
</code></pre></div>
<p>This requires two changes. For one, the <code>FormTreeBuilder</code> should no longer
parse the contents of quote expressions. Next, the <code>MacroOp</code> needs to properly
handle quoted values and expand them as needed.</p>

<p>With those two changes, the implementation of <code>quote</code> is a snap:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>
<span class="x">use Igorw\Ilias\Form\QuoteForm;</span>

<span class="x">class QuoteOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        list($value) = $args-&gt;getAst();</span>
<span class="x">        return $value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>And with that, the seven primitive operators are implemented. After adding
them to the <code>Environment</code>, they can be called.</p>

<h2>Common Lispisms</h2>

<p>Paul Graham uses some Common Lisp specific functions. They are mostly
abbreviated versions of list manipulation functions. I will just add them in
Lisp directly:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nb">caar</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">l</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">cadr</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">l</span><span class="p">))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">cadar</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">l</span><span class="p">)))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">caddar</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">l</span><span class="p">))))))</span>

<span class="p">(</span><span class="nv">define</span> <span class="nb">caddr</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">l</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">car</span> <span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">l</span><span class="p">)))))</span>
</code></pre></div>
<h2>Running it</h2>

<p>Now all of the missing pieces have been added. It should be possible to run
<code>eval</code> now!</p>

<p>Let&#39;s run a simple <code>cons</code>, to construct a list. The expected output is <code>(foo
bar baz)</code>:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="k">quote</span> <span class="nv">foo</span><span class="p">)</span>
      <span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nv">bar</span> <span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>Here is how you run it through <code>eval</code>. The first argument is the expression to
be evaluated, the second argument is the environment, which is empty in this
case.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">eval.</span> <span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="k">quote</span> <span class="nv">foo</span><span class="p">)</span>
                    <span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nv">bar</span> <span class="nv">baz</span><span class="p">))))</span>
       <span class="p">(</span><span class="k">quote</span> <span class="p">()))</span>
</code></pre></div>
<p>And the result is:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>
</code></pre></div>
<p>Awesome.</p>

<h2>Conclusion</h2>

<p>It&#39;s mind-blowing how little code it takes to write a meta-circular evaluator
in Lisp.</p>

<p>It has support not only for primitive list operations like <code>cons</code> but also
allows you to define functions, variables, or even implement a
meta-meta-circular evaluator inside of it.</p>

<blockquote>
<p>Note: I was not able to get recursion via Y combinator to work, so there&#39;s
probably still some bugs lurking somewhere.</p>

<p><em>Edit: This is due to McCarthy&#39;s eval not supporting lexical closures.</em></p>
</blockquote>

<h2>Further reading</h2>

<ul>
<li><a href="http://www-formal.stanford.edu/jmc/recursive.html">John McCarthy&#39;s 1960 paper</a></li>
<li><a href="http://www.amazon.com/Structure-Interpretation-Computer-Programs-Engineering/dp/0262510871">Structure and Interpretation of Computer Programs</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/mccarthy-eval.php">Source code: Ilias <code>examples/mccarthy-eval.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html"><strong>meta-eval</strong></a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Stateless Services</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/03/31/stateless-services.html"/>
        <id>https://igor.io/2013/03/31/stateless-services.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Stateless Services</h1>

<p>As more frameworks and libraries, particularly in the PHP world, move towards
adopting the <em>Dependency Injection</em> pattern they are all faced with the
problem of bootstrapping their application and constructing the object graph.</p>

<p>In many cases this is solved by a <em>Dependency Injection Container</em> (DIC). Such
a container manages the creation of all the things. The things it manages are
<em>services</em>. Or are they?</p>

<h2>Services</h2>

<p>To understand what a service is, let&#39;s see how services are defined by <em>Eric
Evans</em>:</p>

<blockquote>
<p>When a significant process or transformation in the domain is not a natural
responsibility of an <em>entity</em> or <em>value object</em>, add an operation to the
model as standalone interface declared as a <em>service</em>. Define the interface
in terms of the language of the model and make sure the operation name is
part of the <em>ubiquitous language</em>. <strong>Make the <em>service</em> stateless.</strong></p>

<p>&mdash; <em>Eric Evans, Domain-Driven Design</em></p>
</blockquote>

<p>Let that sink in for a moment. Services should be stateless. What does that
mean exactly?</p>

<p>Service objects should be stateless in the same sense that the HTTP protocol
is stateless. While the service can have some internal immutable constants,
interactions with it should not affect that state. In other words, when you
call a method on a service, the result should depend only on the provided
arguments, and the service should not keep track of previous calls made.</p>

<p>One benefit that you get from this is scalability. You can move expensive
operations to a cluster of dedicated machines and it does not matter which one
responds to a particular request since all of them are independent.</p>

<p>Another great advantage is that complexity is reduced significantly. Stateless
services are conceptually very similar to functions that have no observable
side-effects. Absence of mutation makes it a lot easier to understand the
effects that a particular method call has on the system.</p>

<blockquote>
<p>Side note: While the examples of services in this post are mostly
components, application and infrastructure services (as opposed to domain
services), the concepts apply equally.</p>
</blockquote>

<h2>Service Container</h2>

<p>A <em>service container</em>, more commonly referred to as <em>Dependency Injection
Container</em> or <em>Inversion of Control Container</em>, is a construct that combines a
few patterns in order to aid object graph construction.</p>

<p>It is a dynamic factory that also acts as a registry, as it holds onto the
service objects it creates. Basically, you tell it how to create things and it
then creates them for you on demand.</p>

<p>The <em>Symfony2</em> PHP framework ships with a standalone <em>DependencyInjection</em>
component which implements a service container. The framework uses this
container to configure and create all of the objects of the framework.</p>

<p><center>
    <img src="/img/dic/dic.png" alt="DIC">
</center></p>

<h2>Request</h2>

<p>One of the available services available in Symfony2 is the <code>request</code> service.
It allows other application services to have the request injected, so that
they can use that information somehow.</p>

<p>Request <em>service</em>? The request isn&#39;t really a service, is it? It&#39;s a value
object which represents some immutable state. It does not have any behaviour.
If anything, it&#39;s a <em>parameter</em>.</p>

<p>Services can depend on other services and on parameters. Parameters are
constants, they never change. But is the request constant? Does the
application have one global request that is running all the time?</p>

<p>No. The application handles tons of requests, and every time a service is
called, the request will be different. It is constantly changing. This means
that if a service depends on the request, it is not stateless at all.</p>

<p>Therefore all services that depend on the request are violating Eric Evans&#39;
rule of statelessness. And that has huge implications.</p>

<h2>The request is not a constant</h2>

<p>You may think that for PHP this does not matter, because the entire object
graph must be constructed for every request anyway. And all services will
always be scoped to that single request.</p>

<p>You would be wrong. For one, Symfony2 has a concept of sub-requests, which
means virtual requests can be fired against the app at which point the request
changes. More on how the framework deals with this later.</p>

<p>Another use case for multiple requests per service is when you move certain
services to command-line based workers running in separate processes on
separate machines. You may want to re-use the same service instance to handle
many requests in a long-running worker script.</p>

<p>The request should not be a service. Something is off here.</p>

<h2>Scopes</h2>

<p>There&#39;s two approaches for dealing with stateful services. One of them that
the service container provides is scopes. Any service that depends on the
request service must be in the request scope.</p>

<p>If service <code>C</code> depends on <code>B</code>, which depends on <code>A</code>, which depends on
<code>request</code>, then all three of those must be scoped to the request.</p>

<p><center>
    <img src="/img/dic/req_scope.png" alt="Request Scope">
</center></p>

<p>For each HTTP request, the request scope is entered. These scopes can be
nested, so if you have a sub-request (or several nested sub-requests), you
keep stacking request scopes.</p>

<p>When a sub-request enters a new request scope, all the existing request scoped
services are stashed away. If responding to that sub-request depends on any of
those request scoped services, they will be re-created with the sub-request as
an argument.</p>

<p>As soon as the sub-request is complete, the previously stashed services are
restored, and the parent request continues.</p>

<p>As you can see, scopes lead to a lot of complexity. This is a mess.</p>

<h2>Mutable services</h2>

<p>Last week a pull request titled <a href="https://github.com/symfony/symfony/pull/7007">Synchronized
Services</a> was merged into the
2.3 branch of Symfony2. It introduces a new way of updating existing request
references without stashing them. The container calls <code>setRequest</code> on services
whenever the request scope changes.</p>

<p>This is even worse than scopes. Scopes at least kept some control over
stateful services. With this change they become completely mutable which makes
it impossible to know the state of the service at a given point in time.</p>

<p>While this is mostly related to the <code>request</code> service, there are other faux
services that are infected as well. For example the request context, which
simply gets re-populated (mutated in place) by the RouterListener for every
request.</p>

<p>Make it stop!</p>

<p><center>
    <img src="/img/dic/dic_destroy.png" alt="DIC destruction">
</center></p>

<h2>Event Listeners</h2>

<p>If we aren&#39;t supposed to pass the request at construction time, we&#39;re going to
need a better way of passing the request around.</p>

<p>So how do services get access to the request in a clean way? The request is
available at runtime only. The most obvious way to give services access to it
is simply by passing it to the service from the controller.</p>

<p>A very basic example:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class BlogController</span>
<span class="x">{</span>
<span class="x">    private $negotiator;</span>

<span class="x">    function __construct(ContentNegotiator $negotiator)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;negotiator = $negotiator;</span>
<span class="x">    }</span>

<span class="x">    function viewPostAction(Request $request)</span>
<span class="x">    {</span>
<span class="x">        $contentType = $this-&gt;negotiator-&gt;getTypeFromRequest($request);</span>

<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The controller gets access to the request, so it is able to pass it as an
argument to any service that needs it.</p>

<p>That&#39;s rather tedious though. And that is most likely one of the reasons why
scopes were introduced in the first place. The user should not have to care
about passing things all over the place.</p>

<p>In many cases the problem can be solved by using event listeners:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class ContentNegotiationListener</span>
<span class="x">{</span>
<span class="x">    private $negotiator;</span>

<span class="x">    function __construct(ContentNegotiator $negotiator)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;negotiator = $negotiator;</span>
<span class="x">    }</span>

<span class="x">    function onKernelRequest($event)</span>
<span class="x">    {</span>
<span class="x">        $request = $event-&gt;getRequest();</span>

<span class="x">        $contentType = $this-&gt;negotiator-&gt;getTypeFromRequest($request);</span>
<span class="x">        $request-&gt;attributes-&gt;set(&#39;contentType&#39;, $contentType);</span>
<span class="x">    }</span>
<span class="x">}</span>

<span class="x">class BlogController</span>
<span class="x">{</span>
<span class="x">    function viewPostAction($contentType)</span>
<span class="x">    {</span>
<span class="x">        // OMG magic!</span>
<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Event listeners allow you to compose small pieces of request-specific work in
a decoupled manner. Whenever you need to do something for multiple controllers
based on some information contained in the request, this is usually a good
approach.</p>

<p>However, this solution will not always work. Sometimes you just need more
granularity. The controller needs to be able to specify specific actions to
take.</p>

<h2>Pipeline</h2>

<p>I don&#39;t currently have a complete answer for how to manage the flow of
information through the system at runtime. I do believe that there should be
an equivalent of what the DIC does at construction time, but for the runtime
during which you have access to contextual (e.g. request-specific)
information.</p>

<p>Most likely this runtime sub-system will be structured as a pipeline of
functions or components. The output of one component will be passed to the
next one, and there no longer needs to be an explicit relationship between
them.</p>

<p>The work the Patrick Ryan has done on
<a href="https://github.com/CodeOtter/verband-framework">Verband</a>
seems like a step in the right direction. Check it out.</p>

<p><center>
    <img src="/img/dic/pipeline.png" alt="Pipeline">
</center></p>

<p>I would love to hear some more ideas on how this pipeline could or should
work!</p>

<h2>Conclusion</h2>

<p>Symfony2 is a very container-centric framework. That is mostly a good thing,
as it allows for components to be independent from the framework itself.</p>

<p>However, in addition to construction, the container is also responsible for
managing state and context transitions. There is no clear separation between
construction time and runtime, which leads to a lot of complexity.</p>

<p>We should fix this.</p>

<p>I&#39;m just going to leave you with a quote from Joe Armstrong:</p>

<blockquote>
<p>The crazy thing is we still are extremely bad at fitting things together -
still the best way of fitting things together is the unix pipe</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">find ... | grep | uniq | sort | ...
</code></pre></div>
<p>and the <em>fundamental</em> reason for this is that components should be separated
by well-defined protocols in a universal intermediate language.</p>

<p>Fitting things together by message passing is the way to go - this is basis
of OO programming - but done badly in most programming languages.</p>

<p>If ALL applications in the world were interfaced by (say) sockets + lisp
S-expressions and had the semantics of the protocol written down in a formal
notation - then we could reuse things (more) easily.</p>

<p><em>&mdash; Joe Armstrong, <a href="http://erlang.org/pipermail/erlang-questions/2013-January/071944.html">erlang-questions mailing
list</a></em></p>
</blockquote>

<h2>Summary</h2>

<ul>
<li>Services should be stateless.</li>
<li>Container scopes should be abolished.</li>
<li>We need a way of managing runtime flow.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Composer Stability Flags</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/02/07/composer-stability-flags.html"/>
        <id>https://igor.io/2013/02/07/composer-stability-flags.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Composer Stability Flags</h1>

<p>The most common issue coming up in composer support at the moment is confusion
about how stability is determined.</p>

<p>Usually it is a variant of this case:</p>

<blockquote>
<p>When I require package A:dev-master, which depends on B:dev-master, composer
tells me that package B was not found.</p>
</blockquote>

<h2>Root package</h2>

<p>The root package is the main <code>composer.json</code> file. It is the one in the same
directory that you run <code>composer install</code> in. Many of the fields in
<code>composer.json</code> are <em>root-only</em>, which means that they only have an effect if
they are specified in the root package.</p>

<p>The root package is a context. Let&#39;s say you are depending on a package <em>A</em>.
In the directory of your own package, your package is the root package. If you
<code>cd</code> into the directory of <em>A</em>, then <em>A</em> is the root package.</p>

<p>Stability is determined by the root package, and the root package only. Let
that sink in for a moment, and don&#39;t ever forget it.</p>

<p>Composer puts the decision of how stable your dependencies are in the hands of
the user. As a user, you decide if you want to use dev, beta or stable
releases.</p>

<h2>minimum-stability</h2>

<p>The basis of this decision is the <em>minimum-stability</em> field in the root
package. It&#39;s a <em>root-only</em> field. It defines a default value for stability
flags and acts as a lower bound.</p>

<p><center>
    <img src="/img/composer/minimum-stability.png" alt="minimum-stability">
</center></p>

<p>It&#39;s a ruler that you can pull down. By default only shows &quot;stable&quot;, but you
can pull down and reveal the lower stability flags.</p>

<p><em>minimum-stability</em> defines the default stability flag for all constraints.</p>

<h2>Stability resolution</h2>

<p>So let&#39;s think of a scenario where the root package requires package <em>A:dev-
master</em>, which in turn requires <em>B:dev-master</em>.</p>

<p><center>
    <img src="/img/composer/scenario-1.png" alt="scenario-1">
</center></p>

<p>The root package looks like this:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;A&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Composer will follow these steps:</p>

<ul>
<li><p>Determine <code>minimum-stability</code>: In this case the field is not defined, so it
is set to the default value, which is &quot;stable&quot;.</p></li>
<li><p>It sees that <em>A</em> has a constraint for version <code>dev-master</code>. Due to the
<code>dev-</code> prefix, this is known to be a dev version, and dev versions have
&quot;dev&quot; stability. Because this constraint for a dev version is defined in
the root package, it implicitly gets the <code>@dev</code> stability flag.</p></li>
<li><p>Since <em>A</em> has a constraint of <code>A:dev-master@dev</code>, this version matches and
composer follows the link. It sees that <em>A</em> has a dependency on <em>B</em> with a
constraint of <code>dev-master</code>. This has a <code>dev-</code> prefix, so it has a stability
of &quot;dev&quot;.</p></li>
</ul>

<p>However, since the constraint is defined in package <em>A</em> and not the root
  package, it does not implicitly get the <code>@dev</code> stability flag. Instead it
  inherits the <code>minimum-stability</code> which is &quot;stable&quot;. So the resolved
  constraint is <code>B:dev-master@stable</code>.</p>

<p>At this point it will fail, because <code>B:dev-master@stable</code> does not resolve to
anything. It will tell you that it cannot find a package <em>B</em> within the
stability range you provided.</p>

<p>One way to fix the problem would be to just lower your <code>minimum-stability</code>
down to &quot;dev&quot;. But that&#39;s usually a really bad idea, because it applies to all
constraints and as a result you will get unstable versions of <em>all</em> packages.</p>

<p>So please, don&#39;t do that.</p>

<h2>Stability flags</h2>

<p>Instead, use stability flags.</p>

<p>A flag is defined as part of a version constraint. Since stability is
determined by the root package only, flags are also <em>root-only</em>. Flags defined
in dependent packages are simply ignored.</p>

<p>You can use flags to whitelist specific unstable packages. In this case I want
to whitelist <em>B</em>. Here is how you do that:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;A&quot;</span><span class="p">:</span> <span class="s2">&quot;dev-master&quot;</span><span class="p">,</span>
        <span class="nt">&quot;B&quot;</span><span class="p">:</span> <span class="s2">&quot;@dev&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Note that I did not define an actual version in the root package. This means
that the root package does not care which version of <em>B</em> is installed, it
delegates that decision to <em>A</em>, which has a more specific constraint.</p>

<p>The benefit is that if <em>A</em> decides to change its dependency on <em>B</em> from
<code>dev-master</code> to <code>~1.0</code> or anything else, the root package will not need any
changes.</p>

<h2>Silex example</h2>

<p>To get a better idea of how this works in practice, let&#39;s look at an example
involving silex.</p>

<p>At the time of this writing there is no stable version of silex, which means
in order to install it, you need to add a <code>@dev</code> flag:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;silex/silex&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.*@dev&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Silex only has a <code>1.0.x-dev</code> version, which is the dev version of the <code>1.0</code>
branch.</p>

<p>All of the dependencies of silex have stable releases. Which means by default
you will get <code>v2.1.7</code> of a number of symfony components and <code>v1.0.1</code> of
pimple.</p>

<p>If you wanted to try the <code>v2.2.0-RC1</code> version of those symfony components that
was released a few days ago, you could whitelist them like this:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;silex/silex&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.*@dev&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/event-dispatcher&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/http-foundation&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/http-kernel&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span><span class="p">,</span>
        <span class="nt">&quot;symfony/routing&quot;</span><span class="p">:</span> <span class="s2">&quot;@RC&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Since specifying all of those versions is kind of tedious, you could lower the
<code>minimum-stability</code>. In this case that is okay, because it is not installing
unstable packages that you do not want.</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;minimum-stability&quot;</span><span class="p">:</span> <span class="s2">&quot;RC&quot;</span><span class="p">,</span>
    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;silex/silex&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.*@dev&quot;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>prefer-stable</h2>

<p>Some time after this post was written, composer got a new <code>prefer-stable</code>
feature.</p>

<p>If you don&#39;t want to figure out the stability of your deps, you can just use
the <a href="http://getcomposer.org/doc/04-schema.md#prefer-stable"><code>prefer-stable</code></a>
field in your root package. Composer will try to figure out the most stable
deps it can.</p>

<p>This is quite convenient and often will get you something good enough. But I
would still encourage you to think more about which stability you really want,
and declaring it explicitly. You may be trading convenience for control.</p>

<h2>Conclusion</h2>

<p>Hopefully this gives you a better understanding of how composer determines
stability and how you can use stability flags to get those unstable versions.</p>

<p>Remember though: Most likely the reason why you need those stability flags is
because the maintainers of your dependencies did not tag stable releases. You
should go and annoy them <em>right now</em> so they add branch-aliases and tag
releases. And as soon as they do, you can nuke those stability flags and be
happy again.</p>

<p>See also: <a href="/2013/01/07/composer-versioning.html">Composer Version Constraints</a>.</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Value of HttpFoundation</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/02/03/http-foundation-value.html"/>
        <id>https://igor.io/2013/02/03/http-foundation-value.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Value of HttpFoundation</h1>

<p>In the previous post I talked about why most HTTP abstractions for PHP failed
to gain adoption and how Symfony2 HttpFoundation is different:</p>

<blockquote>
<ul>
<li>It is part of a popular framework, giving it wide adoption.</li>
<li>It stays close to HTTP, trying to rebuild the request from the environment.</li>
</ul>
</blockquote>

<p>I would like to elaborate on this a bit and clarify some points, because I
think there is a lot of value hidden inside the abstraction that many people
are not aware of.</p>

<p>Instead of focusing on the HttpKernel and the outer shell, I want to look at
how adopting the HttpFoundation forces huge changes on the design of the app
itself.</p>

<h2>Superglobals</h2>

<p>So let&#39;s start off by comparing HttpFoundation to PHP&#39;s native way of doing
things: Superglobals.</p>

<p><center>
    <img src="/img/superglobal.png" alt="Evil Superglobal">
</center></p>

<p>Most of the time, PHP developers just use <code>$_GET</code>, <code>$_POST</code> and <code>$_COOKIE</code>.
And maybe on rare occasions some keys from <code>$_SERVER</code>. Most of them do not
even properly understand HTTP, and they get away with it because they manage
to get shit done using their subset of web knowledge.</p>

<p>But there has been a strive for professionalism in the PHP community recently.
More frameworks are making HTTP explicit and empowering their users to take
full advantage of headers, status codes, caching, etc.</p>

<p>The main problem that the superglobals bring with them is the fact that they
are by definition accessible from anywhere. This global state leads to code
that is unpredictable and hard to test and re-use.</p>

<p>The way that HttpFoundation addresses this issue is by making all access to
request variables explicit and tied to the request object. If you want to
fetch a query string variable, instead of using <code>$_GET</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$_GET[&#39;foo&#39;]</span>
</code></pre></div>
<p>You now retrieve it from the request:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$request-&gt;query-&gt;get(&#39;foo&#39;)</span>
</code></pre></div>
<p>The consequence of this change is that any code accessing request variables
must use <code>$request</code> and therefore must have access to it. That means that you
are forced to pass the request object around which in turn lets you see
exactly where it is being used.</p>

<p>Knowing is half the battle. Once you know a certain function or object has a
dependency on the request, you can easily move that dependency out and pass in
the required values as arguments directly, leading to lower coupling.</p>

<p>By eliminating global state, you can establish clear boundaries.</p>

<h2>Request and response are values</h2>

<p>If you think about it, protocol messages are values. They&#39;re pure data. As
such, they are (or should be) immutable.</p>

<p>The object-oriented representation of an immutable value is a value object.
You cannot change an existing value object, but you can create a new one with
your changes applied.</p>

<p>HttpFoundation&#39;s <code>Request</code> and <code>Response</code> were not designed to be immutable,
but they come surprisingly close (e.g. <code>Request::duplicate()</code>). And even if
they technically aren&#39;t, it helps to think about these objects as value
objects, because it clarifies their role in the system.</p>

<p>They hold the value of what came from the wire and what will go onto the wire.</p>

<p>In case you are wondering about huge request and response bodies and how a
value object can possibly represent a stream of partial values, this could
be solved quite easily using iterators, which would provide those values
incrementally. As a matter of fact, that&#39;s exactly what Rack does.</p>

<h2>HttpKernel is a function</h2>

<p>To look at those messages in the context of an application, the kernel is a
<em>function</em> that converts requests to responses.</p>

<p><center>
    <img src="/img/http_kernel_function.png" alt="HttpKernel as a function">
</center></p>

<p>And this pattern repeats itself inside the kernel like a fractal. The default
HttpKernel implementation delegates the response creation to controllers,
which guess what? Are just functions (PHP callables) from request to response.</p>

<p>HttpFoundation brings functional programming to the HTTP abstraction layer.</p>

<p>And that&#39;s a Good Thing™.</p>

<p>It&#39;s an extremely simple concept that leads to a clean functional design which
is easy to test and makes it easy to define a boundary between HTTP and your
application.</p>

<h2>Conclusion</h2>

<p>The request and response objects from HttpFoundation do not give you much new
functionality over what PHP itself already provides. They do give you much
better APIs though, which goes an extremely long way if you are a professional
HTTP snob.</p>

<p>The main benefit however is that you get an obvious way to isolate yourself
from HTTP. This not only allows that code to run in a CLI or testing context,
but avoids side effects, making it less likely to randomly explode in your
face.</p>

<h2>Summary</h2>

<p>Here&#39;s why you should care about HttpFoundation:</p>

<ul>
<li>It eliminates PHP superglobals.</li>
<li>It provides you with (conceptual) value objects and nice APIs.</li>
<li>It enables functional super powers!</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>HttpKernel middlewares</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/02/02/http-kernel-middlewares.html"/>
        <id>https://igor.io/2013/02/02/http-kernel-middlewares.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>HttpKernel middlewares</h1>

<h2>A brief history of language-specific HTTP interfaces</h2>

<ul>
<li>1997: <a href="http://jcp.org/en/jsr/detail?id=53">Java Servlet</a></li>
<li>2003: <a href="http://www.python.org/dev/peps/pep-0333/">Python WSGI</a></li>
<li>2007: <a href="http://rack.rubyforge.org/doc/SPEC.html">Ruby Rack</a></li>
<li>2009: <a href="http://search.cpan.org/%7Emiyagawa/PSGI-1.101/PSGI.pod">Perl PSGI</a></li>
<li>2011: Symfony2 HttpKernelInterface</li>
</ul>

<h2>Rack as an interface</h2>

<p>From the aforementioned interfaces, I&#39;m most familiar with Rack. And in fact,
Rack seems the closest to what Symfony2 brings to the PHP world.</p>

<p>So what is Rack all about? Here&#39;s a basic hello world from <a href="http://chneukirchen.org/blog/archive/2007/02/introducing-rack.html">Introducing
Rack</a>:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">HelloWorld</span>
  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s2">&quot;Content-Type&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;text/plain&quot;</span><span class="p">},</span> <span class="o">[</span><span class="s2">&quot;Hello world!&quot;</span><span class="o">]]</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>First and foremost, it is a specification. A spec that defines how a webserver
interacts with a Ruby application. It defines three major components:</p>

<ul>
<li><p><strong>Environment:</strong> Environment variables representing the HTTP request. Mostly
taken from CGI, but has additional Rack-specific variables.</p></li>
<li><p><strong>Response:</strong> The response format. It is an array with three elements: The
status code, a hash of headers and a list of strings for the body.</p></li>
<li><p><strong>Application:</strong> An app is an object with a <code>call</code> method. The input argument
is an env hash, the return value a response array.</p></li>
</ul>

<p>By defining these things, it achieves interop between webservers and
applications. Any web framework that conforms to the specification can be
served by any rack-capable web server.</p>

<p>For a language that was not built for the web specifically, this can be quite
a big deal. By providing such an abstraction inside of the language, it
becomes possible to support many different protocols like CGI, FCGI or HTTP
directly.</p>

<blockquote>
<p>PHP does not care. Because PHP has this abstraction built into the engine at
a lower level. It&#39;s called SAPI (Server API), and it translates between a
backend like CGI or FCGI and the script level CGI interface used by user
code.</p>
</blockquote>

<h2>Rack as a stack of middlewares</h2>

<p>Rack has two sides. The interface spec is what you see from the outside.
However, the project also distributes a <code>rack</code> gem. In case you&#39;re not
familiar with gems, gems are Ruby packages.</p>

<p>This gem gives you classes for request and response, which wrap around the
low-level data structures and give you an object-oriented interface to access
specific information.</p>

<p>In addition to that, the gem ships with a set of general-purpose Rack apps
which act as decorators. That means they all follow this pattern:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">EmptyDecorator</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
    <span class="vi">@app</span> <span class="o">=</span> <span class="n">app</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
    <span class="vi">@app</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>The beauty of this is that you get to run custom code before and after the app
runs, and you get to change the request and response values. Without modifying
the app code at all!</p>

<p>This also means that you can stack these <em>middlewares</em> to extend an app. And
since constructing a nested object graph is tedious, Rack ships with
<code>Rack::Builder</code>, which allows you to express this in a more natural way:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">builder</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Builder</span><span class="o">.</span><span class="n">new</span>
<span class="n">builder</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">CommonLogger</span>
<span class="n">builder</span><span class="o">.</span><span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">ShowExceptions</span>
<span class="n">builder</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</code></pre></div>
<p>What this does behind the scenes is:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">app</span> <span class="o">=</span> <span class="no">Rack</span><span class="o">::</span><span class="no">CommonLogger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rack</span><span class="o">::</span><span class="no">ShowExceptions</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">))</span>
</code></pre></div>
<p>Don&#39;t tell anyone, but these are applied design patterns in Ruby.</p>

<h2>Returning to PHP land</h2>

<p>Here is what Rack does: It provides a language-level abstraction for HTTP.</p>

<p>There have been many attempts to port this idea to PHP, and all of them have
failed, because PHP already has such an abstraction. It&#39;s all in those
superglobals everybody is so scared of: <code>$_GET</code>, <code>$_POST</code> and <code>$_SERVER</code>.</p>

<p>The problem is that it is actually a flawed representation of HTTP. The
distinction between <code>GET</code> and <code>POST</code> variables is quite arbitrary. The
protocol only knows about query string parameters and a request body. And of
course, there are more than just two request methods. But PHP does not reflect
that.</p>

<p>And that&#39;s where <em>HttpFoundation</em> from Symfony2 comes in.</p>

<p>HttpFoundation models HTTP messages as PHP objects. What makes it different
from other attempts to bring Rack to PHP is:</p>

<ul>
<li>It is part of a popular framework, giving it wide adoption.</li>
<li>It stays close to HTTP, trying to rebuild the request from the environment.</li>
</ul>

<p>All that hard work that the web-server did, translating HTTP to CGI? Let&#39;s
destroy that by going from CGI back to HTTP. That pretty much sums up
HttpFoundation.</p>

<h2>HttpKernelInterface</h2>

<p>It&#39;s quite amazing that something with such a ridiculously long name is
supposed to be the rack of PHP:
<code>Symfony\Component\HttpKernel\<wbr>HttpKernelInterface</code>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">interface HttpKernelInterface</span>
<span class="x">{</span>
<span class="x">    /** @return Response */</span>
<span class="x">    public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = true);</span>
<span class="x">}</span>
</code></pre></div>
<p>What&#39;s different about <code>HttpKernelInterface</code> (compared to Rack) is that it
does not have a specification. Also, it is coupled to a framework, which means
it will never become as universally accepted as Rack.</p>

<p>At least not until the PHP community agrees that they need a better CGI.</p>

<p>So what exactly is the point of this interface? It&#39;s not about interacting
with web servers. It&#39;s about interacting with fake HTTP clients. The kernel
represents an HTTP server. You can simulate HTTP requests against your app.</p>

<p>This is nice for functional testing. But not really necessary, as you can do
that <a href="https://github.com/igorw/CgiHttpKernel">through CGI</a> just fine. Another
thing you can do is HTTP reverse proxy caching. That&#39;s cute, but there is
really no reason not to use Varnish.</p>

<p><small><small>Except for restrictive shared hosting environments which can go to
hell.</small></small></p>

<p>So, let&#39;s make the <code>HttpKernelInterface</code> more useful. That fancy middleware
crap that Rack has, we can do that in PHP as well!</p>

<h2>Logger middleware</h2>

<p>Logging requests is something that should be done by your webserver.</p>

<p>In certain cases there may however some benefit to doing it inside the
application. You have more context, which means you can gather metrics about a
specific user being logged in, which may not be as easily obtainable at the
webserver level.</p>

<p>By applying the decorator pattern, you can create an <code>HttpKernel</code> that wraps
another one, delegates <code>handle</code> calls, and does some logging.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Middleware;</span>

<span class="x">use Psr\Log\LoggerInterface;</span>
<span class="x">use Symfony\Component\HttpFoundation\Request;</span>
<span class="x">use Symfony\Component\HttpKernel\HttpKernelInterface;</span>

<span class="x">class Logger implements HttpKernelInterface</span>
<span class="x">{</span>
<span class="x">    private $app;</span>
<span class="x">    private $logger;</span>

<span class="x">    public function __construct(HttpKernelInterface $app, LoggerInterface $logger)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;app = $app;</span>
<span class="x">        $this-&gt;logger = $logger;</span>
<span class="x">    }</span>

<span class="x">    public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)</span>
<span class="x">    {</span>
<span class="x">        $response = $this-&gt;app-&gt;handle($request, $type, $catch);</span>

<span class="x">        $this-&gt;logger-&gt;info(sprintf(&#39;%s &quot;%s %s %s&quot; %d&#39;,</span>
<span class="x">            $request-&gt;getHost(),</span>
<span class="x">            $request-&gt;getMethod(),</span>
<span class="x">            $request-&gt;getRequestUri(),</span>
<span class="x">            $request-&gt;server-&gt;get(&#39;SERVER_PROTOCOL&#39;),</span>
<span class="x">            $response-&gt;getStatusCode()));</span>

<span class="x">        return $response;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>This logger middleware can be composed with <em>any</em> <code>HttpKernel</code> and with <em>any</em>
PSR-3 logger. For example, you could now use it with Silex and Monolog:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app = new Silex\Application();</span>

<span class="x">$app-&gt;get(&#39;/&#39;, function () {</span>
<span class="x">    return &quot;Hello World!\n&quot;;</span>
<span class="x">});</span>

<span class="x">$app = new Igorw\Middleware\Logger(</span>
<span class="x">    $app,</span>
<span class="x">    new Monolog\Logger(&#39;app&#39;)</span>
<span class="x">);</span>

<span class="x">$request = Request::createFromGlobals();</span>
<span class="x">$app-&gt;handle($request)-&gt;send();</span>
</code></pre></div>
<p>Instead of Silex you could use a Symfony2 app. Or a Laravel4 app. Or you can
make your own <code>HttpKernel</code>, like this one:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Middleware;</span>

<span class="x">use Symfony\Component\HttpFoundation\Request;</span>
<span class="x">use Symfony\Component\HttpKernel\HttpKernelInterface;</span>

<span class="x">class CallableHttpKernel implements HttpKernelInterface</span>
<span class="x">{</span>
<span class="x">    private $callable;</span>

<span class="x">    public function __construct(callable $callable)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;callable = $callable;</span>
<span class="x">    }</span>

<span class="x">    public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)</span>
<span class="x">    {</span>
<span class="x">        return call_user_func($this-&gt;callable, $request, $type, $catch);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Which can be used by passing a callable to the constructor:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app = new CallableHttpKernel(function (Request $request) {</span>
<span class="x">    return new Response(&quot;Hello World!\n&quot;);</span>
<span class="x">});</span>
</code></pre></div>
<p>As long as you have an object that implements the <code>HttpKernelInterface</code>, it
can be used with this logger middleware.</p>

<h2>Stack</h2>

<p>While doing HTTP reverse proxy caching in PHP is pointless (as previously
mentioned), the <code>HttpKernel</code> component ships with a middleware for doing just
that. So let&#39;s try it.</p>

<p>And in fact the <code>HttpCache</code> middleware is already using the decorator pattern,
so it composes extremely well with what we already have:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use Igorw\Middleware\CallableKernel;</span>
<span class="x">use Symfony\Component\HttpKernel\HttpCache\Store;</span>

<span class="x">$app = new CallableHttpKernel(function (Request $request) {</span>
<span class="x">    return (new Response(&quot;Hello World!\n&quot;))</span>
<span class="x">        -&gt;setCache([&#39;s_maxage&#39; =&gt; 20]);</span>
<span class="x">});</span>

<span class="x">$app = new Igorw\Middleware\Logger(</span>
<span class="x">    new Symfony\Component\HttpKernel\HttpCache\HttpCache(</span>
<span class="x">        $app,</span>
<span class="x">        new Store(__DIR__.&#39;/cache&#39;)</span>
<span class="x">    ),</span>
<span class="x">    new Monolog\Logger(&#39;app&#39;)</span>
<span class="x">);</span>
</code></pre></div>
<p>Once you start nesting those middlewares, the construction logic starts to
become a bit hairy though. Wouldn&#39;t it be great to have an API that looks more
like pushing middlewares onto a stack?</p>

<p>Ideally something like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$stack = (new Stack())</span>
<span class="x">    -&gt;push(&#39;Igorw\Middleware\Logger&#39;, new Monolog\Logger(&#39;app&#39;))</span>
<span class="x">    -&gt;push(&#39;Symfony\Component\HttpKernel\HttpCache\HttpCache&#39;, new Store(__DIR__.&#39;/cache&#39;));</span>

<span class="x">$app = $stack-&gt;resolve($app);</span>
</code></pre></div>
<p>Well, that&#39;s easy enough to implement. <a href="https://github.com/igorw/middleware/blob/master/src/Igorw/Middleware/Stack.php">Take a look at the <code>Stack</code> on
GitHub</a>.</p>

<p>So now we have a stack of middlewares. Calling <code>resolve</code> will construct the
object graph and return the outermost <code>HttpKernel</code>.</p>

<p>It exposes a nice API and easily allows adding new middlewares to the stack.
It is the rough equivalent of
<a href="http://rack.rubyforge.org/doc/Rack/Builder.html">Rack::Builder</a>, but not
quite as feature-rich. One missing feature in particular is prefix matching.
I&#39;ll leave that for another day.</p>

<h2>Better use cases</h2>

<p>So far I&#39;ve only shown you logging and caching, which are both not very sexy
or even useful. You can go way beyond those boring cases though!</p>

<p><strong>Authentication</strong>. For Rack there are quite a few authentication middlewares
which can be used with <em>any</em> Rack app. You configure them, they sit in front
of the app and do their thing. A middleware can provide contextual information
to the application by adding it to the environment. The <code>HttpKernel</code>
equivalent would be <code>$request-&gt;attributes</code>.</p>

<p><strong>Debug toolbar</strong>. Currently the Symfony2 debug toolbar only works with the
Symfony2 framework. There is ongoing work to decouple it. It could be done as
a request listener. An interesting alternative would be to implement it as a
middleware, so that it can be composed with other kernels.</p>

<p><strong>Injected routes</strong>, for example an admin panel. You can simply inject routes
that are prepended to the application.</p>

<p><strong>Signed cookies</strong>. The middleware would just validate all incoming cookies,
removing invalid ones and sign outgoing ones as trusted. That prevents the
cookies from being tampered with.</p>

<p><strong>Asset management</strong>. It could be an integration with Assetic, but operating
at the HTTP level. It would rewrite the HTML source to the minified versions.</p>

<p><strong>Force SSL</strong> seems common enough, it could also be implemented as a
middleware. If the redirect depends on app-specific context it makes sense to
not have the webserver do it.</p>

<p><strong>Error handling</strong>. If all of the inside <code>handle</code> calls are done with <code>$catch</code>
set to <code>false</code>, it should be possible to handle all of those errors at the
middleware layer. Obviously this needs some tweaking, since certain errors are
app-specific and need special care.</p>

<p><strong>Sessions</strong>. Initialization of the session itself can be implemented as a
middleware, that way it is available to all other middlewares as opposed to
only the application itself.</p>

<p>There&#39;s so many more things you can do. Middlewares thrive at adding
application functionality in a decoupled manner.</p>

<p>We should consider implementing more things at this level. It makes the
<code>HttpKernelInterface</code> more attractive for frameworks to adopt. And more
importantly: it makes it actually useful.</p>

<h2>A word of warning</h2>

<p>Middlewares are neat, but they are not suited for everything.</p>

<p>For one, infrastructure tasks like logging and caching really belong into your
webserver. Re-implementing that in PHP is just going to slow things down. Use
Varnish.</p>

<p>The more important point however is that <em>middlewares are coupled to HTTP</em>.
They should only be considered an integration point. The specific pieces of
functionality they provide should still be moved to separate classes so that
they can be properly unit tested and perhaps re-used.</p>

<h2>Summary</h2>

<ul>
<li><code>HttpKernel</code> is almost like Rack.</li>
<li>The PHP community should start stacking middlewares.</li>
<li>Composition is king!</li>
</ul>

<blockquote>
<p>All of the code from this post <a href="https://github.com/igorw/middleware">is available on
GitHub</a>.</p>
</blockquote>

<p><center style="margin-top: 25px;">
    <big>
        <a  href="/2013/05/23/introducing-stack.html"
            style="background: white; border: 2px #d14 solid; border-radius: 5px; padding: 10px; color: #d14;">
            Update: Introducing Stack
        </a>
    </big>
</center></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Autoload path depth insanity</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/01/23/autoload-insanity.html"/>
        <id>https://igor.io/2013/01/23/autoload-insanity.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Autoload path depth insanity</h1>

<p>In the recent 2-3 years there have been a few major developments in the PHP
community. I&#39;d say the most notable ones were the creation of the PSR-0
autoloading standard and the dawn of the composer dependency manager.</p>

<p>The PSR proposals were originally based on the common ground between the
projects pushing them. Today they dominate the way modern PHP libraries are
written. I think it&#39;s time to stop and think for a minute about how we really
want our code and libraries to look like.</p>

<h2>Update (2014-01-04)</h2>

<p>The situation has improved. We now have a
<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md">PSR-4 specification</a>
and support for this new standard
<a href="http://seld.be/notes/psr-4-autoloading-support-in-composer">in composer</a>.</p>

<p>Thanks to everyone who made this happen.</p>

<h2>Autoloading</h2>

<p>While I believe that the creation of
<a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR-0</a>
was extremely important for PHP, I no longer care about autoloading. The reason
is simple: Composer made it irrelevant.</p>

<p>With composer you get autoloading for free, but even better: you now have a
standard tool that can generate a classmap instantly. Classmap is one of the
most performant ways to lazy-load classes and it does not even care which
files they are in.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">src
└── Symfony
    └── Component
        └── HttpKernel
            └── HttpKernelInterface.php

library
└── Zend
    └── Mvc
        └── Application.php
</code></pre></div>
<p>If you take a look at these two examples, they have something in common. Both
of them contain a useless level of directory nesting. Both Symfony&#39;s <code>src</code> and
Zend Framework&#39;s <code>library</code> directory contain only one single directory -- as
such it could be eliminated.</p>

<p>Of course PSR-0 would allow removing the <code>src</code> directory and having <code>Symfony</code>
in the root directly (and some projects do that) but that&#39;s not ideal, as you
lose the ability of having a consistent directory for the source code.</p>

<h2>Who will win the pointless nesting competition?</h2>

<p>Here is an example from a library I wrote, called Ilias:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ilias
├── src
│   └── Igorw
│       └── Ilias
│           └── Program.php
└── tests
    └── Igorw
        └── Tests
            └── Ilias
                └── ProgramTest.php
</code></pre></div>
<p>Unlike the previously mentioned projects, this library is not part of a big
organization. As you can see, there are not one, but <em>two</em> levels of
unnecessary directory nesting. The name of my project is <code>igorw/ilias</code>, why
would I care to repeat this information <em>yet again</em> in the directory
structure?</p>

<p>And it gets even worse when look at the unit tests. The amount of nesting is
reaching a level of ridiculousness that exceeds the amount of ignorance a
human being can generate. I hate to say it, but this is annoying.</p>

<blockquote>
<p>Side note: Fortunately PHPUnit does not care about autoloading, so I can
shorten the test filename to <code>tests/unit/ProgramTest.php</code>, which also allows
for a clean separation between unit, integration and functional tests.
<a href="https://twitter.com/__edorian">Thank you, Volker</a>.</p>
</blockquote>

<p>But instead of just complaining, I have a few suggestions that would greatly
improve the way we deal with autoloading today, by introducing a sane amount
of brevity.</p>

<p>It would allow the path to be shortened to <code>src/Program.php</code>.</p>

<h2>Proposal</h2>

<p>Based on <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR-0</a>,
these are the changes I would make:</p>

<ul>
<li><p>An autoloader must take a <code>class_prefix</code> option which defaults to <code>null</code>.</p></li>
<li><p>If the <code>class_prefix</code> is not <code>null</code> and the <abbr title="Fully-qualified
class name">FQCN</abbr> begins with the <code>class_prefix</code>, the <em>transformed
class prefix</em> must be stripped from the beginning filesystem path.</p></li>
<li><p>The <em>transformed class prefix</em> is calculated by applying the following
transformations to it:</p>

<ul>
<li>If the last character is not a namespace separator, append one.</li>
<li>Convert each namespace separator to a <code>DIRECTORY_SEPARATOR</code>.</li>
</ul></li>
</ul>

<p>Here are some examples:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">class_prefix: Symfony
class name:   Symfony\Component\HttpKernel\HttpKernelInterface
filename:             Component/HttpKernel/HttpKernelInterface.php

class_prefix: Zend
class name:   Zend\Mvc\Application
filename:          Mvc/Application.php

class_prefix: Igorw\Ilias
class name:   Igorw\Ilias\Program
filename:                 Program.php
</code></pre></div>
<p>The composer configuration could be something along these lines, the class
prefix can be used both matching and for constructing the directory prefix:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;autoload&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;psr-n&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;Igorw\\Ilias&quot;</span><span class="p">:</span> <span class="s2">&quot;src&quot;</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Based on the feedback I receive I may write up a more detailed spec and a
proof-of-concept implementation for submission to the PHP
<a href="http://www.php-fig.org/">FIG</a>.</p>

<p><center style="margin-top: 25px;">
    <big>
        <a  href="https://gist.github.com/4600419"
            style="background: white; border: 2px #d14 solid; border-radius: 5px; padding: 10px; color: #d14;">
            Please leave a comment!
        </a>
    </big>
</center></p>

<h2>FAQ</h2>

<ul>
<li><strong>Why not just use classmap?</strong></li>
</ul>

<p>The main annoyance with classmap autoloading is that you must manually re-
  dump it every time a new class is added, which makes it unsuited for a
  development environment.</p>

<p>Sure, you could hack together an autoloader that re-generates the class map
  if a class is not found, but I would strongly favour a clean solution over
  such hacks.</p>

<ul>
<li><strong>Doesn&#39;t composer&#39;s <code>target-dir</code> fix this?</strong></li>
</ul>

<p>Unfortunately, no. The <code>target-dir</code> is prepended to the entire package name,
  which means you will need to put code in your top level directory.</p>

<p>What I am asking for is <code>src/{$prefix}/Name.php</code>, which is not possible with
  <code>target-dir</code>.</p>

<ul>
<li><strong>But Symfony2 bundles do not have nesting and work fine.</strong></li>
</ul>

<p>See the composer <code>target-dir</code> question above.</p>

<ul>
<li><strong>Just use an IDE, it will solve all your problems!</strong></li>
</ul>

<p>An IDE cannot fix the filesystem structure of a software project.</p>

<ul>
<li><strong>What if the FIG does not like it?</strong></li>
</ul>

<p>Depending on the feedback I receive, I may consider submitting a patch for
  composer anyway.</p>

<ul>
<li><strong>&lt;insert random insult here&gt;</strong></li>
</ul>

<p>Thanks man, I appreciate it.</p>

<h2>Obligatory XKCD</h2>

<p><center>
    <img src="https://imgs.xkcd.com/comics/standards.png" alt="XKCD: Standards">
</center></p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Composer Version Constraints</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2013/01/07/composer-versioning.html"/>
        <id>https://igor.io/2013/01/07/composer-versioning.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Composer Version Constraints</h1>

<blockquote>
<p>If you don&#39;t know what composer is, <a href="http://getcomposer.org/">go to the composer
homepage</a> and start reading.</p>
</blockquote>

<p>I&#39;ve seen many people struggle with the constraints they put on their composer
dependencies. Hopefully this post will shed some light on why certain things
are bad, and how to avoid them. I will start out with the worst possible
scenario, then improve the constraints step by step.</p>

<h2>The almighty asterisk</h2>

<p>Composer has a dependency resolver, so it should be able to automagically
figure out what I need, right? Wrong.</p>

<p>Declaring a version constraint of <code>*</code> is probably one of the worst things you
can do. Because you have absolutely no control over what you will get. It
could be <em>any</em> version that matches your <code>minimum-stability</code> and other
constraints.</p>

<p>Essentially you are playing a game of russian dependency roulette with
composer, eventually you will get hurt by it. And then you will probably blame
the tool for failing you so badly.</p>

<p>If you&#39;re going to be careless, please at least depend on the latest
development version, which is usually labeled as <code>dev-master</code>.</p>

<h2>Hard-coded branch names</h2>

<p>So now you are using <code>dev-master</code>. The problem is that <code>dev-master</code> is a
moving target. For one, you will always get unstable packages (unstable in
terms of composer&#39;s stability flags). But the bigger problem is that the
meaning of <code>dev-master</code> can change at any time.</p>

<p>Let&#39;s say that it represents the latest <code>1.0</code> development version. At some
point the author of said library starts working on the <code>1.1</code> release, so they
branch off a <code>1.0</code> branch, and <code>dev-master</code> becomes the latest <code>1.1</code> dev
version.</p>

<p>Unless you are tracking the development of that library very closely, you will
not notice this until you run <code>composer update</code>, it blows up in your face, and
ruins your day. That&#39;s why referencing branch names directly is not a
sustainable solution. Luckily composer is here to help with branch aliases.</p>

<h2>Branch alias</h2>

<p>A branch alias is a property that package maintainers can put into their
<code>composer.json</code>, that allows branch names to be mapped to versions. For branch
names like <code>1.0</code>, <code>2.1</code>, etc. this is not necessary -- composer already
handles those.</p>

<p>But with a branch name like <code>master</code> which produces a version named
<code>dev-master</code>, you should definitely alias it. The composer docs have <a href="http://getcomposer.org/doc/articles/aliases.md">a
great article on aliasing</a>
that explains how branch aliases can be defined:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;extra&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;branch-alias&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;dev-master&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.x-dev&quot;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>This maps the <code>dev-master</code> version to a <code>1.0.x-dev</code> alias. Which essentially
means that you can require the package with a <code>1.0.*@dev</code> constraint. The nice
thing about this is that the meaning of <code>1.0</code> is defined and will not change.
It will also make switching to stable versions easier.</p>

<p>The caveat of branch aliases is that package maintainers need to put them in.
If you are using a library that does not have a branch alias, send them a pull
request adding the above <code>extra</code> section to their <code>composer.json</code>.</p>

<h2>Stable releases</h2>

<p>The <code>1.0.*@dev</code> constraint is already quite good. The problem however is that
there is no stable version yet. This is not problematic for your code - apart
from the fact that you are running an unstable version that the maintainer has
not committed to.</p>

<p>But if you have other people depending on your package, then your users either
need to explicitly require your dependency with a <code>@dev</code> flag to allow
composer to install the unstable version, or worse yet lower their
<code>minimum-stability</code>, which means they get unstable versions of <em>everything</em>.</p>

<p>To avoid juggling around dev versions it&#39;s much better to just tag releases.
If you are using a library that has no tagged releases, go and annoy the
maintainer until they tag. Do it, now!</p>

<blockquote>
<p>We as the composer community need to take responsibility. We need to tag
releases, we should maintain CHANGELOGs. It&#39;s hard to do, but makes a huge
difference for the ecosystem as a whole. Remember to tag responsibly and
<a href="http://semver.org/">semantically</a>.</p>
</blockquote>

<p>When you have a stable release, you can remove the <code>@dev</code> flag and change your
constraint to <code>1.0.*</code>.</p>

<h2>Next Significant Release</h2>

<p>If the dependency that you&#39;re using is adhering to the rules of semantic
versioning and keeps strict BC for point releases, then you can improve the
constraint even more.</p>

<p>Right now with <code>1.0.*</code> there will be some potential compatibility problems as
soon as there is a <code>1.1</code> release. If you depend on <code>1.0</code> but somebody else
needs a feature from <code>1.1</code> (which is backwards-compatible, remember?), they
cannot install it. So you need to resort to do something like <code>1.*</code>.</p>

<p>That&#39;s great, except when you start depending on features from <code>1.1</code>, then you
can no longer use it, as it will still match the <code>1.0</code> version. Which has
missing features.</p>

<p>So then you do <code>&gt;=1.1,&lt;2.0</code>, but that&#39;s annoying. Enter the tilde operator,
which allows you to express this in a clean way: <code>~1.1</code>. This means &quot;any <code>1.*</code>
of <code>1.1</code> or above&quot;. And there you have it, encourage semantic versioning to
take advantage of the tilde and maximise inter-package compatibility.</p>

<h2>TLDR</h2>

<ul>
<li>Use <a href="http://getcomposer.org/doc/articles/aliases.md#branch-alias"><code>branch-alias</code></a>.</li>
<li>Tag releases, do it responsibly and <a href="http://semver.org/">semantically</a>.</li>
<li>Use the <a href="http://getcomposer.org/doc/01-basic-usage.md#package-versions">tilde operator</a>.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Walker</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/30/sexpr-walker.html"/>
        <id>https://igor.io/2012/12/30/sexpr-walker.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Walker</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html"><strong>walker</strong></a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The previous post introduced a basic macro system that recursively expands
macros at runtime. This allows users to define their own language constructs,
but is missing a very important aspect of what a macro system should do.</p>

<p>Generally, macros are instructions that are applied by a pre-processor. That
means that they are applied to the source or tree of the program <em>before</em> it
runs.</p>

<p>The advantage of this is that you get huge performance gains. Not only do you
avoid having to expand every time the program is run, by having a separation
of compile-time and runtime you can do calculations of constant values during
compile time and just inline the results.</p>

<h2>Code walker</h2>

<p>The program that pre-processes macros is called a code walker. It walks
through the AST, finds the macro calls and expands them.</p>

<p><center>
    <img src="/sexpr/walker.png" alt="walker">
</center></p>

<p>There are several possibilities as to when this compilation step should
happen. If the Lisp implementation has a notion of files and possibly
compilation of the files to some form of bytecode, then it usually happens on
a per-file basis. In the context of a <abbr title="read-eval-print
loop">REPL</abbr>, compilation often occurs for each entered form before it is
evaluated.</p>

<p>I will adopt the latter approach for Ilias, because I want to be able to
define and use macros in the same program.</p>

<p>The most obvious location to perform expansion is in the <code>Program</code> class,
since it is the glue that loops through the forms and evaluates them. The
<code>Walker</code> class will have an <code>expand</code> method that translates a form. Here are
the additions to <code>Program</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Program</span>
<span class="x">{</span>
<span class="x">    ...</span>
<span class="x">    private $walker;</span>

<span class="x">    public function __construct(..., Walker $walker)</span>
<span class="x">    {</span>
<span class="x">        ...</span>
<span class="x">        $this-&gt;walker = $walker;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env, $code)</span>
<span class="x">    {</span>
<span class="x">        ...</span>

<span class="x">        foreach ($forms as $form) {</span>
<span class="x">            $expanded = $this-&gt;walker-&gt;expand($env, $form);</span>
<span class="x">            $value = $expanded-&gt;evaluate($env);</span>
<span class="x">        }</span>

<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<h2>Basic recursive expansion</h2>

<p>The basic version of the walker takes an environment and a form, and must
check if the form is a macro. If yes, it must expand the macro, producing a
new form which it returns. For non-macros, it just returns the form unchanged.</p>

<p>This is relatively easy to do, since we can just use the existing
<code>MacroOp::expandOne()</code> method. And since that call can return yet another
macro, we recur the <code>expand</code> call.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">use Igorw\Ilias\Form\Form;</span>
<span class="x">use Igorw\Ilias\Form\SymbolForm;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class Walker</span>
<span class="x">{</span>
<span class="x">    public function expand(Environment $env, Form $form)</span>
<span class="x">    {</span>
<span class="x">        if (!$this-&gt;isExpandable($env, $form)) {</span>
<span class="x">            return $form;</span>
<span class="x">        }</span>

<span class="x">        if (!$this-&gt;isMacroCall($env, $form)) {</span>
<span class="x">            return $form;</span>
<span class="x">        }</span>

<span class="x">        $macro = $this-&gt;getMacroOp($env, $form);</span>
<span class="x">        $args = $form-&gt;cdr();</span>
<span class="x">        $expanded = $macro-&gt;expandOne($env, $args);</span>

<span class="x">        return $this-&gt;expand($env, $expanded);</span>
<span class="x">    }</span>

<span class="x">    private function isExpandable(Environment $env, Form $form)</span>
<span class="x">    {</span>
<span class="x">        return $form instanceof ListForm;</span>
<span class="x">    }</span>

<span class="x">    private function isMacroCall(Environment $env, ListForm $form)</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;isFormOfType($env, $form, &#39;Igorw\Ilias\SpecialOp\MacroOp&#39;);</span>
<span class="x">    }</span>

<span class="x">    private function isFormOfType(Environment $env, ListForm $form, $type)</span>
<span class="x">    {</span>
<span class="x">        return $form-&gt;nth(0) instanceof SymbolForm</span>
<span class="x">            &amp;&amp; $form-&gt;nth(0)-&gt;existsInEnv($env)</span>
<span class="x">            &amp;&amp; $form-&gt;nth(0)-&gt;evaluate($env) instanceof $type;</span>
<span class="x">    }</span>

<span class="x">    private function getMacroOp(Environment $env, ListForm $form)</span>
<span class="x">    {</span>
<span class="x">        return $form-&gt;nth(0)-&gt;evaluate($env);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>You will notice that the <code>ListForm</code> has a new <code>nth</code> method, which is a
convenience method for accessing an element of the list by index.</p>

<p>This walker already handles many cases. The following is expanded correctly.</p>

<p>Single level macro:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">plus</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nv">plus</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>Two-level macro:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">plus</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nb">defmacro</span> <span class="nv">pl</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nv">pl</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<h2>Sub-lists</h2>

<p>Currently only top-level macro calls are expanded. That means that the
following incomplete transformation will happen for a nested list:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">plus</span> <span class="mi">1</span> <span class="p">(</span><span class="nv">plus</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nv">plus</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div>
<p>Instead of just returning non-macro list forms directly, expansion must recur
on their sub-lists. And sure enough, with a few small changes this can be
done.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function expand(Environment $env, Form $form)</span>
<span class="x">{</span>
<span class="x">    ...</span>

<span class="x">    if (!$this-&gt;isMacroCall($env, $form)) {</span>
<span class="x">        return $this-&gt;expandSubLists($env, $form);</span>
<span class="x">    }</span>

<span class="x">    ...</span>
<span class="x">}</span>

<span class="x">private function expandSubLists(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    if (!count($form-&gt;toArray())) {</span>
<span class="x">        return $form;</span>
<span class="x">    }</span>

<span class="x">    return new ListForm(array_merge(</span>
<span class="x">        [$form-&gt;nth(0)],</span>
<span class="x">        $this-&gt;expandList($env, $form-&gt;cdr())</span>
<span class="x">    ));</span>
<span class="x">}</span>

<span class="x">private function expandList(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    return array_map(</span>
<span class="x">        function ($form) use ($env) {</span>
<span class="x">            return $this-&gt;expand($env, $form);</span>
<span class="x">        },</span>
<span class="x">        $form-&gt;toArray()</span>
<span class="x">    );</span>
<span class="x">}</span>
</code></pre></div>
<p>And with this adjustment in place it will correctly expand the sub-list:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">plus</span> <span class="mi">1</span> <span class="p">(</span><span class="nv">plus</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
</code></pre></div>
<p>Even if it is inside a lambda expression:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
</code></pre></div>
<p>At this point almost all cases are handled. There is still one specific
problematic case though.</p>

<h2>Special form awareness</h2>

<p>Some special forms have special interpretations of their list arguments, and
do not treat them as function applications. The most prominent example of this
is the argument list of the <code>lambda</code> special form.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div>
<p>This function takes a <code>plus</code> argument which is a function and two numbers <code>a</code>
and <code>b</code>. It applies <code>plus</code> to the two numbers and the number <code>5</code>. Regardless
of whether this function makes sense or not, there is a problem at compile
time.</p>

<p>The first issue is that the walker will try to expand the argument list. It
does not treat lambda forms in any special way. In fact, it does not even know
what a lambda form is, it just sees a list and tries to expand it.</p>

<p>That will result in something like this:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span> <span class="mi">5</span><span class="p">))</span>
</code></pre></div>
<p>The second issue is that the walker will try to expand the body in this case,
even though <code>plus</code> is a lexical variable of the lambda. This happens because
it is not aware of lexical scoping rules.</p>

<p>Also, the <code>plus</code> macro only takes two arguments, so this extra argument of <code>5</code>
will make it blow up. If the macro system provided access to all of the
arguments as a list, it would not blow up, but it would still expand, which is
not what we want here.</p>

<p>In order to fix those two issues, the walker needs to be aware of special
forms, in this case the <code>lambda</code> special form, and handle the argument list
and the bound parameters inside the lambda body in a different way than normal
lists.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function expand(Environment $env, Form $form)</span>
<span class="x">{</span>
<span class="x">    if (!$this-&gt;isExpandable($env, $form)) {</span>
<span class="x">        return $form;</span>
<span class="x">    }</span>

<span class="x">    if ($this-&gt;isLambdaForm($env, $form)) {</span>
<span class="x">        return $this-&gt;expandLambdaForm($env, $form);</span>
<span class="x">    }</span>

<span class="x">    ...</span>
<span class="x">}</span>

<span class="x">private function isLambdaForm(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    return $this-&gt;isFormOfType($env, $form, &#39;Igorw\Ilias\SpecialOp\LambdaOp&#39;);</span>
<span class="x">}</span>

<span class="x">private function expandLambdaForm(Environment $env, ListForm $form)</span>
<span class="x">{</span>
<span class="x">    $subEnv = clone $env;</span>
<span class="x">    foreach ($form-&gt;nth(1)-&gt;toArray() as $argName) {</span>
<span class="x">        $subEnv[$argName-&gt;getSymbol()] = null;</span>
<span class="x">    }</span>

<span class="x">    return new ListForm(array_merge(</span>
<span class="x">        [$form-&gt;nth(0), $form-&gt;nth(1)],</span>
<span class="x">        $this-&gt;expandList($subEnv, $form-&gt;cdr()-&gt;cdr())</span>
<span class="x">    ));</span>
<span class="x">}</span>
</code></pre></div>
<p>All that this does is:</p>

<ul>
<li><p>Clone the environment, so that changes to it will not affect the overall
macro expansion process.</p></li>
<li><p>Override the argument symbols on the environment, setting them to null. This
ensures that locally scoped variables that share the name of a macro will not
be expanded.</p></li>
<li><p>Skip expansion of the argument list, but recur on the lambda body using the
cloned environment.</p></li>
</ul>

<p>This will take care of those special cases and ensure that the following
expands correctly (actually, it correctly lacks expansion):</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)))</span>
</code></pre></div>
<p>And because the cloned environment is passed on to sub-expansions, lexical
scope is preserved, which means it works for nested lambdas too:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="p">(</span><span class="nv">plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))))</span>
</code></pre></div>
<p>And with that, the walker can correctly expand lambdas at compile time! It
strips out all of the macro calls and replaces them with the actual code.</p>

<h2>Conclusion</h2>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nb">when</span> <span class="p">(</span><span class="kt">condition</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;if</span> <span class="kt">condition</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;begin</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)))</span>
<span class="p">(</span><span class="nv">define</span> <span class="nv">foo</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
        <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">x</span> <span class="mi">10</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>
<span class="nv">=&gt;</span>
<span class="p">(</span><span class="nv">define</span> <span class="nv">foo</span>
    <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
        <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">x</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nv">begin</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))))</span>
</code></pre></div>
<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Walker.php">Source code: <code>Igorw\Ilias\Walker</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/WalkerTest.php">Source code: <code>Igorw\Ilias\WalkerTest</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/macro-expand.php">Source code: Ilias <code>examples/macro-expand.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html"><strong>walker</strong></a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Macros</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/29/sexpr-macros.html"/>
        <id>https://igor.io/2012/12/29/sexpr-macros.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Macros</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html"><strong>macros</strong></a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The interpreter is functioning, it is able to calculate the fibonacci sequence
recursively. And probably almost anything else you would want to. So what is
the next step?</p>

<p>We have learnt that Lisp programs themself consist of lists. This makes them
extremely easy to parse. But apart from that, we have not really seen the
action of &quot;code as data&quot;. This property is also known as <em>Homoiconicity</em>.</p>

<p>If programs are lists and lists are data, that means we can treat programs as
data. So instead of just parsing and interpreting it, how about modifying and
generating new programs? And that&#39;s exactly where macros come into play.</p>

<h2>Macro theory</h2>

<p>You probably know macros from C. A macro is an instruction that is applied to
the source code before it is compiled. It is a source code transformation. In
case of C, these macros tend to get very messy, which is mostly due to the
fact that C is hard to generate code for, especially in a dynamic manner.</p>

<p>In Lisp, macros are quite common. In fact many of the things that are
implemented as special forms in Ilias are macros in other Lisp
implementations, and reduce to a very small number of primitive special forms.
It&#39;s a lot easier to generate valid syntax, because the syntax consists
entirely of lists.</p>

<p>In fact, Lisp macros are not plain source transformations. They are AST
transformations. This means that you get the fully parsed syntax tree and can
make changes to it before it gets compiled or evaluated.</p>

<p>But it gets better. Macros can be defined at runtime. This means that a macro
defined at runtime can modify the AST of the code following it. Which means
that macros can use runtime functions to modify the source code.</p>

<p>At this point you&#39;re probably thinking <strong>what the func</strong>, so let&#39;s look at a
practical example!</p>

<h2>When operator</h2>

<p>Imagine a program with a lot of conditional logic. For each condition there
are a number of statements that need to be executed. In fact, let&#39;s introduce
a <code>begin</code> function in order to correctly represent this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">class BeginFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke()</span>
<span class="x">    {</span>
<span class="x">        $args = array_values(func_get_args());</span>
<span class="x">        return end($args);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Of course it also needs to be added to the standard environment as <code>begin</code>.</p>

<p>The begin function takes a list of arguments and returns the last one. This
simply allows a series of function calls to be made, and the result of the
last one to be returned. Like this:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
       <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
       <span class="p">(</span><span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>That statement will call three functions: <code>foo</code>, <code>bar</code> and <code>baz</code>. And return
the resulting value from the <code>baz</code> call.</p>

<p>Now, the program with all of its conditional logic will have to do this all
over the place:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">if</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">baz</span><span class="p">)))</span>
</code></pre></div>
<p>It must use <code>begin</code> to group the statements due to the way that <code>if</code> is
structured. You cannot use a function for this, because some of the statements
are conditional, and functions have all arguments evaluated before their
application.</p>

<p>At some point you may think: Why am I repeating myself? If only the language
had a <code>when</code> operator that has no <code>else-form</code> but just executes all arguments
in sequence. And it would work like this:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">when</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>With macros, you can add this new operator to the language yourself!</p>

<h2>DefMacro</h2>

<p>The way you can add it is by using the <code>defmacro</code> special form.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nb">when</span> <span class="p">(</span><span class="kt">condition</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;if</span> <span class="kt">condition</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;begin</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)))</span>
</code></pre></div>
<p>It takes three arguments:</p>

<ul>
<li><p><strong>name:</strong> The name of the macro, which is a symbol under which the macro
will be stored in the environment. In this case <code>when</code>.</p></li>
<li><p><strong>arguments:</strong> The argument list names unevaluated parts of the AST that
will get passed to the macro function.</p></li>
<li><p><strong>body:</strong> This is the equivalent of the body of a <code>lambda</code> special form
which operates on the provided arguments. The return value of this
function is the new AST that should be used instead of the original one.
What it is doing in this case is constructing the actual previous source
code of <code>(if condition? (begin a b c))</code> as a list, and returning it.</p></li>
</ul>

<p>Other implementations have a more fancy way of representing list construction,
I will keep it raw in this case and construct lists manually using a <code>list</code>
function which produces a list form from its arguments.</p>

<p>Actually, that function does not exist yet, so let&#39;s define it:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class ListFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke()</span>
<span class="x">    {</span>
<span class="x">        return new ListForm(func_get_args());</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>As always, this also needs to go into the standard environment.</p>

<p>Going back to <code>defmacro</code>, it is basically just a special form that constructs
a macro function and assigns it to the environment. It will be represented by
a <code>DefMacroOp</code> and is relatively straight-forward to implement:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class DefMacroOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $name = $args-&gt;car()-&gt;getSymbol();</span>
<span class="x">        $macroArgs = $args-&gt;cdr()-&gt;car();</span>
<span class="x">        $macroBody = $args-&gt;cdr()-&gt;cdr()-&gt;car();</span>
<span class="x">        $env[$name] = new MacroOp($macroArgs, $macroBody);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The macro function itself will be an instance of <code>MacroOp</code>, and this is in
fact the first time that a special form is being constructed dynamically. So
far they have always been pre-defined on the environment. Now we are creating
instances of the macro special form dynamically at runtime.</p>

<h2>Macro operator</h2>

<p>Now that macros can be defined, it also needs to be possible to actually
expand them into their resulting form before evaluation. A very easy way of
doing that is by expanding at runtime.</p>

<p>Once the program execution hits this form and evaluates it:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">when</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">baz</span><span class="p">))</span>
</code></pre></div>
<p>The macro operator expands it to:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">if</span> <span class="nv">condition?</span>
    <span class="p">(</span><span class="nv">begin</span> <span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
           <span class="p">(</span><span class="nv">baz</span><span class="p">)))</span>
</code></pre></div>
<p>Then evaluates that and returns the result.</p>

<p>The macro operator has two constructor arguments as seen in <code>DefMacroOp</code>: A
list of arguments and a list form representing the body.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class MacroOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    private $macroArgs;</span>
<span class="x">    private $macroBody;</span>

<span class="x">    public function __construct(ListForm $macroArgs, ListForm $macroBody)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;macroArgs = $macroArgs;</span>
<span class="x">        $this-&gt;macroBody = $macroBody;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>There is one issue has not been discussed yet. And that is recursive
expansion. If a macro call returns a new macro call, then that new macro call
must also be expanded.</p>

<p>For example:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">plus</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;+</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nb">defmacro</span> <span class="nv">pl</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">&#39;plus</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span>
<span class="p">(</span><span class="nv">pl</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>The third form of <code>(pl 1 2)</code> must be expanded once, yielding <code>(plus 1 2)</code>. And
since <code>plus</code> is also a macro, it needs to be expanded again, producing the
final <code>(+ 1 2)</code> which can then be evaluated. The macro operator must be able
to handle that case.</p>

<p>It turns out that the implementation of <code>MacroOp</code> is quite trivial. Most of
the logic is already defined in <code>LambdaOp</code> and can be re-used. And because
macros are expanded at runtime, they expand recursively automatically, simply
by invoking them:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">{</span>
<span class="x">    $expanded = $this-&gt;expandOne($env, $args);</span>

<span class="x">    return $expanded-&gt;evaluate($env);</span>
<span class="x">}</span>

<span class="x">public function expandOne(Environment $env, Form $form)</span>
<span class="x">{</span>
<span class="x">    $transformForm = new LambdaOp();</span>
<span class="x">    $transformFormArgs = new ListForm([</span>
<span class="x">        $this-&gt;macroArgs,</span>
<span class="x">        $this-&gt;macroBody,</span>
<span class="x">    ]);</span>

<span class="x">    $transformFn = $transformForm-&gt;evaluate($env, $transformFormArgs);</span>

<span class="x">    return call_user_func_array($transformFn, $form-&gt;toArray());</span>
<span class="x">}</span>
</code></pre></div>
<p>Indeed, this is all it takes to implement runtime macro expansion.</p>

<blockquote>
<p>Note: This implementation of macros does not operate on the raw AST, but on
the form tree instead. The form tree is nothing more than an AST with
attached behaviour. It&#39;s an enriched AST.</p>
</blockquote>

<h2>How is this different from eval?</h2>

<blockquote>
<p>And while we&#39;re at it, isn&#39;t eval evil?</p>
</blockquote>

<p>Macros are definitely extremely powerful and also quite dangerous. But they
are <em>not</em> the equivalent of calling <code>eval</code> in PHP.</p>

<ul>
<li><p>Macros do not have to be expanded at runtime. (More on this in an upcoming
blog post).</p></li>
<li><p>Evaluation in Lisp does not mean interpretation. Many implementations will
in fact compile the code before running it. Which could be remotely compared
to opcode caching in PHP.</p></li>
</ul>

<h2>Conclusion</h2>

<p>Macros are an extremely powerful code generation tool that is built into the
language and allows you to define your own language constructs which look just
like native ones.</p>

<h2>Further reading</h2>

<ul>
<li><a href="http://sweetjs.org/">Sweet.js: JavaScript macros</a></li>
<li><a href="http://www.youtube.com/watch?v=_ahvzDzKdB0">Growing a Language - Guy Steele</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/SpecialOp/DefMacroOp.php">Source code: <code>Igorw\Ilias\SpecialOp\DefMacroOp</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/SpecialOp/MacroOp.php">Source code: <code>Igorw\Ilias\SpecialOp\MacroOp</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/IntegrationTest.php#L56">Source code: <code>Igorw\Ilias\IntegrationTest</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html"><strong>macros</strong></a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Special forms</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/14/sexpr-special-forms.html"/>
        <id>https://igor.io/2012/12/14/sexpr-special-forms.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Special forms</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html"><strong>special-forms</strong></a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<blockquote>
<p><strong>Note:</strong> The terminology of this post was changed from <em>special form</em> to
<em>special operator</em> where appropriate on Dec 28, 2012.</p>
</blockquote>

<p>Ilias is quite powerful at this point. It allows arbitrary variables to be
defined in PHP. These variables can be functions. These functions can be
called from within Lisp.</p>

<p>However, there are some fundamental constructs that are missing to make the
language unstoppable, which once added will inevitably lead to world
domination: <code>define</code>, <code>lambda</code> and <code>if</code>.</p>

<h2>Program</h2>

<p>Before we look into that, let&#39;s simplify the usage of the toolchain. It now
includes: Lexer, Reader, FormTreeBuilder. How about a class that packages
those steps up. I will call it <code>Program</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Program</span>
<span class="x">{</span>
<span class="x">    private $lexer;</span>
<span class="x">    private $reader;</span>
<span class="x">    private $builder;</span>

<span class="x">    public function __construct(Lexer $lexer, Reader $reader, FormTreeBuilder $builder)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;lexer = $lexer;</span>
<span class="x">        $this-&gt;reader = $reader;</span>
<span class="x">        $this-&gt;builder = $builder;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env, $code)</span>
<span class="x">    {</span>
<span class="x">        $tokens = $this-&gt;lexer-&gt;tokenize($code);</span>
<span class="x">        $ast = $this-&gt;reader-&gt;parse($tokens);</span>
<span class="x">        $forms = $this-&gt;builder-&gt;parseAst($ast);</span>

<span class="x">        $value = null;</span>
<span class="x">        foreach ($forms as $form) {</span>
<span class="x">            $value = $form-&gt;evaluate($env);</span>
<span class="x">        }</span>
<span class="x">        return $value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>It lexes, then parses, then builds a form tree. Finally it evaluates all forms
and returns the result of the last one.</p>

<p>Usage:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$program = new Program(</span>
<span class="x">    new Lexer(),</span>
<span class="x">    new Reader(),</span>
<span class="x">    new FormTreeBuilder()</span>
<span class="x">);</span>

<span class="x">$env = Environment::standard();</span>
<span class="x">var_dump($program-&gt;evaluate($env, &#39;(+ 1 2)&#39;));</span>
</code></pre></div>
<p>That&#39;s a lot easier to use. Back to world domination.</p>

<h2>Why special is special</h2>

<p>The new constructs <code>define</code>, <code>lambda</code> and <code>if</code> are special. They are language
constructs that do not behave like regular functions, although they may appear
so.</p>

<p><code>define</code> is used to assign a value to a symbol in the environment.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">foo</span> <span class="mi">42</span><span class="p">)</span>
<span class="nv">foo</span>
</code></pre></div>
<p>That&#39;s a program of two forms. The first form is a <code>define</code> special form that
defines the symbol <em>foo</em> to represent the value <em>42</em>. The second form is a
symbol form representing the <em>foo</em> variable that evaluates to <em>42</em>. The return
value of this program is <em>42</em>.</p>

<p>The special thing about <code>define</code> is that it has access to the environment at
call time. It needs to, in order to set the value on it. Normal functions do
not have this capability.</p>

<p>The second, more profound difference which is very subtle in this case is that
it does not evaluate all of its arguments. It surely evaluates the second
argument, which is a literal. But it does <em>not</em> evaluate the first argument,
the symbol.</p>

<p>If it tried to evaluate <code>foo</code> that would result in an error, since <code>foo</code> is
not defined on the environment yet, as that&#39;s what <code>define</code> is about to do!</p>

<h2>Special operator interface</h2>

<p>In order to deal with special forms, they need to be modeled in the form tree.
A special form is a list form whose first element is a special operator. The
<code>SpecialOp</code> interface gives the operator access to the environment and to the
unevaluated arguments.</p>

<p>I repeat, the <em>unevaluated arguments</em>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">interface SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args);</span>
<span class="x">}</span>
</code></pre></div>
<p>The form tree builder does not have to be modified. Special operators are
simply values defined on the environment that look like functions but have a
different behaviour when evaluated. The only adjustment needs to be made in
<code>ListForm::evaluate()</code>, since special forms are a special kind of list form.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function evaluate(Environment $env)</span>
<span class="x">{</span>
<span class="x">    $func = $this-&gt;car()-&gt;evaluate($env);</span>

<span class="x">    if ($func instanceof SpecialOp) {</span>
<span class="x">        return $func-&gt;evaluate($env, $this-&gt;cdr());</span>
<span class="x">    }</span>

<span class="x">    $args = $this-&gt;evaluateArgs($env, $this-&gt;cdr());</span>
<span class="x">    return call_user_func_array($func, $args);</span>
<span class="x">}</span>
</code></pre></div>
<p>If the function in an list form evaluation is a special form, it is evaluated
with the <code>cdr</code> passed in unevaluated.</p>

<h2>Define</h2>

<p><code>define</code> will be the first special form, implementing the <code>SpecialOp</code>
interface:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class DefineOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $name = $args-&gt;car()-&gt;getSymbol();</span>
<span class="x">        $env[$name] = $args-&gt;cdr()-&gt;car()-&gt;evaluate($env);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>It&#39;s trivial. The first argument is a symbol representing the name. Instead of
evaluating it, the symbol is fetched and used as a key.</p>

<p>The second argument is a form whose evaluation is assigned to the environment.
It is fetched by getting the <code>car</code> of the <code>cdr</code> of the arguments.</p>

<p>To make <code>define</code> available to the world, it just needs to be part of the
standard environment:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Environment extends \ArrayObject</span>
<span class="x">{</span>
<span class="x">    public static function standard()</span>
<span class="x">    {</span>
<span class="x">        return new static([</span>
<span class="x">            &#39;define&#39;    =&gt; new SpecialOp\DefineOp(),</span>

<span class="x">            &#39;+&#39;         =&gt; new Func\PlusFunc(),</span>
<span class="x">        ]);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>That&#39;s it, the <code>define</code> special operator is now available, so this should work:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">(define foo 42)
foo
</code></pre></div>
<h2>Lambda</h2>

<p>The term lambda describes an anonymous function. It originally was introduced
as part of <em>lambda calculus</em>, a system for representing computation through
functions.</p>

<p>In Lisp, <code>lambda</code> is a special operator that represents a function as a value.
All functions are anonymous, the only way of naming them is by assigning them
to a variable using <code>define</code>.</p>

<p>Here is a lambda with no arguments that always returns 42:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="mi">42</span><span class="p">)</span>
</code></pre></div>
<p>It could be invoked directly without giving it a name, yielding the return
value:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">((</span><span class="k">lambda</span> <span class="p">()</span> <span class="mi">42</span><span class="p">))</span>
</code></pre></div>
<p>And defined as <code>the-answer</code>, it can be called using that name:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">the-answer</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span> <span class="mi">42</span><span class="p">))</span>
<span class="p">(</span><span class="nv">the-answer</span><span class="p">)</span>
</code></pre></div>
<p>Here is the identity function, it returns any argument it receives:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nb">identity</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
</code></pre></div>
<p>Here is an increment function, it returns the increment of the argument it
receives:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">increment</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">)))</span>
</code></pre></div>
<p>The first argument to the <code>lambda</code> special operator is a list of symbols
representing argument names. All the following arguments are forms to be
evaluated when the function gets called, in the context of that function.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class LambdaOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $symbols = $args-&gt;car()-&gt;toArray();</span>
<span class="x">        $argNames = $this-&gt;getMappedSymbols($symbols);</span>

<span class="x">        $bodyForms = $args-&gt;cdr()-&gt;toArray();</span>

<span class="x">        return function () use ($env, $argNames, $bodyForms) {</span>
<span class="x">            $subEnv = clone $env;</span>

<span class="x">            $vars = array_combine($argNames, func_get_args());</span>
<span class="x">            foreach ($vars as $name =&gt; $value) {</span>
<span class="x">                $subEnv[$name] = $value;</span>
<span class="x">            }</span>

<span class="x">            $value = null;</span>
<span class="x">            foreach ($bodyForms as $form) {</span>
<span class="x">                $value = $form-&gt;evaluate($subEnv);</span>
<span class="x">            }</span>
<span class="x">            return $value;</span>
<span class="x">        };</span>
<span class="x">    }</span>

<span class="x">    private function getMappedSymbols(array $symbols)</span>
<span class="x">    {</span>
<span class="x">        return array_map(</span>
<span class="x">            function ($symbol) {</span>
<span class="x">                return $symbol-&gt;getSymbol();</span>
<span class="x">            },</span>
<span class="x">            $symbols</span>
<span class="x">        );</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>What is significant is that the function produced by <code>lambda</code> evaluates its
body using a separate environment. The result of the last body form&#39;s
evaluation is returned from the function.</p>

<p>After adding the new <code>lambda</code> special operator to the environment it should be
able to do all those things. According to lambda calculus we can stop now, as
anything can be represented using lambdas alone. But we will continue
nevertheless.</p>

<h2>If</h2>

<p>Finally, the <code>if</code> special operator takes three arguments: a predicate, a true-
form and an else-form. The predicate is evaluated. If the result of that
evaluation is truthy, then the true-form is evaluated. If it is falsy, the
else-form is evaluated. The result of the evaluated form is returned.</p>

<p>This is what an example usage looks like:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">=</span> <span class="nv">answer</span> <span class="mi">42</span><span class="p">)</span> <span class="ss">&#39;correct</span> <span class="ss">&#39;wrong</span><span class="p">)</span>
</code></pre></div>
<p>The implementation:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\SpecialOp;</span>

<span class="x">use Igorw\Ilias\Environment;</span>
<span class="x">use Igorw\Ilias\Form\ListForm;</span>

<span class="x">class IfOp implements SpecialOp</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        $predicate = $args-&gt;car();</span>
<span class="x">        $trueForm  = $args-&gt;cdr()-&gt;car();</span>
<span class="x">        $elseForm  = $args-&gt;cdr()-&gt;cdr()-&gt;car();</span>

<span class="x">        $form = ($predicate-&gt;evaluate($env)) ? $trueForm : $elseForm;</span>
<span class="x">        return $form ? $form-&gt;evaluate($env) : null;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Easy.</p>

<p>After adding it to the standard environment, it is available from within Lisp.</p>

<h2>Fibonacci</h2>

<p>Now that all of the pieces are in place it should be possible to use them. One
way to demonstrate that is by implementing a function that calculates the
fibonacci sequence.</p>

<p>I know, it&#39;s a lame example. But is based on conditional recursion which means
it is a good test for scoping, naming and lazy evaluation of conditionals.</p>

<p>This is the (terribly inefficient) implementation of <code>fib</code> in Lisp:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">define</span> <span class="nv">fib</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">&lt;</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">)</span>
        <span class="nv">n</span>
        <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nv">fib</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">n</span> <span class="mi">2</span><span class="p">))))))</span>
</code></pre></div>
<p>As you can see, I have added a <code>-</code> in addition to the <code>+</code> function.</p>

<p>And now, for the very first time in history will we witness special forms...</p>

<p>*<em>drumroll</em>*</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">fib</span> <span class="mi">23</span><span class="p">)</span>
</code></pre></div>
<p><em>And it takes 4 seconds to compute the result which is...</em></p>

<p><code>28657</code>, which is correct! Now anything is possible. The future awaits us!</p>

<p><a href="https://github.com/igorw/ilias">Source code: Ilias</a></p>

<h2>Conclusion</h2>

<p><center>
    <img src="/sexpr/world-domination.png" alt="world domination">
</center></p>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html"><strong>special-forms</strong></a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Forms</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/13/sexpr-forms.html"/>
        <id>https://igor.io/2012/12/13/sexpr-forms.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Forms</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html"><strong>forms</strong></a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The previous post introduced a basic implementation of evaluation that is
lacking on many fronts. It currently only supports s-expressions which are
function applications. The objective is to add support for different types of
sexprs.</p>

<p>In Lisp lingo, a <em>form</em> is an object that can be evaluated. Based on the current
state of the AST, there are four different types of forms that it can model:</p>

<ul>
<li><p><strong>List:</strong> The list form represents a function application. Its elements are
also forms. Evaluating the list will evaluate nested lists recursively by
applying the <code>car</code> to the <code>cdr</code>. Or in other words, applying the function to
its arguments.</p></li>
<li><p><strong>Symbol:</strong> A symbol is an identifier that usually references a value in
the environment. It is a variable name if you will. Evaluating a symbol looks
up the name in the environment and returns the associated value.</p></li>
<li><p><strong>Literal:</strong> A literal represents a value. Numbers are literals. Evaluating
a literal just returns its value.</p></li>
<li><p><strong>Quote:</strong> A quote form represents a value or a list of values in quoted
form. Evaluating a quote form returns the value that is being quoted.</p></li>
</ul>

<p>Currently only list forms are supported, and they are only supported
partially.</p>

<h2>Form interface</h2>

<p>Before looking into adding support for the other forms I want to introduce
forms into the code base as a concept. A form is an object that can be
evaluated. It is evaluated against an environment. A form represents the
behaviour or functionality of an AST node.</p>

<p>This abstraction can be encoded into a <code>Form</code> interface that all forms must
implement:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">interface Form</span>
<span class="x">{</span>
<span class="x">    public function evaluate(Environment $env);</span>
<span class="x">}</span>
</code></pre></div>
<p>With this interface it is easy to create separate form classes for the
different types of forms. To match the functionality of the previous post&#39;s
<code>evaluate</code> function, there must be a <code>ListForm</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class ListForm implements Form</span>
<span class="x">{</span>
<span class="x">    private $forms;</span>

<span class="x">    public function __construct(array $forms)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;forms = $forms;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        $fn = $this-&gt;car();</span>
<span class="x">        $args = $this-&gt;cdr();</span>

<span class="x">        return call_user_func_array($env[$fn], $args);</span>
<span class="x">    }</span>

<span class="x">    public function car()</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;forms[0];</span>
<span class="x">    }</span>

<span class="x">    public function cdr()</span>
<span class="x">    {</span>
<span class="x">        return new static(array_slice($this-&gt;forms, 1));</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>This is exactly the same as the <code>evaluate</code>, <code>car</code> and <code>cdr</code> functions, but
they are now encapsulated within an object.</p>

<blockquote>
<p>Note: The <code>Environment</code> implements the <code>ArrayAccess</code> interface. Its
implementation will be discussed later on.</p>
</blockquote>

<h2>Form tree</h2>

<p>Now that there is a good abstraction it&#39;s time to fix how list forms are
evaluated. The major limitations are:</p>

<ul>
<li>The <code>car</code> cannot be an expression, it is currently assumed to be a symbol.</li>
<li>The <code>cdr</code> cannot contain expressions, it is assumed to be a list of
literals.</li>
</ul>

<p>To fix the first issue we must not assume the <code>car</code> to be a symbol. Instead,
it should be assumed to be any form that can be evaluated. If it is a
<code>SymbolForm</code>, that form will perform the environment lookup itself and return
the value.</p>

<p>The implementation of <code>SymbolForm</code> is trivial:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class SymbolForm implements Form</span>
<span class="x">{</span>
<span class="x">    private $symbol;</span>

<span class="x">    public function __construct($symbol)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;symbol = $symbol;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        return $env[$this-&gt;symbol];</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>That solves the the <code>car</code> problem, since it can now be any form. It gets
evaluated when the <code>ListForm</code> is evaluated.</p>

<p>The next problem is that the <code>cdr</code> is assumed to be a list of literals. The
same pattern that was applied for <code>car</code> can be applied here as well.</p>

<p>Instead of using the <code>cdr</code> values directly, they should be assumed to be a
list of forms, each of which is evaluated before the function is applied.</p>

<p>This means that literals need to be represented as forms as well:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Form;</span>

<span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class LiteralForm implements Form</span>
<span class="x">{</span>
<span class="x">    private $value;</span>

<span class="x">    public function __construct($value)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;value = $value;</span>
<span class="x">    }</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Going back to the <code>ListForm</code>, here is the adjusted version which calls
<code>evaluate</code> on <code>car</code> and each element of <code>cdr</code> before applying the function:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">use Igorw\Ilias\Environment;</span>

<span class="x">class ListForm implements Form</span>
<span class="x">{</span>
<span class="x">    ...</span>

<span class="x">    public function evaluate(Environment $env)</span>
<span class="x">    {</span>
<span class="x">        $func = $this-&gt;car()-&gt;evaluate($env);</span>
<span class="x">        $args = $this-&gt;evaluateArgs($env, $this-&gt;cdr());</span>

<span class="x">        return call_user_func_array($func, $args);</span>
<span class="x">    }</span>

<span class="x">    ...</span>

<span class="x">    public function toArray()</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;forms;</span>
<span class="x">    }</span>

<span class="x">    private function evaluateArgs(Environment $env, ListForm $args)</span>
<span class="x">    {</span>
<span class="x">        return array_map(</span>
<span class="x">            function ($arg) use ($env) {</span>
<span class="x">                return $arg-&gt;evaluate($env);</span>
<span class="x">            },</span>
<span class="x">            $args-&gt;toArray()</span>
<span class="x">        );</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>This form tree should eliminate the problems of the previous <code>evaluate</code>
implementation. The only step left is constructing the forms.</p>

<p>If you want to see the implementation of <code>QuoteForm</code>, it can be found in the
Ilias repo:
<a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Form/QuoteForm.php"><code>Igorw\Ilias\Form\QuoteForm</code></a>.</p>

<h2>Form tree builder</h2>

<p>To create a form tree, there must be some object that is able to parse the
AST and translate the AST nodes into forms. For lack of a better name, this
object shall be called <code>FormTreeBuilder</code>.</p>

<p>For a sample input of:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[[&#39;+&#39;, 1, 2]]</span>
</code></pre></div>
<p>The tree builder should return:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[</span>
<span class="x">    new Form\ListForm([</span>
<span class="x">        new Form\SymbolForm(&#39;+&#39;),</span>
<span class="x">        new Form\LiteralForm(1),</span>
<span class="x">        new Form\LiteralForm(2),</span>
<span class="x">    ])</span>
<span class="x">]</span>
</code></pre></div>
<p>Implementing such a builder is quite trivial. The interface will be a method
named <code>parseAst</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class FormTreeBuilder</span>
<span class="x">{</span>
<span class="x">    public function parseAst(array $ast);</span>
<span class="x">}</span>
</code></pre></div>
<p>The AST is an array of s-expressions, <code>parseAst</code> will parse each one of them
and return an array of forms:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function parseAst(array $ast)</span>
<span class="x">{</span>
<span class="x">    return array_map([$this, &#39;parseSexpr&#39;], $ast);</span>
<span class="x">}</span>
</code></pre></div>
<p>An s-expression is either a list of s-expressions or an atom. Atoms are
handled by <code>parseAtom</code>. Lists are recursively parsed into a <code>ListForm</code>. Each
element of a list is a fully parsed form.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">public function parseSexpr($sexpr)</span>
<span class="x">{</span>
<span class="x">    if (!is_array($sexpr)) {</span>
<span class="x">        return $this-&gt;parseAtom($sexpr);</span>
<span class="x">    }</span>

<span class="x">    $list = $this-&gt;parseAst($sexpr);</span>
<span class="x">    return new Form\ListForm($list);</span>
<span class="x">}</span>
</code></pre></div>
<p>An atom is either a quoted value, a symbol or a literal. A quoted values
becomes <code>QuoteForm</code>, a symbol becomes a <code>SymbolForm</code> and a literal becomes a
<code>LiteralForm</code>.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function parseAtom($atom)</span>
<span class="x">{</span>
<span class="x">    if ($atom instanceof Ast\QuotedValue) {</span>
<span class="x">        return new Form\QuoteForm($atom);</span>
<span class="x">    }</span>

<span class="x">    if (is_string($atom)) {</span>
<span class="x">        return new Form\SymbolForm($atom);</span>
<span class="x">    }</span>

<span class="x">    return new Form\LiteralForm($atom);</span>
<span class="x">}</span>
</code></pre></div>
<p>That is already enough to construct the form tree correctly. It&#39;s just a dumb
mapping from AST nodes to form objects.</p>

<h2>Environment</h2>

<p>One part that I did not explain yet is the environment. Previously this was
just a simple array of values. Now it is an <code>Environment</code> object that
implements the <code>ArrayAccess</code> interface.</p>

<p>In fact this <code>Environment</code> is really just a class that extends <code>ArrayObject</code>,
without adding any new behaviour. It allows for type hints and also enables
adding convenience factory methods that create pre-set environments. The
previous <code>environment</code> function can be replaced with a <code>standard</code> factory
method that returns an Environment which has all the core methods on it.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Environment extends \ArrayObject</span>
<span class="x">{</span>
<span class="x">    public static function standard()</span>
<span class="x">    {</span>
<span class="x">        return new static([</span>
<span class="x">            &#39;+&#39; =&gt; new Func\PlusFunc(),</span>
<span class="x">        ]);</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Finally, the <code>plus</code> function should be moved to a <code>PlusFunc</code> class so that it
can be autoloaded. If PHP supported function autoloading this would not be
necessary. Using the <code>__invoke</code> magic method, the &quot;function object&quot; can
pretend to be a function.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias\Func;</span>

<span class="x">class PlusFunc</span>
<span class="x">{</span>
<span class="x">    public function __invoke()</span>
<span class="x">    {</span>
<span class="x">        return array_sum(func_get_args());</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>As you can see, the implementation is identical to <code>plus</code>. It behaves the same
way.</p>

<h2>Usage</h2>

<p>Phew.</p>

<p>This new evaluation process should be able to evaluate literals, nested
applications and symbols. Here is how the pieces are put together:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ast = [[&#39;+&#39;, 1, 2]];</span>
<span class="x">$env = Environment::standard();</span>

<span class="x">$builder = new FormTreeBuilder();</span>
<span class="x">$forms = $builder-&gt;parseAst($ast);</span>

<span class="x">foreach ($forms as $form) {</span>
<span class="x">    var_dump($form-&gt;evaluate($env));</span>
<span class="x">}</span>
</code></pre></div>
<p>This correctly returns <code>3</code>.</p>

<p>Let&#39;s try some more complex examples with nested <code>car</code> and <code>cdr</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ast = [</span>
<span class="x">    [&#39;+&#39;, 1, [&#39;+&#39;, 2, 3]],</span>
<span class="x">    [[&#39;get-plus-func&#39;], 1, 2],</span>
<span class="x">    [&#39;get-random-number&#39;],</span>
<span class="x">];</span>

<span class="x">$env = Environment::standard();</span>
<span class="x">$env[&#39;get-plus-func&#39;] = function () use ($env) {</span>
<span class="x">    return $env[&#39;+&#39;];</span>
<span class="x">};</span>
<span class="x">$env[&#39;get-random-number&#39;] = function () {</span>
<span class="x">    return 4;</span>
<span class="x">};</span>
</code></pre></div>
<p>And sure enough, these correctly evaluate to <code>6</code>, <code>3</code> and <code>4</code> respectively.
Ça marche!</p>

<h2>Summary</h2>

<ul>
<li>Introduced a new concept of forms, which are objects that can be evaluated.</li>
<li>There are different types of forms: List, Symbol, Literal, Quote.</li>
<li>The <code>FormTreeBuilder</code> parses an AST into a nested tree of forms.</li>
</ul>

<p>The next post will introduce a completely new concept: Special forms. They
will allow adding more low-level building blocks to the language, such as
<code>if</code>, <code>define</code> and user-land functions.</p>

<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/form-eval.php">Source code: Ilias <code>examples/form-eval.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html"><strong>forms</strong></a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Evaluation</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/12/sexpr-eval.html"/>
        <id>https://igor.io/2012/12/12/sexpr-eval.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Evaluation</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html"><strong>eval</strong></a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>So far this series has mostly been about s-expressions as a data format. I
would like to start exploring a more advanced space now: Treating
s-expressions as code and evaluating them.</p>

<p>In many Lisp implementations this is done by two functions: <em>eval</em> and
<em>apply</em>. Eval takes an expression and an environment and will evaluate that
expression in the context of the env. Apply applies a function, which means
evaluating the body of the function against a set of arguments. The arguments
are evaluated before the function is applied.</p>

<h2>Addition</h2>

<p>Ever since <a href="https://github.com/Herzult/SimplePHPEasyPlus">SimplePHPEasyPlus</a>
we know that adding two numbers together is hard.</p>

<p>So let&#39;s start with evaluating a very basic case of an s-expression. The
addition of two numbers:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>In the AST, that expression is represented as:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[[&#39;+&#39;, 1, 2]]</span>
</code></pre></div>
<p>The resulting computation of when translating this function call to PHP would
be:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">1 + 2</span>
</code></pre></div>
<p>It turns out that in Lisp you can pass more than two arguments to <code>+</code>, and it
will return the sum of all of them. With that in mind, perhaps this is a more
accurate PHP equivalent:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">array_sum([1, 2])</span>
</code></pre></div>
<p>Which in fact maps better to the way Lisp works because <code>+</code> is no longer a
special construct. It is just a function.</p>

<h2>Basic eval</h2>

<p>The starting point for implementing this is the AST. It is an array of sexprs
that should be evaluated. Each evaluated sexpr returns a value and the value
of the last evaluation should be returned.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function evaluateAst(array $ast, array $env)</span>
<span class="x">{</span>
<span class="x">    $value = null;</span>
<span class="x">    foreach ($ast as $sexpr) {</span>
<span class="x">        $value = evaluate($sexpr, $env);</span>
<span class="x">    }</span>
<span class="x">    return $value;</span>
<span class="x">}</span>
</code></pre></div>
<p>The environment represents the context of this evaluation and will become
useful later on.</p>

<p><code>evaluate</code> takes a sexpr and returns the result of that evaluation. Right now
we want to evaluate <code>(+ 1 2)</code>, which is the application of the function <code>+</code> to
the arguments <code>1</code> and <code>2</code>.</p>

<p>This function application is represented as a list whose first element is a
<em>symbol</em> referencing the function by name, all other elements are arguments to
that function.</p>

<p>In Lisp the first element of a list is called the <code>car</code>, the rest of the list
is called the <code>cdr</code> (pronounced &quot;cudder&quot;). These crazy names exist for
historical reasons but are in wide use.</p>

<p>Here are their implementations:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function car(array $list)</span>
<span class="x">{</span>
<span class="x">    return $list[0];</span>
<span class="x">}</span>

<span class="x">function cdr(array $list)</span>
<span class="x">{</span>
<span class="x">    return array_slice($list, 1);</span>
<span class="x">}</span>
</code></pre></div>
<p>For the sexpr <code>(+ 1 2)</code>, the <code>car</code> is <code>+</code> and the <code>cdr</code> is <code>(1 2)</code>. Which
happen to be the function name and the arguments.</p>

<p>Now, instead of hard-coding the possible functions like <code>+</code> into <code>evaluate</code>,
it would be better to store them in the environment. After a simple lookup,
the function can be applied to the given arguments.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function evaluate($sexpr, array $env)</span>
<span class="x">{</span>
<span class="x">    $fn = car($sexpr);</span>
<span class="x">    $args = cdr($sexpr);</span>

<span class="x">    return call_user_func_array($env[$fn], $args);</span>
<span class="x">}</span>
</code></pre></div>
<p>The last piece of the puzzle is producing an environment that actually
contains the <code>+</code> function.</p>

<p>As mentioned previously, PHP&#39;s <code>array_sum</code> is a good match for the addition
functionality. However, because <code>array_sum</code> takes an array of arguments, it
needs to be wrapped in a new <code>plus</code> function that uses <code>func_get_args</code> to get
all passed arguments as opposed to one array argument.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">array_sum([1, 2])</span>
<span class="x">plus(1, 2)</span>
</code></pre></div>
<p>The plus function:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">function plus(/* $numbers... */)</span>
<span class="x">{</span>
<span class="x">    return array_sum(func_get_args());</span>
<span class="x">}</span>
</code></pre></div>
<p>Finally, why not provide some sort of default environment which contains the
core functions. It&#39;s simply an array which maps from function name symbols to
actual PHP functions:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function environment()</span>
<span class="x">{</span>
<span class="x">    return [</span>
<span class="x">        &#39;+&#39; =&gt; &#39;Igorw\Ilias\plus&#39;,</span>
<span class="x">    ];</span>
<span class="x">}</span>
</code></pre></div>
<p>This should be enough to evaluate <code>(+ 1 2)</code>:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$ast = [[&#39;+&#39;, 1, 2]];</span>
<span class="x">$env = environment();</span>
<span class="x">var_dump(evaluateAst($ast, $env));</span>
</code></pre></div>
<p>And sure enough, this returns <code>3</code>. Just to be extra sure, how about
<code>(+ 1 2 3)</code>? It returns <code>6</code>, as expected.</p>

<p>Sweet!</p>

<h2>Limitations</h2>

<p>This implementation is already quite flexible. It allows new functions to be
added dynamically, it allows the Lisp code to call any PHP function that is
mapped in the environment. But overall it is very basic, and many things are
not yet working.</p>

<ul>
<li>Only function application is supported.</li>
<li>The expression cannot be a literal <code>42</code>.</li>
<li>The expression cannot be a quoted value <code>&#39;foo</code>.</li>
<li>The expression cannot be a quoted list <code>&#39;(foo bar)</code>.</li>
<li>The <code>car</code> cannot be an application <code>((get-plus) 1 2)</code>.</li>
<li>The <code>cdr</code> cannot contain nested applications <code>(+ 1 (+ 2 3))</code>.</li>
</ul>

<p>To address these issues, the following changes need to be made to <code>evaluate</code>:</p>

<ul>
<li>It needs to support other forms than simple function applications.</li>
<li>It needs to evaluate the <code>car</code> of lists before the environment lookup.</li>
<li>It needs to evaluate each element from the <code>cdr</code> of lists before application.</li>
</ul>

<p>In the next post I will improve the overall design of how evaluation works,
fix the mentioned shortcomings and introduce some new concepts.</p>

<h2>Conclusion</h2>

<ul>
<li>Adding two numbers is hard.</li>
<li>Evaluating a Lisp function application is easy.</li>
<li><code>car</code> and <code>cdr</code> are bad names, even worse than <em>sexpr</em>.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/igorw/ilias/blob/master/examples/basic-eval.php">Source code: Ilias <code>examples/basic-eval.php</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html"><strong>eval</strong></a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Reader</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/08/sexpr-reader.html"/>
        <id>https://igor.io/2012/12/08/sexpr-reader.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Reader</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html"><strong>reader</strong></a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>The previous post discussed the first step of parsing: tokenization. Now I
want to dive into token parsing. Usually the program that parses the tokens
into an abstract syntax tree or AST is called a <em>parser</em>.</p>

<p>In the context of s-expressions and Lisp, it is usually refered to as a
<em>reader</em>, so that is the terminology that I will use.</p>

<p><center>
    <img src="/sexpr/reader.png" alt="parser process">
</center></p>

<h2>Abstract syntax tree</h2>

<p>The lexer has constructed a nice token stream, but that is not very useful
yet. A token stream does not tell me very much. What I want is a format that
represents the hierarchy of the data.</p>

<p>Which is exactly what an abstract syntax tree does. For sexprs the AST is
basically just an in-memory representation of the lists which form the sexpr.</p>

<p>Similarly to how token streams usually have token names, ASTs usually have
node names. However, since sexprs can be considered a data format I will just
parse them into flat PHP arrays directly.</p>

<p>Going back to the sexprs that I fed into the lexer and the tokens it spat out,
what should I expect the reader to give me from those tokens? Here are the
outputs that I expect:</p>

<div class="ascii-table"><pre>
+---------------+---------------------------------+------------------------+
| Sexpr         | Tokens                          | AST                    |
+---------------+---------------------------------+------------------------+
| foo           | ["foo"]                         | ["foo"]                |
| an-atom       | ["an-atom"]                     | ["an-atom"]            |
| ()            | ["(", ")"]                      | [[]]                   |
| (foo)         | ["(", "foo", ")"]               | [["foo"]]              |
| (foo bar)     | ["(", "foo", "bar", ")"]        | [["foo", "bar"]]       |
| (foo bar baz) | ["(", "foo", "bar", "baz", ")"] | [["foo", "bar"]]       |
| (+ 1 2)       | ["(", "+", "1", "2", ")"]       | [["+", 1, 2]]          |
+---------------+---------------------------------+------------------------+
</pre></div>

<p>Note that the AST is always an array. The reason for that is that the top
level of the sexpr can contain many lists like so:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">foo</span><span class="p">)</span>
<span class="p">(</span><span class="nv">bar</span><span class="p">)</span>
<span class="p">(</span><span class="nv">baz</span><span class="p">)</span>
</code></pre></div>
<p>Which would result in:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">[[&quot;foo&quot;], [&quot;bar&quot;], [&quot;baz&quot;]]</span>
</code></pre></div>
<p>Also note that the parser will already make some type distinctions. If an atom
looks like a number, it will be represented as an integer.</p>

<h2>Basic reader</h2>

<p>The interface of the reader is very straight-forward. It has a single <em>parse</em>
method which takes the token stream as an argument and returns the AST.</p>

<p>Usage:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$reader = new Reader();</span>
<span class="x">$ast = $reader-&gt;parse($tokens);</span>
</code></pre></div>
<p>Source:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Reader</span>
<span class="x">{</span>
<span class="x">    public function parse(array $tokens)</span>
<span class="x">    {</span>
<span class="x">        $ast = [];</span>

<span class="x">        for ($i = 0, $length = count($tokens); $i &lt; $length; $i++) {</span>
<span class="x">            $token = $tokens[$i];</span>

<span class="x">            // extract atoms</span>
<span class="x">            if (!in_array($token, [&#39;(&#39;, &#39;)&#39;])) {</span>
<span class="x">                $ast[] = $this-&gt;normalizeAtom($token);</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // parse list recursively</span>
<span class="x">            if (&#39;(&#39; === $token) {</span>
<span class="x">                list($listTokens, $i) = $this-&gt;extractListTokens($tokens, $i);</span>
<span class="x">                $ast[] = $this-&gt;parse($listTokens);</span>
<span class="x">                continue;</span>
<span class="x">            }</span>
<span class="x">        }</span>

<span class="x">        return $ast;</span>
<span class="x">    }</span>

<span class="x">    ...</span>
<span class="x">}</span>
</code></pre></div>
<p>If you recall the different implicit token types: <code>T_OPEN</code>, <code>T_CLOSE</code>,
<code>T_ATOM</code> and <code>T_QUOTE</code>. And I will ignore quoting for now.</p>

<p>Any token that is not an opening or closing brace is an atom. Atoms are
normalized, then appended to the AST. Normalization just detects the atom type
and casts it accordingly.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function normalizeAtom($atom)</span>
<span class="x">{</span>
<span class="x">    if (is_numeric($atom)) {</span>
<span class="x">        return (int) $atom;</span>
<span class="x">    }</span>

<span class="x">    return $atom;</span>
<span class="x">}</span>
</code></pre></div>
<p>If the reader finds an open token, it must read all tokens until it finds a
matching close token and then parse the whole range into a list. That list can
then be appended to the AST.</p>

<p>The method for finding the matching brace and extracting the tokens simply
needs to keep track of the nesting level and stop when the nesting level goes
back to zero.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function extractListTokens(array $tokens, $i)</span>
<span class="x">{</span>
<span class="x">    $level = 0;</span>
<span class="x">    $init = $i;</span>

<span class="x">    for ($length = count($tokens); $i &lt; $length; $i++) {</span>
<span class="x">        $token = $tokens[$i];</span>

<span class="x">        if (&#39;(&#39; === $token) {</span>
<span class="x">            $level++;</span>
<span class="x">        }</span>

<span class="x">        if (&#39;)&#39; === $token) {</span>
<span class="x">            $level--;</span>
<span class="x">        }</span>

<span class="x">        if (0 === $level) {</span>
<span class="x">            return [</span>
<span class="x">                array_slice($tokens, $init + 1, $i - ($init + 1)),</span>
<span class="x">                $i,</span>
<span class="x">            ];</span>
<span class="x">        }</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The reader is designed to be stateless, which is why it does not store the
tokens or the parsing position in member variables.</p>

<h2>Quoted values</h2>

<p>In its current state, the reader is able to parse most of the provided test
cases. One remaining problem however are quoted values.</p>

<p>In fact, because this reader does not represent the AST with an abstract type
of node, we have no way of distinguishing between quoted and non-quoted
values. There is an easy hack which allows it to be handled in a fairly clean
way though: encapsulating quoted values within <code>QuotedValue</code> objects.</p>

<p>The <code>QuotedValue</code> class just wraps around a value to mark it as quoted:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class QuotedValue</span>
<span class="x">{</span>
<span class="x">    private $value;</span>

<span class="x">    public function __construct($value)</span>
<span class="x">    {</span>
<span class="x">        $this-&gt;value = $value;</span>
<span class="x">    }</span>

<span class="x">    public function getValue()</span>
<span class="x">    {</span>
<span class="x">        return $this-&gt;value;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Now, in order to parse these quoted values correctly we need to detect the
<code>T_QUOTE</code> token:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">// wrap quoted value</span>
<span class="x">if (&quot;&#39;&quot; === $token) {</span>
<span class="x">    list($parsedToken, $i) = $this-&gt;parseQuotedToken($tokens, $i);</span>
<span class="x">    $ast[] = $parsedToken;</span>
<span class="x">    continue;</span>
<span class="x">}</span>
</code></pre></div>
<p>The quoted value is either an atom or a list. Since lists consist of multiple
tokens, the reader needs to do some extra work here to completely extract all
of the tokens:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">private function parseQuotedToken(array $tokens, $i)</span>
<span class="x">{</span>
<span class="x">    // skip past quote char</span>
<span class="x">    $i++;</span>

<span class="x">    // quoted atom</span>
<span class="x">    if (&#39;(&#39; !== $tokens[$i]) {</span>
<span class="x">        $atom = $this-&gt;normalizeAtom($tokens[$i]);</span>
<span class="x">        return [</span>
<span class="x">            new QuotedValue($atom),</span>
<span class="x">            $i,</span>
<span class="x">        ];</span>
<span class="x">    }</span>

<span class="x">    // quoted list</span>
<span class="x">    list($listTokens, $i) = $this-&gt;extractListTokens($tokens, $i);</span>
<span class="x">    $list = $this-&gt;parse($listTokens);</span>

<span class="x">    return [</span>
<span class="x">        new QuotedValue($list),</span>
<span class="x">        $i,</span>
<span class="x">    ];</span>
<span class="x">}</span>
</code></pre></div>
<p>And that&#39;s it, the reader is now correctly parsing quoted values as well.</p>

<h2>Problems</h2>

<p>This implementation is quite naïve, a lot of stuff is missing. The biggest
problem is the complete lack of error handling.</p>

<p>A parser should validate its input correctly. It should expect valid follow-up
tokens to the current one and throw an exception in your face if you feed it
invalid tokens.</p>

<p>Speaking of error handling and exceptions, it should try to give useful
exception messages. If a parse error occurs, it should tell you exactly where,
with a contextual snippet of the input code. And it should include line
numbers.</p>

<p>Does the reader have access to the line numbers? No. The lexer did not provide
them. If the token data structure were extended to contain more information,
then the reader would be able to give the user more meaningful error messages.</p>

<p>This is what the token data structure could look like:</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">Token</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">type</span><span class="p">;</span>
    <span class="n">string</span> <span class="n">source</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">line</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">offset</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>But I will keep it simple for now.</p>

<h2>Parsing an s-expression</h2>

<p>With the lexer and the parser in place, they can now be combined to parse
s-expressions into an AST:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$code = &#39;(+ 1 2)&#39;;</span>

<span class="x">$lexer  = new Lexer();</span>
<span class="x">$reader = new Reader();</span>

<span class="x">$tokens = $lexer-&gt;tokenize($code);</span>
<span class="x">$ast    = $reader-&gt;parse($tokens);</span>

<span class="x">var_dump($ast);</span>
<span class="x">// [[&quot;+&quot;, 1, 2]]</span>
</code></pre></div>
<p>Hooray, it works!</p>

<h2>Conclusion</h2>

<ul>
<li>The reader parses a token stream into an AST.</li>
<li>Writing a reliable parser is hard.</li>
<li>I want to know how to interpret an abstract syntax tree.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="https://github.com/nikic/PHP-Parser">nikic/PHP-Parser</a></li>
<li><a href="https://github.com/schmittjoh/parser-lib">schmittjoh/parser-lib</a></li>
<li><a href="https://github.com/fabpot/Twig">fabpot/Twig</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Reader.php">Source code: <code>Igorw\Ilias\Reader</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/ReaderTest.php">Source code: <code>Igorw\Ilias\ReaderTest</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html"><strong>reader</strong></a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions: Lexer</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/07/sexpr-lexer.html"/>
        <id>https://igor.io/2012/12/07/sexpr-lexer.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions: Lexer</h1>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html"><strong>lexer</strong></a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>In this follow-up post to s-expressions I would like to introduce you to
lexical analysis.</p>

<p>Parsing a language or a data format is often implemented as
a two step process. The first step is <em>lexing</em> which takes raw data and
translates it to a <em>token stream</em>. The second step is <em>parsing</em> which
translates a token stream to an <em>abstract syntax tree</em>.</p>

<p><center>
    <img src="/sexpr/parser-process.png" alt="parser process">
</center></p>

<h2>Tokenization</h2>

<p>The job of the lexer is tokenization. You give it code, it looks at the
characters, groups them and labels those groups with some sort of type.</p>

<p>It usually does not perform any validation on the tokens, except for very
basic checks, such as throwing an exception if no valid token is matched at
all.</p>

<p>Here is an example of some possible inputs you could feed into an sexpr lexer,
and the resulting outputs:</p>

<div class="ascii-table"><pre>
+---------------+----------------------------------------------------+
| Sexpr         | Tokens                                             |
+---------------+----------------------------------------------------+
| foo           | ["foo"]                                            |
| an-atom       | ["an-atom"]                                        |
| ()            | ["(", ")"]                                         |
| (foo)         | ["(", "foo", ")"]                                  |
| (foo bar)     | ["(", "foo", "bar", ")"]                           |
| (foo bar baz) | ["(", "foo", "bar", "baz", ")"]                    |
| (+ 1 2)       | ["(", "+", "1", "2", ")"]                          |
| ((a 1) (b 2)) | ["(", "(", "a", "1", ")", "(", "b", "2", ")", ")"] |
+---------------+----------------------------------------------------+
</pre></div>

<p>A more advanced lexer could define specific token types such as <code>T_OPEN</code>,
<code>T_CLOSE</code>, <code>T_ATOM</code> and encode them as part of the token stream. In the case
of s-expressions it&#39;s very easy to detect the token type from its raw
characters, so just returning a flat array of strings will suffice for now.</p>

<h2>Quoting</h2>

<p>Before we look at the actual code for lexing, you need to understand one more
concept about s-expressions that I shamelessly omitted in the last post:
quoting.</p>

<p>Since sexprs are code in Lisp, non-numeric atoms are interpreted as variables
and lists are interpreted as function calls. In order to represent data and
have a sexpr not evaluate, you need to quote the value.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="k">quote</span> <span class="nv">foo</span><span class="p">)</span>
<span class="p">(</span><span class="k">quote</span> <span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">))</span>
</code></pre></div>
<p>There is also a shortcut for this: just prepend a single quote in front of the
expression that you want to quote.</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="ss">&#39;foo</span>
<span class="o">&#39;</span><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>Now you can apply the <code>length</code> function with a list of atoms, which will in
this case return <code>3</code>:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">length</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">))</span>
</code></pre></div>
<p>Going back to the lexer, this means that it should turn the <code>&#39;</code> into a
<code>T_QUOTE</code> token, which I will represent using the quote character.</p>

<div class="ascii-table"><pre>
+--------+------------------------+
| Sexpr  | Tokens                 |
+--------+------------------------+
| 'foo   | ["'", 'foo']           |
| '(foo) | ["'", '(', 'foo', ')'] |
+--------+------------------------+
</pre></div>

<p>Those test cases should already give a fairly complete subset of sexpr tokens.</p>

<h2>Lexer</h2>

<blockquote>
<p>Note: All of the code samples from this series are based on a very simplistic Lisp
implementation I did in PHP: <a href="https://github.com/igorw/ilias">Ilias</a>.</p>
</blockquote>

<p>The lexer will be a class with a single <code>tokenize</code> method.</p>

<p>Usage:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$lexer = new Lexer();</span>
<span class="x">$tokens = $lexer-&gt;tokenize($code);</span>
</code></pre></div>
<p>Source:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Ilias;</span>

<span class="x">class Lexer</span>
<span class="x">{</span>
<span class="x">    private $whitespace = [&#39; &#39;, &quot;\t&quot;, &quot;\r&quot;, &quot;\n&quot;];</span>
<span class="x">    private $nonAtom = [&#39;(&#39;, &#39;)&#39;, &#39; &#39;, &quot;\t&quot;, &quot;\r&quot;, &quot;\n&quot;];</span>

<span class="x">    public function tokenize($code)</span>
<span class="x">    {</span>
<span class="x">        $tokens = [];</span>

<span class="x">        for ($i = 0, $length = strlen($code); $i &lt; $length; $i++) {</span>
<span class="x">            $char = $code[$i];</span>

<span class="x">            // kill whitespace</span>
<span class="x">            if (in_array($char, $this-&gt;whitespace)) {</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // parens are single tokens</span>
<span class="x">            if (in_array($char, [&#39;(&#39;, &#39;)&#39;])) {</span>
<span class="x">                $tokens[] = $char;</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // quote token (just the quote character)</span>
<span class="x">            if (&quot;&#39;&quot; === $char) {</span>
<span class="x">                $tokens[] = $char;</span>
<span class="x">                continue;</span>
<span class="x">            }</span>

<span class="x">            // atom token</span>
<span class="x">            $atom = &#39;&#39;;</span>
<span class="x">            $next = $char;</span>
<span class="x">            do {</span>
<span class="x">                $atom .= $next;</span>
<span class="x">                $next = ($length &gt; $i+1) ? $code[$i+1] : null;</span>
<span class="x">            } while (null !== $next &amp;&amp; !in_array($next, $this-&gt;nonAtom) &amp;&amp; ++$i);</span>
<span class="x">            $tokens[] = $atom;</span>
<span class="x">        }</span>

<span class="x">        return $tokens;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>The lexer consumes the input one character at a time. First it checks for
whitespace, which is simply ignored. Then it detects single-char tokens which
are pushed onto the token stream array. Finally, it turns all chars that are
part of an atom into an atom token.</p>

<p>Well, that is already enough to correctly tokenize the above test cases and
quite a few more.</p>

<h2>Conclusion</h2>

<ul>
<li>Parsing is usually a two step process: Lexing and token parsing.</li>
<li>A lexer turns raw data into a token stream.</li>
<li>I want to know how to parse a token stream into an abstract syntax tree.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="http://nikic.github.com/2011/10/23/Improving-lexing-performance-in-PHP.html">Improving lexing performance in PHP - nikic</a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/src/Igorw/Ilias/Lexer.php">Source code: <code>Igorw\Ilias\Lexer</code></a></li>
<li><a href="https://github.com/igorw/ilias/blob/master/tests/Igorw/Ilias/LexerTest.php">Source code: <code>Igorw\Ilias\LexerTest</code></a></li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html">sexpr</a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html"><strong>lexer</strong></a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>S-expressions</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/12/06/sexpr.html"/>
        <id>https://igor.io/2012/12/06/sexpr.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>S-expressions</h1>

<p>(<a href="/2012/12/06/sexpr.html"><strong>sexpr</strong></a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

<p>A symbolic expression is a notation of a nested list structure. It&#39;s origin
lies within the Lisp family of programming languages whose entire syntax
consists of these expressions.</p>

<p>I want to introduce you to the syntax and in subsequent posts go into how it
can be parsed and interpreted.</p>

<h2>Syntax</h2>

<p>An s-expression is either an atom or an ordered pair of s-expressions. In
practice that just means that you have lists of s-expressions that can be
nested.</p>

<p>An atom is a symbol which is essentially a value that is not a list. Here are
a few examples of atoms:</p>

<ul>
<li><code>foo</code></li>
<li><code>an-atom</code></li>
<li><code>42</code></li>
</ul>

<p>Lists are represented by parentheses. They can be empty, or hold atoms,
delimited by spaces.</p>

<ul>
<li><code>()</code></li>
<li><code>(foo)</code></li>
<li><code>(foo bar)</code></li>
<li><code>(foo bar baz)</code></li>
</ul>

<p>Lists can also contain other lists, allowing them to be nested:</p>

<ul>
<li><code>((foo) (bar))</code></li>
<li><code>((a 1) (b 2))</code></li>
<li><code>(alpha (beta (gamma (delta))))</code></li>
</ul>

<p>This should give you a basic understanding of how the sexpr syntax works.</p>

<h2>Representing data</h2>

<p>You can use this format to represent data, just as you would use XML or JSON.
In fact, let&#39;s take the <code>composer.json</code> from
<a href="https://github.com/igorw/yolo">YOLO</a> (the microframework with swag):</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;igorw/yolo&quot;</span><span class="p">,</span>
    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;The microframework with swag.&quot;</span><span class="p">,</span>
    <span class="nt">&quot;keywords&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;useless&quot;</span><span class="p">,</span> <span class="s2">&quot;microframework&quot;</span><span class="p">,</span> <span class="s2">&quot;academic&quot;</span><span class="p">,</span> <span class="s2">&quot;swag&quot;</span><span class="p">],</span>
    <span class="nt">&quot;license&quot;</span><span class="p">:</span> <span class="s2">&quot;MIT&quot;</span><span class="p">,</span>
    <span class="nt">&quot;authors&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Igor Wiedler&quot;</span><span class="p">,</span>
            <span class="nt">&quot;email&quot;</span><span class="p">:</span> <span class="s2">&quot;igor@wiedler.ch&quot;</span>
        <span class="p">}</span>
    <span class="p">]</span>
    <span class="err">...</span>
<span class="p">}</span>
</code></pre></div>
<p>And transpose it to sexpr:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">dict</span> <span class="p">(</span><span class="nv">name</span> <span class="s">&quot;igorw/yolo&quot;</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">description</span> <span class="s">&quot;The microframework with swag.&quot;</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">keywords</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">useless</span> <span class="nv">microframework</span> <span class="nv">academic</span> <span class="nv">swag</span><span class="p">))</span>
      <span class="p">(</span><span class="nv">license</span> <span class="s">&quot;MIT&quot;</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">authors</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nv">dict</span> <span class="p">(</span><span class="nv">name</span> <span class="s">&quot;Igor Wiedler&quot;</span><span class="p">)</span>
                           <span class="p">(</span><span class="nv">email</span> <span class="s">&quot;igor@wiedler.ch&quot;</span><span class="p">)))))</span>
</code></pre></div>
<p>A few things worth noting:</p>

<ul>
<li>There is a <code>dict</code> keyword, which produces a dictionary from the pairs it
receives as arguments.</li>
<li>Strings are written between quotes, which groups them from the whitespace.</li>
<li>The <code>keywords</code> are represented by a quoted list of atoms.</li>
<li>The data in <code>authors</code> is explicitly constructed as a list using a <code>list</code>
construct.</li>
</ul>

<p>Try not to worry about those details too much at this point. This is just one
possible way of representing that data.</p>

<blockquote>
<p>Side note: Wouldn&#39;t it be awesome if composer supported <code>composer.sexpr</code>
files natively, so that we would no longer have to write JSON? No, not
really. I would argue that the benefits of a unified standard format
outweigh pluggability in this case.</p>
</blockquote>

<h2>Representing code</h2>

<p>What&#39;s really fascinating about s-expressions is that they can be used to
represent not only data, but also code.</p>

<p>Here is one of the most basic Lisp code snippets:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nb">+</span> <span class="mi">1</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div>
<p>It looks cryptic, but it&#39;s actually quite simple. Instead of infix notation,
this is using Polish notation, also known as <em>prefix notation</em>. What the
expression represents is this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">1 + 2</span>
</code></pre></div>
<p>The parentheses tell you that it&#39;s a <em>function application</em> or
function invocation. The first element of the list is a function, the
remaining elements are the arguments passed to that function. <code>+</code> is simply a
function which sums up any arguments it receives.</p>

<p>So what about other functions, that are not operators? They work the same way.
For example, this application:</p>
<div class="highlight"><pre><code class="language-lisp" data-lang="lisp"><span class="p">(</span><span class="nv">foo</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
</code></pre></div>
<p>Would be written like this in PHP:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">foo($a, $b);</span>
</code></pre></div>
<p>That&#39;s about as far as I will go in this post. This should give you an idea
about the basics of the syntax and how to read it. Stay tuned for follow-up
posts.</p>

<h2>Conclusion</h2>

<ul>
<li>S-expressions are a strange looking format that is simple, yet powerful.</li>
<li>They can represent both data and code.</li>
<li>I want to know how to parse them in PHP.</li>
</ul>

<hr>

<p>(<a href="/2012/12/06/sexpr.html"><strong>sexpr</strong></a>
&nbsp;<a href="/2012/12/07/sexpr-lexer.html">lexer</a>
&nbsp;<a href="/2012/12/08/sexpr-reader.html">reader</a>
&nbsp;<a href="/2012/12/12/sexpr-eval.html">eval</a>
&nbsp;<a href="/2012/12/13/sexpr-forms.html">forms</a>
&nbsp;<a href="/2012/12/14/sexpr-special-forms.html">special-forms</a>
&nbsp;<a href="/2012/12/29/sexpr-macros.html">macros</a>
&nbsp;<a href="/2012/12/30/sexpr-walker.html">walker</a>
&nbsp;<a href="/2013/04/03/sexpr-meta-eval.html">meta-eval</a>)</p>

        ]]></content>
    </entry>
    
    <entry>
        <title>Scaling a Silex code base</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/11/09/scaling-silex.html"/>
        <id>https://igor.io/2012/11/09/scaling-silex.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Scaling a Silex code base</h1>

<blockquote>
<p><strong>Warning:</strong> This blog post is <em>not</em> about clouds, it&#39;s about people.</p>
</blockquote>

<p>One common misconception about <a href="http://silex.sensiolabs.org">silex</a> and
microframeworks in general is that they are only suited for small, simple
apps, APIs and prototyping. Of course, those use cases are the main selling
point, but they are by no means the limit of what is possible.</p>

<h2>Creating the mess</h2>

<p>The first experience with silex will most likely be something like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app-&gt;get(&#39;/&#39;, function () {</span>
<span class="x">    return &#39;Hi&#39;;</span>
<span class="x">});</span>
</code></pre></div>
<p>Cute. Now fast-forward a few months, and it is looking more like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app-&gt;get(&#39;/&#39;, function (Request $request) use ($app) {</span>
<span class="x">    $products = $app[&#39;db&#39;]-&gt;fetchAll(&#39;SELECT * FROM products&#39;);</span>

<span class="x">    $suggestions = [];</span>
<span class="x">    $token = $app[&#39;security&#39;]-&gt;getToken();</span>
<span class="x">    if (null !== $token) {</span>
<span class="x">        $user = $token-&gt;getUser();</span>

<span class="x">        $friends = $app[&#39;db&#39;]-&gt;fetchAll(&#39;SELECT u.* FROM users u JOIN purchases pu ON pu.user_id = user.id WHERE pu.product_id IN (SELECT product_id FROM purchases WHERE user_id = ?)&#39;, [(int) $user-&gt;getId()]);</span>

<span class="x">        $sql = sprintf(&#39;SELECT p.* FROM products p JOIN purchases pu ON pu.product_id = p.id WHERE pu.user_id IN (%s)&#39;, implode(&#39;,&#39;, array_map(function ($friend) { return (int) $friend[&#39;id&#39;]; }, $friends)));</span>
<span class="x">        $suggestions = $app[&#39;db&#39;]-&gt;fetchAll($sql);</span>
<span class="x">    }</span>

<span class="x">    $app[&#39;predis&#39;]-&gt;incr(&#39;pageviews&#39;);</span>
<span class="x">    $app[&#39;predis&#39;]-&gt;incr(&#39;pageviews:index&#39;);</span>

<span class="x">    $data = [</span>
<span class="x">        &#39;products&#39;      =&gt; $products,</span>
<span class="x">        &#39;suggestions&#39;   =&gt; $suggestions,</span>
<span class="x">    ];</span>

<span class="x">    if (&#39;application/json&#39; === $request-&gt;headers-&gt;get(&#39;Accept&#39;)) {</span>
<span class="x">        return $app-&gt;json($data);</span>
<span class="x">    }</span>

<span class="x">    return $app[&#39;twig&#39;]-&gt;render(&#39;index.html.twig&#39;, $data);</span>
<span class="x">});</span>
</code></pre></div>
<p>This is a vastly simplified example, but you get the idea. Imagine 20-30 of
these inline controllers. Even if you extract everything into services, you
will still be left with a single file of bloat. I am going to suggest
something revolutionary: <em>Move your code into classes!</em></p>

<p>One of the more common complaints that I hear is that silex forces you to put
all of your code into a single file. Now to be fair, controllers as classes
are only very briefly mentioned in the documentation. There are two pull
requests that will document the feature properly and appropriately.</p>

<blockquote>
<p>Note: I am going to assume that these classes will be loaded via PSR-0
autoloading, managed by composer.</p>
</blockquote>

<h2>Controllers in classes</h2>

<p>This is how it is done:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">namespace Igorw\Shop\Controller;</span>

<span class="x">use Silex\Application;</span>
<span class="x">use Symfony\Component\HttpFoundation\Request;</span>

<span class="x">class ShopController</span>
<span class="x">{</span>
<span class="x">    public function indexAction(Request $request, Application $app)</span>
<span class="x">    {</span>
<span class="x">        ...</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>And now the routing looks like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$app-&gt;get(&#39;/&#39;,          &#39;Igorw\Shop\Controller\ShopController::indexAction&#39;);</span>
<span class="x">$app-&gt;match(&#39;/login&#39;,   &#39;Igorw\Shop\Controller\ShopController::loginAction&#39;);</span>
<span class="x">$app-&gt;get(&#39;/product&#39;,   &#39;Igorw\Shop\Controller\ShopController::productAction&#39;);</span>
</code></pre></div>
<p>And if those class names are too damn long, relax. You can easily write a
function to shorten them. Did you know that it is okay to write functions in
PHP? It is!</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">function controller($shortName)</span>
<span class="x">{</span>
<span class="x">    list($shortClass, $shortMethod) = explode(&#39;/&#39;, $shortName, 2);</span>

<span class="x">    return sprintf(&#39;Igorw\Shop\Controller\%sController::%sAction&#39;, ucfirst($shortClass), $shortMethod);</span>
<span class="x">}</span>

<span class="x">$app-&gt;get(&#39;/&#39;, controller(&#39;shop/index&#39;));</span>
<span class="x">$app-&gt;match(&#39;/login&#39;, controller(&#39;shop/login&#39;));</span>
<span class="x">$app-&gt;get(&#39;/product&#39;, controller(&#39;shop/product&#39;));</span>
</code></pre></div>
<p>It is worth noting that although we specified the controller name as a string
here, it will <em>not</em> call the method statically (unless it is a static method),
but in fact create an instance of the class on demand. This ensures that the
class is lazy-loaded and only instantiated if that particular route matches.</p>

<p>This is done using the Symfony2 <code>ControllerResolver</code>, which can be extended to
resolve the provided controller name to a <code>callable</code> dynamically, allowing the
short notation of controller names to be supported directly, without the call
to <code>controller()</code>.</p>

<h2>Logic in services</h2>

<p>Since the controllers are still huge, you will most likely want to rip them
apart and extract as much code as possible into separate classes, which can
then be defined as services on the pimple container.</p>

<p>Here is an example of what you <em>might</em> end up with:</p>

<ul>
<li><code>Igorw\Store\Storage\ProductRepository</code></li>
<li><code>Igorw\Store\Storage\StatsCollector</code></li>
<li><code>Igorw\Store\View\ProductJsonView</code></li>
<li><code>Igorw\Store\View\ProductTwigView</code></li>
<li><code>Igorw\Store\Suggestor</code></li>
</ul>

<p>And a more manageable controller:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">class ShopController</span>
<span class="x">{</span>
<span class="x">    public function indexAction(Request $request, Application $app)</span>
<span class="x">    {</span>
<span class="x">        $products = $app[&#39;repo.product&#39;]-&gt;findAll();</span>

<span class="x">        $user = $this-&gt;getUser($app);</span>
<span class="x">        $suggestions = ($user) ? $app[&#39;suggestor&#39;]-&gt;suggestProducts($user) : [];</span>

<span class="x">        $app[&#39;stats&#39;]-&gt;pageview(&#39;index&#39;);</span>

<span class="x">        $data = [</span>
<span class="x">            &#39;products&#39;      =&gt; $products,</span>
<span class="x">            &#39;suggestions&#39;   =&gt; $suggestions,</span>
<span class="x">        ];</span>

<span class="x">        return $app[&#39;view_factory&#39;]</span>
<span class="x">            -&gt;create($request, $data)</span>
<span class="x">            -&gt;render();</span>
<span class="x">    }</span>

<span class="x">    private function getUser(Application $app)</span>
<span class="x">    {</span>
<span class="x">        $token = $app[&#39;security&#39;]-&gt;getToken();</span>
<span class="x">        return $token ? $token-&gt;getUser() : null;</span>
<span class="x">    }</span>
<span class="x">}</span>
</code></pre></div>
<p>Is there room for improvement? Certainly. The next step would be to define the
controllers themselves as services by extending the <code>ControllerResolver</code>. This
would eliminate the dependency that the controllers have on the service
locator, turning it into a real service container. I will not cover that here.
If you are interested, <a href="http://davedevelopment.co.uk/2012/10/03/Silex-Controllers-As-Services.html">read this excellent blog post by Dave
Marshall</a>.</p>

<h2>Taming the beast</h2>

<p>As you hopefully see now, silex is able to grow organically as your code base
grows. It does not impose the lack of structure on you. The
<code>Silex\Application</code> class has two main responsibilities (yes, it&#39;s an SRP
violation, deal with it):</p>

<ul>
<li>Silex is a <strong>Service Container</strong>* based on pimple.</li>
<li>Silex is a <strong>Route Builder</strong>.</li>
</ul>

<p>* In most cases it is used as a service locator, not a service container.</p>

<p>The route builder responsibility becomes visible instantly once you move the
controllers into separate classes. At that point it is basically a PHP API for
a <code>routing.yml</code> file with some extra bells and whistles.</p>

<p>The technical issues of growing a silex code base have been addressed. They&#39;re
gone. In this case we ended up with something that is quite similar to
full-stack Symfony2 in many ways. It is not using any static configuration
files, and is lacking many of the features that the full-stack framework has.
The main difference is something completely different though.</p>

<h2>Silex vs Symfony2</h2>

<p>I have had many people ask where to draw the line between Symfony2 and silex.
How many routes can I have in silex before it becomes unbearable? How many
services can I have before I should consider switching from silex to Symfony2?
And for a long time I didn&#39;t have a good answer to this question. One of the
best answers I have heard <a href="https://twitter.com/mrf/status/251731315739729920">is from Dustin
Whittle</a>:</p>

<blockquote>
<p>Use silex if you are comfortable with making all of your own architecture
decisions and full stack Symfony2 if not.</p>
</blockquote>

<p>To put it in other words, it really does not matter how large your app is, how
many controllers and routes and services you have. On a technical level you
can find solutions for that. The challenge you will actually face is people.</p>

<p>The main difference between silex and Symfony2 full-stack is that Symfony2 is
a framework. Silex is not a framework, it&#39;s a library which provides a service
container, a route builder and some glue to build your own framework with.</p>

<p>The distinction that I want to make here is that Symfony2 has conventions. It
has a pre-defined directory structure, config files, front controllers. All of
these conventions are very explicit and will most likely be consistent across
most Symfony2 projects.</p>

<p>There are many good reasons to have these kind of conventions. The main one is
human scale. When you have many developers working on the same code base, you
want the code to remain consistent. At the same time, it is growing, so it may
need to be re-structured. With Symfony2 you already know how to structure it.
With silex you need to figure it out on your own.</p>

<h2>Summary</h2>

<ul>
<li>Silex does not prevent you from structuring your code.</li>
<li>It requires you to make your own architecture decisions.</li>
<li>Human scale is the only limiting factor.</li>
</ul>

        ]]></content>
    </entry>
    
    <entry>
        <title>Binary parsing with PHP</title>
        <link rel="alternate" type="text/html" href="https://igor.io/2012/09/24/binary-parsing.html"/>
        <id>https://igor.io/2012/09/24/binary-parsing.html</id>
        <updated>2015-04-06T16:35:01+02:00</updated>
        <author>
            <name>Igor Wiedler</name>
            <email>igor@igor.io</email>
        </author>
        <content type="html" xml:lang="en"><![CDATA[
            <h1>Binary parsing with PHP</h1>

<p>Binary operations in PHP are a bit strange. Since PHP was originally a
templating layer for C code, it still has many of those C-isms. Lots of the
function names map directly to C-level APIs, even if they work a bit
differently sometimes. For example, PHP&#39;s <code>strlen</code> maps directly to
<code>STRLEN(3)</code>, and there are countless examples of this. However, as soon as it
comes to dealing with binary data, things suddenly become very different.</p>

<h2>Binary data, you say?</h2>

<p>What is binary data? Binary is really just a representation of data, and any
data can be represented as 0s and 1s. When we speak of binary data, what we
usually mean is representing data as a sequence of bits. And what we usually
want to do is encode some data into bits for transfer and then decode them on
the other end. The binary representation is simply an efficient wire format.</p>

<p>To encode and decode, we must somehow gain access to the individual bits, and
then have functions that are able to convert from some existing representation
to the packed one, and vice-versa. One of the tools that programming languages
provide in order to do that are bitwise operations.</p>

<h2>The C way</h2>

<p>Before we look at the way this works in PHP, I&#39;d like to first see how C
handles it under the hood.</p>

<p>While C is a high level language, it is still very close to the hardware.
Inside the CPU and RAM, data is stored as a sequence of bits. Therefore,
integers in C are internally also a sequence of bits. A char is also a
sequence of bits, and a string is an array of chars.</p>

<p>Let&#39;s look at an example:</p>
<div class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">char</span> <span class="o">*</span><span class="n">hello</span> <span class="o">=</span> <span class="s">&quot;Hello World&quot;</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&quot;char: %c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hello</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&quot;ascii: %i</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">hello</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</code></pre></div>
<p>We are accessing the first character <code>H</code> and printing out two representations
of it. The first is the char representation (<code>%c</code>), the second is the integer
representation (<code>%i</code>). The char representation is <code>H</code>, the integer
representation is <code>72</code>. Why <code>72</code>, you ask? Because the decimal <code>72</code> represents
the letter <code>H</code> in the ascii table, which defines a charset that assigns every
number from 0 to 128 a specific meaning. Some of them are control characters,
some represent numbers, some represent letters.</p>

<p>So far so good. The data is just data that is stored somewhere, and we need to
decide how to interpret it.</p>

<h2>PHP: You should not be doing this in PHP anyways</h2>

<p>One of the main reasons why this is different in PHP is the fact that string
is a completely different type. Let&#39;s explore what PHP does:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$hello = &quot;Hello World&quot;;</span>
<span class="x">var_dump($hello[0]);</span>
<span class="x">var_dump(ord($hello[0]));</span>
</code></pre></div>
<p>To get the ascii code of a character in PHP, you need to call <code>ord</code> on a
character (which is really not a character, but a one-character string, as
there is no char type). Ord returns the ascii value of a character.</p>

<p>Unlike the C example, we have more than one representation of the data here.
In C there is only a single representation which may have different
interpretations. The number <code>72</code> could at the same time be the character <code>H</code>.
PHP requires us to convert between strings and ascii-values, storing those two
in separate variables with distinct types.</p>

<p>And this is the main pain when performing binary parsing in PHP. Since data
can be represented as a string or a number, you always need to be aware of
which you are dealing with. And depending on which one it is, you will have
different tools you can use.</p>

<h2>Dropping down to the bit level</h2>

<p>So far we&#39;ve seen how to access individual bytes and how to get their ascii
value. But this isn&#39;t very useful just yet. In order to parse binary
protocols, we need to get access to the individual bytes.</p>

<p>As an example I will use the header of a DNS packet. The header consists of 12
bytes. Those 12 bytes are divided into 6 fields, each consisting of 2 bytes.
Here is the format as defined by RFC 1035:</p>

<div class="ascii-table"><pre>
                                1  1  1  1  1  1
  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ID                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    QDCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ANCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    NSCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ARCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
</pre></div>

<p>All fields except the second are to be read as full numbers. The second one is
special, because it fits many values into those 2 bytes.</p>

<p>Let&#39;s assume that we have a DNS packet that is represented as a string, and we
wanted to parse this &quot;binary string&quot; with PHP. Extracting the number values is
easy. PHP provides an <code>unpack</code> function which allows you to unpack any string,
decomposing it into a set of fields. You need to tell it how many bytes you
want each field to have. Since we have 16 bits per field, we can just use <code>n</code>,
which is defined as  <code>unsigned short (always 16 bit, big endian byte order)</code>.
Unpack allows repeating a format as a pattern by appending a <code>*</code>, so we can
simply unpack by using:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">list($id, $fields, $qdCount, $anCount, $nsCount, $arCount) = array_values(unpack(&#39;n*&#39;, $header));</span>
</code></pre></div>
<p>It converts the string of bytes into 6 numbers, each based on two bytes. We
call <code>array_values</code> because the value returned by <code>unpack</code> is a 1-indexed
array. In order to use <code>list</code> we need a 0-indexed array.</p>

<p>Here is the data of the DNS header, represented as hexadecimal. Two digits
correspond to one byte. Two bytes are one field.</p>

<div class="ascii-table"><pre>
72 62 01 00 00 01 00 00 00 00 00 00
</pre></div>

<p>This means that the values are:</p>

<ul>
<li><code>id</code> is <code>0x7262</code> which is <code>0111 0010 0110 0010</code> in binary, <code>29282</code> in decimal.</li>
<li><code>fields</code> is <code>0x0100</code> which is <code>0000 0001 0000 0000</code> in binary.</li>
<li><code>qdCount</code> is <code>0x0001</code> which is <code>0000 0000 0000 0001</code> in binary, <code>1</code> in decimal.</li>
<li><code>anCount</code>, <code>nsCount</code> and <code>arCount</code> are <code>0</code>.</li>
</ul>

<p>Now, let&#39;s have a look at expanding that <code>fields</code> variable into the values it
contains. We cannot use unpack for that because unpack only deals with full
bytes. But we can use the value that we got by decoding with <code>n</code> and extract
the bytes from it by using bitwise operators.</p>

<h2>Bitwise operators</h2>

<p>There are a number of bitwise operators, which deal with the binary
interpretation of PHP integers.</p>

<ul>
<li><code>&amp;</code> is a bitwise <code>AND</code></li>
<li><code>|</code> is a bitwise <code>OR</code></li>
<li><code>^</code> is a bitwise <code>XOR</code></li>
<li><code>~</code> is a <code>NOT</code>, which means it inverts all bits</li>
<li><code>&lt;&lt;</code> is a left shift</li>
<li><code>&gt;&gt;</code> is a right shift</li>
</ul>

<p>The main use case for <code>&amp;</code> is bitmasks. A bitmask allows you to unset certain
bits. This is useful to only check the bits you care about, and ignore the
others.</p>

<p>We determined that the value of <code>fields</code> is a number representing <code>0000 0001
0000 0000</code>. We will process this value from right to left. The first sub-field
is <code>rcode</code>, and it is 4 bits in length. This means that we need to ignore
everything but the last 4 bits. We can do that by applying a bitmask:</p>

<div class="ascii-table"><pre>
value:          0000 0001 0000 0000
bitmask:        0000 0000 0000 1111
result of & op: 0000 0000 0000 0000
</pre></div>

<p>The <code>&amp;</code> operator sets those bits that are <code>1</code> in both the value and the
bitmask. Since there is no match in this case, the result is <code>0</code>. In PHP code,
the same operation looks like this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$rcode = $fields &amp; bindec(&#39;1111&#39;);</span>
</code></pre></div>
<blockquote>
<p>Note: We are using <code>bindec</code> to get an integer representing the binary
<code>1111</code>, because bitwise operators act on numbers. Since PHP 5.4 it is
possible to write <code>0b1111</code>, PHP will automatically convert it to the integer
value <code>15</code>.</p>
</blockquote>

<p>Now we need to get the next value, the <code>z</code>. We can also apply the bitmask, but
now we have a new problem. The value we care about has some extra bits on the
right. To be exact, the <code>4</code> bits from the <code>rcode</code>. We can set them to <code>0</code> by
using a bitmask, but that means we have some <code>0</code>s there that we do not want.</p>

<p>The solution to this is bitwise shifting. You can take the entire number, in
binary, and shift it to the left or to the right. Shifting to the right
destroys the bits on the far right, as they&#39;re shifted &quot;over the edge&quot;. In
this case we want to shift it to the right, and we want to do that 4 times.</p>

<div class="ascii-table"><pre>
value:          0000 0001 0000 0000
result of >> 4:      0000 0001 0000
</pre></div>

<p>Now we can use a bitmask on this value to extract the last 3 bits to get the
<code>z</code> value.</p>

<div class="ascii-table"><pre>
value:          0000 0001 0000 0000
result of >> 4:      0000 0001 0000
bitmask:        0000 0000 0000 0111
result of & op:      0000 0000 0000
</pre></div>

<p>And the same in PHP code:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">$z = ($fields &gt;&gt; 4) &amp; bindec(&#39;111&#39;);</span>
</code></pre></div>
<p>You can re-apply this technique over and over, in order to parse the whole
header. When you do that, you will end up with this:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">list($id, $fields, $qdCount, $anCount, $nsCount, $arCount) = array_values(unpack(&#39;n*&#39;, $header));</span>

<span class="x">$rcode = $fields &amp; bindec(&#39;1111&#39;);</span>
<span class="x">$z = ($fields &gt;&gt; 4) &amp; bindec(&#39;111&#39;);</span>
<span class="x">$ra = ($fields &gt;&gt; 7) &amp; 1;</span>
<span class="x">$rd = ($fields &gt;&gt; 8) &amp; 1;</span>
<span class="x">$tc = ($fields &gt;&gt; 9) &amp; 1;</span>
<span class="x">$aa = ($fields &gt;&gt; 10) &amp; 1;</span>
<span class="x">$opcode = ($fields &gt;&gt; 11) &amp; bindec(&#39;1111&#39;);</span>
<span class="x">$qr = ($fields &gt;&gt; 15) &amp; 1;</span>
</code></pre></div>
<p>And that&#39;s how you parse binary data with PHP.</p>

<h2>Summary</h2>

<ul>
<li>PHP has different ways of representing binary data.</li>
<li>Use <code>unpack</code> to convert from a &quot;binary string&quot; to an integer.</li>
<li>Use bitwise operators to access individual bits of that integer.</li>
</ul>

<h2>Further reading</h2>

<ul>
<li><a href="http://php.net/operators.bitwise">PHP: Bitwise Operators</a></li>
<li><a href="http://php.net/unpack">PHP: unpack</a></li>
<li><a href="http://www.ietf.org/rfc/rfc1035.txt">RFC 1035: Domain Names - Implementation and specification</a></li>
<li><a href="https://github.com/reactphp/react/blob/master/src/React/Dns/Protocol/Parser.php">Source code: <code>React\Dns\Protocol\Parser</code></a></li>
</ul>

        ]]></content>
    </entry>
    
</feed>
